{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to Luka Ljubojevic What's here? Who am I? Materials for exercising Computer Networks Some random - for education purposes - useful Linux tutorials","title":"Welcome to Luka Ljubojevic"},{"location":"index.html#welcome-to-luka-ljubojevic","text":"","title":"Welcome to Luka Ljubojevic"},{"location":"index.html#whats-here","text":"Who am I? Materials for exercising Computer Networks Some random - for education purposes - useful Linux tutorials","title":"What's here?"},{"location":"about.html","text":"About me Who am I? My name is Luka Ljubojevi\u0107 (21 M). I'm a full-time student at Faculty of Informatics and Digital Technologies - Rijeka, Croatia, first year of the masters graduate study. I possess knowledge in Computer Networks, Computer Systems Architecture, Network Operating Systems, Operating Systems in general, Managing Computer Systems, IT Systems Security, relational databases (Oracle), and I understand the basics of programming (Python and C++). I have experience in: Docker Containers, Automatization tools, Cloud IaS instances, Virtualization, Bash scripting, Caching systems, Load balancers, Web servers, Relational databases, Managing CDN systems, GitHub. Also, non-related to this brach, I gained some knowledge in: Data and Database modeling, Algorithms, Object-oriented programming, Web programming (frontend and backend) and IT Project Management. Currently a Junior CDN Administrator. How it all started? Since elementary school I have been researching computer hardware and operating systems. I first learned to assemble computers and then I discovered how to properly install an operating system. Later, I continuted playing with operating systems and found about virtual machines (VMWare, Oracle Virtualbox). I found that I like spending time playing with virtual machines so i tried installing and configuring various Linux distros, Windows Server editions, misc and retro operating systems like ReactOS, OS/2, DOS, etc. I decided to attend a technical high school - CS courses. There I learned about IT, programming, Computer networks, hardware, etc. I continued my path into IT by enrolling in Informatics at the University of Rijeka - Faculty of Informatics and Digital Technologies. There I went deeper into Computer Networks, Security, Managing Linux Systems, Programming in C++, Web development, Project management, Multimedia, etc. I plan to continue my master study. What is my motivation? In the second year of study I attended some System specific courses and discovered the job System Administrator and scope of his/her work. I found myself in that role so I started to learn what is needed to become one. This site is a by-product of my specialization in the System Administration field, I shared it for other students, my colleagues, who would like to be System Administrators but don't know where to start. Special thanks to my professor doc. dr. sc. Vedran Mileti\u0107 @ gaseri for all the help he provided. How can you contact me? e-Mail Facebook LinkedIn","title":"About"},{"location":"about.html#about-me","text":"","title":"About me"},{"location":"about.html#who-am-i","text":"My name is Luka Ljubojevi\u0107 (21 M). I'm a full-time student at Faculty of Informatics and Digital Technologies - Rijeka, Croatia, first year of the masters graduate study. I possess knowledge in Computer Networks, Computer Systems Architecture, Network Operating Systems, Operating Systems in general, Managing Computer Systems, IT Systems Security, relational databases (Oracle), and I understand the basics of programming (Python and C++). I have experience in: Docker Containers, Automatization tools, Cloud IaS instances, Virtualization, Bash scripting, Caching systems, Load balancers, Web servers, Relational databases, Managing CDN systems, GitHub. Also, non-related to this brach, I gained some knowledge in: Data and Database modeling, Algorithms, Object-oriented programming, Web programming (frontend and backend) and IT Project Management. Currently a Junior CDN Administrator.","title":"Who am I?"},{"location":"about.html#how-it-all-started","text":"Since elementary school I have been researching computer hardware and operating systems. I first learned to assemble computers and then I discovered how to properly install an operating system. Later, I continuted playing with operating systems and found about virtual machines (VMWare, Oracle Virtualbox). I found that I like spending time playing with virtual machines so i tried installing and configuring various Linux distros, Windows Server editions, misc and retro operating systems like ReactOS, OS/2, DOS, etc. I decided to attend a technical high school - CS courses. There I learned about IT, programming, Computer networks, hardware, etc. I continued my path into IT by enrolling in Informatics at the University of Rijeka - Faculty of Informatics and Digital Technologies. There I went deeper into Computer Networks, Security, Managing Linux Systems, Programming in C++, Web development, Project management, Multimedia, etc. I plan to continue my master study.","title":"How it all started?"},{"location":"about.html#what-is-my-motivation","text":"In the second year of study I attended some System specific courses and discovered the job System Administrator and scope of his/her work. I found myself in that role so I started to learn what is needed to become one. This site is a by-product of my specialization in the System Administration field, I shared it for other students, my colleagues, who would like to be System Administrators but don't know where to start. Special thanks to my professor doc. dr. sc. Vedran Mileti\u0107 @ gaseri for all the help he provided.","title":"What is my motivation?"},{"location":"about.html#how-can-you-contact-me","text":"e-Mail Facebook LinkedIn","title":"How can you contact me?"},{"location":"demonstrature.html","text":"Demonstrature RM Kontakt Za sva pitanja: Whatsapp Iza 22h Instalacija Linuxa Resize disk -- ovo zna dugo trajati.. Dobro pazite koji disk resizate, ako pi\u0161e tip particije Bitlocker nemojte ni\u0161ta raditi nego mi se javite!!! Idealno bi bilo da kupite prijenosni HDD ili SSD Portable SSD 600kn - bolje Portable HDD 420kn - gore, ali ga mo\u017eete particionirati tipa 100GB za Linux, ostalo cca 840GB NTFS particija za masovnu pohranu podataka Particioniranje u instalacijskom programu Ako imate vi\u0161e particija i Windowse na njima, od resizeanog prostora stvorite particije: 300MB, tip: FAT32, mount point: /boot/efi, flags: boot SAMO ZA SUSTAVE KOJI SU EFI (Kako znate? Naj\u010de\u0161\u0107e imate Windows particiju tipa FAT32 od 100MB) --- na tu EFI particiju od Windowsa (100MB) dodati mount point /boot/efi i flag boot ali pazite da je checkirano KEEP a ne FORMAT! Ako ste kupili prijenosni disk ili imate prazan disk u laptopu/PC-u onda particija je 300MB fat32 format /boot/efi flag boot Koliko god imate MB, tip: ext4/btrfs, mount point: /, no flags Instalirajte Linuxe kako instalacijski program ve\u0107 ide.. Instalacija softvera Ubuntu/Mint sudo apt-get update sudo apt-get install sudo apt-get install bash bridge-utils ebtables iproute2 libev-dev python-is-python3 libtk-img xterm mgen traceroute git clone https://github.com/coreemu/core.git cd core ./setup.sh source ~/.bashrc inv install sudo systemctl enable --now core-daemon.service sudo systemctl start core-daemon.service sudo apt-get install wireshark-qt **TODO ostali paketi** Manjaro sudo pacman -S --needed base-devel git clone https://aur.archlinux.org/paru.git cd paru makepkg -si paru -S tkimg paru -S mgen paru -S core sudo pacman -S openssh inetutils net-tools iproute2 traceroute iw wireless_tools bridge-utils iptables-nft nftables quagga dhclient dhcp wireshark-qt gnuplot siege curl curlie php xdebug jq sudo usermod -aG wireshark (whoami) sudo systemctl enable --now core-daemon.service sudo reboot now sudo systemctl start core-daemon.service Za garudu po principu za Manjaro bez prvog bloka naredbi za paru! Ako paru -S core faila, nema veze samo nastavite Virtualizacija - za one kojiima Linux ne\u0107e VMWare Player - moja preferencija Virtualbox Imajte na umu da morate uklju\u010diti Intel VT-x/VT-d u BIOSu, analogno Virtualization Technology na AMD-ima. Manjaro What dis? Kako se to radi? What?? VT-d?? Ako ve\u0107 idete na virualizaciju odaberite Manjaro/Garudu (Arch), mo\u017eda bolje XFCE desktop okru\u017eenje br\u017ee \u0107e raditi.. Demonstrature 1 - Snimanje mre\u017enog prometa Kad tra\u017eite su\u010delje za Wireshark pogledajte tra\u017eeni router, crveni link izme\u0111u tog i drugog tra\u017eenog, pa onda wireshark na IP adresu koju vidite kog prvog rutera Display filteri su u tra\u017eilici Capture filteri su u meniju Capture - Capture filters - + - dodajte - pa ponovno pokrenite snimanje Za snimanje prometa MORAJU BITI UKLJU\u010cENI TOKOVI u core-u Sintaksa naredbi za display filter Port: protokol.(src/dst)port==PORT or protocol.(src/dst)port==PORT Ako je u pitanju IP adresa: ip.src/dst==IP or ip.src/dst==IP Ako tra\u017eite sve osim ne\u010dega: !(ip.src==IP) !(protoko.(src/dst)port==PORT or ...) Ako tra\u017eite jednu vrstu paketa protokol Kombinirajte.. Sintaksa naredbi za capture filter protokol src/dest net IPADDR src/dest net IP ADDR npr... icmp src net 10.0.6.11 dst net 10.0.1.20 protokol src/dest port PORT npr... udp dst port 4000 Tra\u017eenje paketa koji pripada toku X Pogledajte koji su src i dst \u010dvorovi u toku i display filtrirajte pakete t.d.: ip.src == IPpo\u010detnogNODA and ip.dst == IPzavr\u0161nogNODA... uzmite 5. ili 6. iz liste U Wiresharku dvoklik na paket pa idete po kategorijama po ono \u0161to se tra\u017ei Npr.. ne\u0161to IP ne\u0161to idete u Internel Protocol ver 4 sekciju itd. RX,TX pitanje saznajte koli\u010dinu primljenih (received, RX) i poslanih (transmitted, TX) podataka na ruteru i pro\u010ditajte vrijednosti netstat -ie Komunikacija HTTP klijenta i poslu\u017eitelja (cURL, PHP) Treba nam curl Linux: man curl Parametri: -X, --request <method> Specify request method to use -v, --verbose Make the operation more talkative -i, --include Include protocol response headers in the output -k, --insecure Allow insecure server connections (npr. istekli HTTPS certifikati) -H, --header <header/@file> Pass custom header(s) to server -w, --write-out <format> Use output FORMAT after completion (npr 15 zahtjeva) -d, --data <data> HTTP POST data -c, --cookie-jar <filename> Write cookies to <filename> after operation -o, --output <file> Write to file instead of stdout -A, --user-agent <name> Send User-Agent <name> to server -I, --head Show document info only Kako izvesti HTTP zahtjev HEAD za dohva\u0107anje zaglavlja URL-ova? curl -X HTTP_REQUEST -I \"URL\" Zanimljivo nam je promatrati content-type, server i HTTP response kodove Serveri su \u010desto razli\u010diti, razli\u010dite stranice koriste razli\u010dite web servise na kojima imaju origin. Neki od njih su cloudfare, AWS, GitHub... Primjer outputa: curl -X GET -i \"https://gaseri.org\" HTTP/2 200 server: GitHub.com content-type: text/html; charset=utf-8 last-modified: Wed, 19 Oct 2022 11:38:02 GMT access-control-allow-origin: * etag: \"634fe19a-294d7\" expires: Tue, 25 Oct 2022 10:12:03 GMT cache-control: max-age=600 x-proxy-cache: MISS x-github-request-id: 0805:1832:204DD5:2138CA:6357B41B accept-ranges: bytes date: Tue, 25 Oct 2022 10:02:55 GMT via: 1.1 varnish age: 52 x-served-by: cache-sof1510024-SOF x-cache: HIT x-cache-hits: 1 x-timer: S1666692175.266168,VS0,VE1 vary: Accept-Encoding x-fastly-request-id: d791fb290e210cac14a23993ec8571f82fe54bf2 content-length: 169175 Kako \u0107emo proslijediti podatke u URL? curl -X HTTP_REQUEST URL -d \"val1=x\" -d \"val2=y\" -d \"val3=z\" Kako \u0107emo izvr\u0161iti zahtjev kao neki user-agent? User agente mo\u017eemo prona\u0107i ovdje curl -v -A 'MOJ_USER_AGENT' -I URL Kako \u0107emo dohvatiti stranicu i njezin cookie? Kao HTTP ga ne\u0107emo dobiti jer se cookie generira prema HASH-u korisnika (nastaje jedinstveni URL na\u0161e sesije), a on nastaje samo prilikom TLS autentifikacije (pristup HTTPS verziji URL-a). curl -c MOJ_COOKIE.txt URL Kako \u0107emo napraviti php datoteku t.d. nas, ako je zahtjev GET, ovisno o nekoj putanji, preusmjeri HTTP kodom? <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"HTTP_REQUEST_METODA\" && $_SERVER[\"REQUEST_URI\"] == \"/PUTANJA NA KOJU DOLAZIMO\") { http_response_code(TRA\u017dENI_RESPONSE_KOD); header(\"Location: PUTANJA NA KOJU REDIRECTAMO\"); } Kako \u0107emo napraviti php datoteku t.d. nam javi poruku o gre\u0161ci ako, neautorizirani, izvr\u0161imo request \"POST\" if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $KLJU\u010c_AUTORIZACIJE=vrijednost $PROVJERA_AUTORIZACIJE = $_POST[\"PROVJERA_AUTORIZACIJE\"]; if ($KLJU\u010c_AUTORIZACIJE==$PROVJERA_AUTORIZACIJE){ http_response_code(TRA\u017dENI_RESPONSE_KOD_AKO_SMO_AUT); } else{ http_response_code(TRA\u017dENI_RESPONSE_KOD_AKO_NISMO_AUT); }} ?> Kako pokrenemo php datoteku? Kao output dobiti \u0107emo lokaciju na kojoj se poslu\u017euje datoteka (naj\u010de\u0161\u0107e localhost:8080/80) php moj_php.php Kako proslijediti podatke u PHP? curl -vLX POST -d \"val1=x\" -d \"val2=y\" URL Kako provjeriti zahtjev nad PHP-om? curl -vLX GET URL Kako u PHP-u dohvatiti vrijednost metodom GET i provjeriti je li vrijednost postavljena? $vrijednost=$_GET[\"vrijednost\"]; if (!isset(vrijednost)){ moje naredbe; } Kako ispisati poruku u PHP-u? echo \"\"<p>Moja poruka</p>\\n\"; HTTP autentifikacija u jeziku PHP HTTP Basic autentifikacija koristi base64 enkodirano korisni\u010dko ime i lozinku, naravno mi mo\u017eemo i kriptirati na\u0161e podatke kojim god cipherom \u017eelimo..: vi\u0161e na MMOS kolegiju openssl enc -chiphers Kodiranje base64: echo -n \"encode me\" | openssl enc -base64 ZW5jb2RlIG1lCg== Dekodiranje base64: echo \"ZW5jb2RlIG1lCg==\" | openssl enc -base64 -d Enkripcija AES-256 algoritmom: echo \"korisnik@korisnik.hr\" | openssl enc --aes-256-ctr -a enter AES-256-CTR encryption password: mojTajniPass U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA== Kako \u0107emo napraviti autorizaciju PHP kodom? <?php $request_headers = getallheaders(); if (array_key_exists(\"Authorization\", $request_headers) && $request_headers[\"Authorization\"] == \"U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA==\") { echo \"<p>Tajni podaci NASA USA CIA</p>\\n\"; } else { http_response_code(401); echo \"<p>Ruski hakleru bizi!</p>\\n\"; } Pokrenimo kod i testirajmo: lljubojevic@IdeaPad5-Pro:~/Desktop$ mkdir public lljubojevic@IdeaPad5-Pro:~/Desktop$ mv moj2php.php public/index.php lljubojevic@IdeaPad5-Pro:~/Desktop$ php -S localhost:8000 -t public Uz prave podatke: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -H \"Authorization: U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA==\" http://localhost:8000/ * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > GET / HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Authorization: U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA== > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:18:34 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>Tajni podaci NASA USA CIA</p> * Closing connection 0 Uz krive podatke: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -H \"Authorization: grinc\" http://localhost:8000/ * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > GET / HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Authorization: grinc > * Mark bundle as not supporting multiuse < HTTP/1.1 401 Unauthorized < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:18:15 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>Ruski hakleru bizi!</p> * Closing connection 0 gaseri - Implementacija autentifikacije RFC 7235 naslovljen Hypertext Transfer Protocol (HTTP/1.1): Authentication definira op\u0107eniti autenfikacijski okvir na na\u010din: Klijent \u0161alje zahtjev za resursom, a poslu\u017eitelj \u0161alje odgovor sa statusnim kodom 401 Unauthorized ... koji sadr\u017ei informacije o tome kako se autentificirati i zaglavlje WWW-Authenticate s najmanje jednim izazovom... Klijent koji se \u017eeli autentificirati s poslu\u017eiteljem \u0107e poslati zahtjev koji sadr\u017ei zaglavlje Authorization s tipom vjerodajnicama autorizacije. Kako to radi u PHP-u? gaseri U jeziku PHP mogu\u0107e je implementirati HTTP autentifikaciju kori\u0161tenjem funkcije header() za slanje HTTP zaglavlja WWW-Authenticate s odgovaraju\u0107om vrijednosti i, kao i ranije, funkcije http_response_code() za postavljanje statusnog koda 401 Unauthorized u odgovoru na zahtjev. Nakon primanja idu\u0107eg zahtjeva koji sadr\u017ei zaglavlje Authorization s odgovaraju\u0107om vrijednosti, u polju $_SERVER su dodane vrijednosti $_SERVER[\"AUTH_TYPE\"], $_SERVER[\"PHP_AUTH_USER\"] i $_SERVER[\"PHP_AUTH_PW\"] koje sadr\u017ee tip autentifikacije, korisni\u010dko ime i zaporku (respektivno). PHP autentifikacija <?php if ($_SERVER[\"PHP_AUTH_USER\"] == 'ilijacvorovic' && $_SERVER[\"PHP_AUTH_PW\"] == 'sokol' ) { $user = $_SERVER[\"PHP_AUTH_USER\"]; $pw = $_SERVER[\"PHP_AUTH_PW\"]; echo \"<p>Halo, ovdje $user...</p>\\n\"; } else { http_response_code(401); header(\"WWW-Authenticate: Basic realm=\\\"Tajni laboratorij Odjela za informatiku\\\"\"); echo \"<p>Moze centrala pogrijesiti jednom ali ne 100 puta!.</p>\\n\"; } Testiranje s ispravnim loginom: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -u ilijacvorovic:sokol http://localhost:8000/* Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) * Server auth using Basic with user 'ilijacvorovic' > GET / HTTP/1.1 > Host: localhost:8000 > Authorization: Basic aWxpamFjdm9yb3ZpYzpzb2tvbA== > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:24:06 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>Halo, ovdje ilijacvorovic...</p> * Closing connection 0 Testiranje s neispravnim loginom: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -u jakovljevic:sokol http://localhost:8000/ * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) * Server auth using Basic with user 'jakovljevic' > GET / HTTP/1.1 > Host: localhost:8000 > Authorization: Basic amFrb3ZsamV2aWM6c29rb2w= > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 401 Unauthorized < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:24:19 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 * Authentication problem. Ignoring this. < WWW-Authenticate: Basic realm=\"Tajni laboratorij Odjela za informatiku\" < Content-type: text/html; charset=UTF-8 < <p>Moze centrala pogrijesiti jednom ali ne 100 puta!.</p> * Closing connection 0 Obrada podataka zapisanih u obliku JavaScript Object Notation (JSON) u jeziku PHP Kako radi json u PHP-u? <?php $arr1 = [\"moja vrijednost\", 1, 3.5, true]; $arr2 = [\"moj kljuc\" => \"moja vrijednost\", \"broj\" => 8, \"drugi broj\" => 3.5, \"je li istina\" => true]; $arr3 = $arr2; $arr3[\"polje\"] = $arr1; $j3 = json_encode($arr3, JSON_PRETTY_PRINT); echo $j3; Kako dekodirati json u php-u? <?php $j = '{\"firstName\":\"Ivan\",\"lastName\":\"Horvat\",\"isAlive\":true,\"age\":19,\"address\":{\"streetAddress\":\"Radmile Matej\u010di\u0107 2a\",\"city\":\"Rijeka\",\"state\":\"Primorsko-goranska \u017eupanija\",\"postalCode\":\"51000\"},\"jobTitle\":\"junior software engineer\",\"phoneNumbers\":[{\"type\":\"home\",\"number\":\"051/999-999\"},{\"type\":\"office\",\"number\":\"099/999-9999\"}],\"twitterHandle\":\"@IvanNajjaciHorvat\",\"children\":[],\"spouse\":null}'; $person = json_decode($j, true); print_r($person); lljubojevic@IdeaPad5-Pro:~/Desktop/public$ php index.php Array ( [firstName] => Ivan [lastName] => Horvat [isAlive] => 1 [age] => 19 [address] => Array ( [streetAddress] => Radmile Matej\u010di\u0107 2a [city] => Rijeka [state] => Primorsko-goranska \u017eupanija [postalCode] => 51000 ) [jobTitle] => junior software engineer [phoneNumbers] => Array ( [0] => Array ( [type] => home [number] => 051/999-999 ) [1] => Array ( [type] => office [number] => 099/999-9999 ) ) [twitterHandle] => @IvanNajjaciHorvat [children] => Array ( ) [spouse] => ) No, to nije \"\u010ditki\" json.. zato koristimo jq: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ echo '{\"firstName\":\"Ivan\",\"lastName\":\"Horvat\",\"isAlive\":true,\"age\":19,\"address\":{\"streetAddress\":\"Radmile Matej\u010di\u0107 2a\",\"city\":\"Rijeka\",\"state\":\"Primorsko-goranska \u017eupanija\",\"postalCode\":\"51000\"},\"jobTitle\":\"junior software engineer\",\"phoneNumbers\":[{\"type\":\"home\",\"number\":\"051/999-999\"},{\"type\":\"office\",\"number\":\"099/999-9999\"}],\"twitterHandle\":\"@IvanNajjaciHorvat\",\"children\":[],\"spouse\":null}' | jq . { \"firstName\": \"Ivan\", \"lastName\": \"Horvat\", \"isAlive\": true, \"age\": 19, \"address\": { \"streetAddress\": \"Radmile Matej\u010di\u0107 2a\", \"city\": \"Rijeka\", \"state\": \"Primorsko-goranska \u017eupanija\", \"postalCode\": \"51000\" }, \"jobTitle\": \"junior software engineer\", \"phoneNumbers\": [ { \"type\": \"home\", \"number\": \"051/999-999\" }, { \"type\": \"office\", \"number\": \"099/999-9999\" } ], \"twitterHandle\": \"@IvanNajjaciHorvat\", \"children\": [], \"spouse\": null } HTTP Kola\u010di\u0107i i PHP gaseri HTTP kola\u010di\u0107 (engl. HTTP cookie, Wikipedia, vi\u0161e detalja o kola\u010di\u0107ima na MDN-u) je maleni dio podataka koji korisni\u010dki agent pohranjuje na ra\u010dunalu korisnika kod pregledavanja web sjedi\u0161ta. Na temelju pohranjenih podataka web sjedi\u0161te pamti stanje koje je korisnik stvorio svojim pregledavanjem, npr. predmete dodane u ko\u0161aricu za kupnju, prijavu na zatvoreni dio sjedi\u0161ta upotrebom odre\u0111enog korisni\u010dkog ra\u010duna ili tekst prethodnih pretraga arhive audiovizualnih datoteka. Stvorili smo base64 enkodiranjem neke kola\u010di\u0107e: cGxlbmtp em9raQ== dmxhZG8= ZHpv emVsZW5rbw== emJvZw== dmFz bWkgamU= c2t1cA== cGxpbg== cGEgbmlzYW0= Z2FzZXI= Napravimo PHP kod koji \u0107e pohraniti svakom \"prijavljenom\" korisniku neki enkriptirani ID u kola\u010di\u0107: <?php $file = \"secretCodesOnFBserver.json\"; if (file_exists($file)) { $j = file_get_contents($file); $data = json_decode($j, true); } else { $data = []; } $tokeni = [\"cGxlbmtp\", \"em9raQ==\", \"dmxhZG8=\", \"ZHpv\", \"emVsZW5rbw==\",\"emJvZw==\",\"dmFz\",\"bWkgamU=\",\"c2t1cA==\", \"cGxpbg==\",\"cGEgbmlzYW0=\",\"Z2FzZXI=\"]; if ($_SERVER[\"REQUEST_URI\"] == \"/login\") { if ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") { if (array_key_exists(\"user_id\", $_COOKIE) && array_key_exists($_COOKIE[\"user_id\"], $data)) { $user_id = $_COOKIE[\"user_id\"]; $prev_token = $data[$user_id]; echo \"<p>It is I, \" . $prev_token . \".</p>\\n\"; } else { http_response_code(404); echo \"<p>Hmm.. sneaky? Tor?</p>\\n\"; } } else if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $token_key = array_rand($tokeni); $tokeni = $tokeni[$token_key]; echo \"<p>You've been Zucced as\" . $tokeni . \".</p>\\n\"; if (array_key_exists(\"user_id\", $_COOKIE) && array_key_exists($_COOKIE[\"user_id\"], $data)) { $user_id = $_COOKIE[\"user_id\"]; $data[$user_id] = $tokeni; } else { $data[] = $tokeni; $user_id = array_key_last($data); setcookie(\"user_id\", $user_id); } } } $j = json_encode($data); file_put_contents($file, $j); Testirajmo metodama POST i GET s dvije prazne, razli\u010dite, datoteke: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -c cookies.txt -X POST http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > POST /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:50:00 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 * Added cookie user_id=\"0\" for domain localhost, path /, expire 0 < Set-Cookie: user_id=0 < Content-type: text/html; charset=UTF-8 < <p>You've been Zucced asem9raQ==.</p> * Closing connection 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ ls cookies.txt index.php secretCodesOnFBserver.json lljubojevic@IdeaPad5-Pro:~/Desktop/public$ cat cookies.txt # Netscape HTTP Cookie File # https://curl.se/docs/http-cookies.html # This file was generated by libcurl! Edit at your own risk. localhost FALSE / FALSE 0 user_id 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -b cookies.txt http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > GET /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Cookie: user_id=0 > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:50:23 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>It is I, em9raQ==.</p> * Closing connection 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -b cookies.txt -X POST http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > POST /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Cookie: user_id=0 > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:50:40 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>You've been Zucced asbWkgamU=.</p> * Closing connection 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -c cookies-new.txt -X POST http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > POST /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:51:32 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 * Added cookie user_id=\"1\" for domain localhost, path /, expire 0 < Set-Cookie: user_id=1 < Content-type: text/html; charset=UTF-8 < <p>You've been Zucced asZHpv.</p> * Closing connection 0 Podmre\u017ee TODO Prevo\u0111enje mre\u017enih adresa - NAT Ako promotrite ovaj simboli\u010dni prikaz \"arhitekture\" interneta.. sigurno si postavljate pitanje kako je mogu\u0107e da dvije podmre\u017ee na svijetu imaju istu IP adresu. To se kosi s onim \u0161to ste do sada nau\u010dili. Odgovor na to pitanje je ne\u0161to \u0161to se naziva NAT (Network Address Translation). Network Address Translation (NAT) is a service that enables private IP networks to use the internet and cloud. NAT translates private IP addresses in an internal network to a public IP address before packets are sent to an external network. Kako NAT radi? Network Address Translation (NAT) is a service that operates on a router or edge platform to connect private networks to public networks like the internet. NAT is often implemented at the WAN edge router to enable internet access in core, campus, branch, and colocation sites. With NAT, an organization needs one IP address or one limited public IP address to represent an entire group of devices as they connect outside their network. Port Address Translation (PAT) enables one single IP to be shared by multiple hosts using IP and port address translation. Vrste NAT-a: Stati\u010dki NAT > Static NAT is a private IP address that is a single unregistered IP that is mapped with a legal Public IP address. Here one to one mapping is made within local and global address which is generally applied for web hosting. Dinami\u010dki NAT > Dynamic NAT is an unregistered IP address that is private is changed to a registered public address from a group of the public IP address. If the IP address group is occupied, then the packets are transmitted with a fixed number of the private IP address that can be transmitted to the public address PAT (Port Address Translation) > Port Address Translation is called NAT overload, where many private IP addresses can be transmitted into unit registered IP addresses. The port numbers are applied to differentiate the traffic flow that belongs to an individual IP address. This is frequently used as a cost-saving method since thousands of servers can be connected to the internet by one real global public IP address. Za\u0161to se NAT koristi? \u0160tedi IP adrese \u010cuva pouzdanost i fleksibilnost Interneta NAT ima posebne metode adresiranja mre\u017ee Dodaje razinu sigurnosti na mre\u017eu jer se ure\u0111ajima ne mo\u017ee direktno pristupiti A \u0161to je onda CGNAT? CGNAT is a network address translation technique that extends the IPv4 networks on a considerable scale and allows ISPs (internet service providers) to conserve their acquired IPv4 pool. Every online user has two IP addresses, a public and a private one. When a user intends to communicate online, the standard NAT protocol translates their private IPv4 address to a public one. But with CGNAT (LSN or NAT 444), an extra layer of address translation is added. The unique private IP addresses are translated into public IPs shared by multiple users. And this is how ISPs prevent their IPv4 pool from exhaustion. Prikaz IPv4 NAT pravila na sustavu: lljubojevic@IdeaPad-5-Pro:~$ sudo iptables -t nat -L -n -v [sudo] password for lljubojevic: Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain INPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination NAT tablica preslikavanja: Za\u0161to nam je tu bitan iptables: iptables - gaseri iptables example Definiranje NAT-a na ruteru: Uvijek uzmite su\u010delje na van (za POSTROUTING) iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE Kako to napraviti kada \u017eelimo omogu\u0107iti pristup nekom \u010dvoru iz vanjske mre\u017ee: Na vanjskom ruteru radimo PREROUTING (na unutra) za sve TCP pakete koji dolaze na port 2223 s odredi\u0161ta (vanjsko su\u010delje rutera) na odredi\u0161te u na\u0161oj mre\u017ei IP:2223 iptables -t nat -A PREROUTING -p tcp --dport 2223 -d 10.72.0.1 -j DNAT --to-destination 192.168.6.21:2223 A kako napraviti pristup svim vratima putem vanjske adrese rutera? Na vanjskom ruteru (rubnom u podmre\u017ei) radimo POSTROUTING (na van) svega \u0161to dolazi s rutera na neki \u010dvor iptables -t nat -A POSTROUTING -o eth0 -j SNAT -s 10.72.0.1 --to-source 192.168.6.22 Vatrozid Vatrozid u op\u0107enitom smislu podrazumijeva ure\u0111aj koji nadzire, te na temelju zadanih pravila, propu\u0161ta ili odbacuje mre\u017eni promet Vatrozid promet filtrira na vi\u0161e slojeva, ovisno o namjeni i potrebi (linkto: tcp/ip stack). Naj\u010de\u0161\u0107e se promet filtrira na IP i transportnom (TCP, UDP ...) sloju, me\u0111utim mogu\u0107e je definirati pravila filtriranja i za ni\u017ei \u2013 sloj podatkovne poveznice (Ethernet ...) i za vi\u0161i \u2013 aplikacijski sloj (HTTP, SMTP ...). Slo\u017eenost samog filtriranja ovisi o sloju filtriranja, pa tako filtriranje na vi\u0161im slojevima omogu\u0107uje \u201epametnije\u201c filtriranje (vi\u0161i slojevi sadr\u017ee vi\u0161e meta-podataka koji omogu\u0107uju selektivnije filtriranje), dok je s druge strane postupak filtriranja na ni\u017eim slojevima br\u017ei. Detalji na gaserima iptables [-t table] {-A|-C|-D} chain rule-specification Na primjer ako \u017eelimo postaviti vatrozid t.d. s nekih mre\u017ea mo\u017eemo pristupati nekim vratima, a s ostalih ne mo\u017eemo kao u zadatku: Postavite iptables na n1, n2 tako da n5, n6, n7 mogu na n17, n18, n19 pristupati samo vratima 8080, 80 i 8443, a da je pristup ostalim vratima zabranjen. Koristit \u0107emo slijede\u0107e naredbe: n1: iptables -A INPUT -p tcp -s 172.22.0.2/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.0.2/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.0.2/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT n2: iptables -A INPUT -p tcp -s 172.22.1.20/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.21/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.22/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.20/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.21/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.22/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.20/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.21/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.22/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT","title":"Demonstrature"},{"location":"demonstrature.html#demonstrature-rm","text":"","title":"Demonstrature RM"},{"location":"demonstrature.html#kontakt","text":"Za sva pitanja: Whatsapp Iza 22h","title":"Kontakt"},{"location":"demonstrature.html#instalacija-linuxa","text":"Resize disk -- ovo zna dugo trajati.. Dobro pazite koji disk resizate, ako pi\u0161e tip particije Bitlocker nemojte ni\u0161ta raditi nego mi se javite!!! Idealno bi bilo da kupite prijenosni HDD ili SSD Portable SSD 600kn - bolje Portable HDD 420kn - gore, ali ga mo\u017eete particionirati tipa 100GB za Linux, ostalo cca 840GB NTFS particija za masovnu pohranu podataka Particioniranje u instalacijskom programu Ako imate vi\u0161e particija i Windowse na njima, od resizeanog prostora stvorite particije: 300MB, tip: FAT32, mount point: /boot/efi, flags: boot SAMO ZA SUSTAVE KOJI SU EFI (Kako znate? Naj\u010de\u0161\u0107e imate Windows particiju tipa FAT32 od 100MB) --- na tu EFI particiju od Windowsa (100MB) dodati mount point /boot/efi i flag boot ali pazite da je checkirano KEEP a ne FORMAT! Ako ste kupili prijenosni disk ili imate prazan disk u laptopu/PC-u onda particija je 300MB fat32 format /boot/efi flag boot Koliko god imate MB, tip: ext4/btrfs, mount point: /, no flags Instalirajte Linuxe kako instalacijski program ve\u0107 ide..","title":"Instalacija Linuxa"},{"location":"demonstrature.html#instalacija-softvera","text":"","title":"Instalacija softvera"},{"location":"demonstrature.html#ubuntumint","text":"sudo apt-get update sudo apt-get install sudo apt-get install bash bridge-utils ebtables iproute2 libev-dev python-is-python3 libtk-img xterm mgen traceroute git clone https://github.com/coreemu/core.git cd core ./setup.sh source ~/.bashrc inv install sudo systemctl enable --now core-daemon.service sudo systemctl start core-daemon.service sudo apt-get install wireshark-qt **TODO ostali paketi**","title":"Ubuntu/Mint"},{"location":"demonstrature.html#manjaro","text":"sudo pacman -S --needed base-devel git clone https://aur.archlinux.org/paru.git cd paru makepkg -si paru -S tkimg paru -S mgen paru -S core sudo pacman -S openssh inetutils net-tools iproute2 traceroute iw wireless_tools bridge-utils iptables-nft nftables quagga dhclient dhcp wireshark-qt gnuplot siege curl curlie php xdebug jq sudo usermod -aG wireshark (whoami) sudo systemctl enable --now core-daemon.service sudo reboot now sudo systemctl start core-daemon.service Za garudu po principu za Manjaro bez prvog bloka naredbi za paru! Ako paru -S core faila, nema veze samo nastavite","title":"Manjaro"},{"location":"demonstrature.html#virtualizacija-za-one-kojiima-linux-nece","text":"VMWare Player - moja preferencija Virtualbox Imajte na umu da morate uklju\u010diti Intel VT-x/VT-d u BIOSu, analogno Virtualization Technology na AMD-ima. Manjaro What dis? Kako se to radi? What?? VT-d?? Ako ve\u0107 idete na virualizaciju odaberite Manjaro/Garudu (Arch), mo\u017eda bolje XFCE desktop okru\u017eenje br\u017ee \u0107e raditi..","title":"Virtualizacija - za one kojiima Linux ne\u0107e"},{"location":"demonstrature.html#demonstrature-1-snimanje-mreznog-prometa","text":"Kad tra\u017eite su\u010delje za Wireshark pogledajte tra\u017eeni router, crveni link izme\u0111u tog i drugog tra\u017eenog, pa onda wireshark na IP adresu koju vidite kog prvog rutera Display filteri su u tra\u017eilici Capture filteri su u meniju Capture - Capture filters - + - dodajte - pa ponovno pokrenite snimanje Za snimanje prometa MORAJU BITI UKLJU\u010cENI TOKOVI u core-u","title":"Demonstrature 1 - Snimanje mre\u017enog prometa"},{"location":"demonstrature.html#sintaksa-naredbi-za-display-filter","text":"Port: protokol.(src/dst)port==PORT or protocol.(src/dst)port==PORT Ako je u pitanju IP adresa: ip.src/dst==IP or ip.src/dst==IP Ako tra\u017eite sve osim ne\u010dega: !(ip.src==IP) !(protoko.(src/dst)port==PORT or ...) Ako tra\u017eite jednu vrstu paketa protokol Kombinirajte..","title":"Sintaksa naredbi za display filter"},{"location":"demonstrature.html#sintaksa-naredbi-za-capture-filter","text":"protokol src/dest net IPADDR src/dest net IP ADDR npr... icmp src net 10.0.6.11 dst net 10.0.1.20 protokol src/dest port PORT npr... udp dst port 4000","title":"Sintaksa naredbi za capture filter"},{"location":"demonstrature.html#trazenje-paketa-koji-pripada-toku-x","text":"Pogledajte koji su src i dst \u010dvorovi u toku i display filtrirajte pakete t.d.: ip.src == IPpo\u010detnogNODA and ip.dst == IPzavr\u0161nogNODA... uzmite 5. ili 6. iz liste U Wiresharku dvoklik na paket pa idete po kategorijama po ono \u0161to se tra\u017ei Npr.. ne\u0161to IP ne\u0161to idete u Internel Protocol ver 4 sekciju itd.","title":"Tra\u017eenje paketa koji pripada toku X"},{"location":"demonstrature.html#rxtx-pitanje","text":"saznajte koli\u010dinu primljenih (received, RX) i poslanih (transmitted, TX) podataka na ruteru i pro\u010ditajte vrijednosti netstat -ie","title":"RX,TX pitanje"},{"location":"demonstrature.html#komunikacija-http-klijenta-i-posluzitelja-curl-php","text":"Treba nam curl Linux: man curl Parametri: -X, --request <method> Specify request method to use -v, --verbose Make the operation more talkative -i, --include Include protocol response headers in the output -k, --insecure Allow insecure server connections (npr. istekli HTTPS certifikati) -H, --header <header/@file> Pass custom header(s) to server -w, --write-out <format> Use output FORMAT after completion (npr 15 zahtjeva) -d, --data <data> HTTP POST data -c, --cookie-jar <filename> Write cookies to <filename> after operation -o, --output <file> Write to file instead of stdout -A, --user-agent <name> Send User-Agent <name> to server -I, --head Show document info only Kako izvesti HTTP zahtjev HEAD za dohva\u0107anje zaglavlja URL-ova? curl -X HTTP_REQUEST -I \"URL\" Zanimljivo nam je promatrati content-type, server i HTTP response kodove Serveri su \u010desto razli\u010diti, razli\u010dite stranice koriste razli\u010dite web servise na kojima imaju origin. Neki od njih su cloudfare, AWS, GitHub... Primjer outputa: curl -X GET -i \"https://gaseri.org\" HTTP/2 200 server: GitHub.com content-type: text/html; charset=utf-8 last-modified: Wed, 19 Oct 2022 11:38:02 GMT access-control-allow-origin: * etag: \"634fe19a-294d7\" expires: Tue, 25 Oct 2022 10:12:03 GMT cache-control: max-age=600 x-proxy-cache: MISS x-github-request-id: 0805:1832:204DD5:2138CA:6357B41B accept-ranges: bytes date: Tue, 25 Oct 2022 10:02:55 GMT via: 1.1 varnish age: 52 x-served-by: cache-sof1510024-SOF x-cache: HIT x-cache-hits: 1 x-timer: S1666692175.266168,VS0,VE1 vary: Accept-Encoding x-fastly-request-id: d791fb290e210cac14a23993ec8571f82fe54bf2 content-length: 169175 Kako \u0107emo proslijediti podatke u URL? curl -X HTTP_REQUEST URL -d \"val1=x\" -d \"val2=y\" -d \"val3=z\" Kako \u0107emo izvr\u0161iti zahtjev kao neki user-agent? User agente mo\u017eemo prona\u0107i ovdje curl -v -A 'MOJ_USER_AGENT' -I URL Kako \u0107emo dohvatiti stranicu i njezin cookie? Kao HTTP ga ne\u0107emo dobiti jer se cookie generira prema HASH-u korisnika (nastaje jedinstveni URL na\u0161e sesije), a on nastaje samo prilikom TLS autentifikacije (pristup HTTPS verziji URL-a). curl -c MOJ_COOKIE.txt URL Kako \u0107emo napraviti php datoteku t.d. nas, ako je zahtjev GET, ovisno o nekoj putanji, preusmjeri HTTP kodom? <?php if ($_SERVER[\"REQUEST_METHOD\"] == \"HTTP_REQUEST_METODA\" && $_SERVER[\"REQUEST_URI\"] == \"/PUTANJA NA KOJU DOLAZIMO\") { http_response_code(TRA\u017dENI_RESPONSE_KOD); header(\"Location: PUTANJA NA KOJU REDIRECTAMO\"); } Kako \u0107emo napraviti php datoteku t.d. nam javi poruku o gre\u0161ci ako, neautorizirani, izvr\u0161imo request \"POST\" if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $KLJU\u010c_AUTORIZACIJE=vrijednost $PROVJERA_AUTORIZACIJE = $_POST[\"PROVJERA_AUTORIZACIJE\"]; if ($KLJU\u010c_AUTORIZACIJE==$PROVJERA_AUTORIZACIJE){ http_response_code(TRA\u017dENI_RESPONSE_KOD_AKO_SMO_AUT); } else{ http_response_code(TRA\u017dENI_RESPONSE_KOD_AKO_NISMO_AUT); }} ?> Kako pokrenemo php datoteku? Kao output dobiti \u0107emo lokaciju na kojoj se poslu\u017euje datoteka (naj\u010de\u0161\u0107e localhost:8080/80) php moj_php.php Kako proslijediti podatke u PHP? curl -vLX POST -d \"val1=x\" -d \"val2=y\" URL Kako provjeriti zahtjev nad PHP-om? curl -vLX GET URL Kako u PHP-u dohvatiti vrijednost metodom GET i provjeriti je li vrijednost postavljena? $vrijednost=$_GET[\"vrijednost\"]; if (!isset(vrijednost)){ moje naredbe; } Kako ispisati poruku u PHP-u? echo \"\"<p>Moja poruka</p>\\n\";","title":"Komunikacija HTTP klijenta i poslu\u017eitelja (cURL, PHP)"},{"location":"demonstrature.html#http-autentifikacija-u-jeziku-php","text":"HTTP Basic autentifikacija koristi base64 enkodirano korisni\u010dko ime i lozinku, naravno mi mo\u017eemo i kriptirati na\u0161e podatke kojim god cipherom \u017eelimo..: vi\u0161e na MMOS kolegiju openssl enc -chiphers Kodiranje base64: echo -n \"encode me\" | openssl enc -base64 ZW5jb2RlIG1lCg== Dekodiranje base64: echo \"ZW5jb2RlIG1lCg==\" | openssl enc -base64 -d Enkripcija AES-256 algoritmom: echo \"korisnik@korisnik.hr\" | openssl enc --aes-256-ctr -a enter AES-256-CTR encryption password: mojTajniPass U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA== Kako \u0107emo napraviti autorizaciju PHP kodom? <?php $request_headers = getallheaders(); if (array_key_exists(\"Authorization\", $request_headers) && $request_headers[\"Authorization\"] == \"U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA==\") { echo \"<p>Tajni podaci NASA USA CIA</p>\\n\"; } else { http_response_code(401); echo \"<p>Ruski hakleru bizi!</p>\\n\"; } Pokrenimo kod i testirajmo: lljubojevic@IdeaPad5-Pro:~/Desktop$ mkdir public lljubojevic@IdeaPad5-Pro:~/Desktop$ mv moj2php.php public/index.php lljubojevic@IdeaPad5-Pro:~/Desktop$ php -S localhost:8000 -t public Uz prave podatke: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -H \"Authorization: U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA==\" http://localhost:8000/ * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > GET / HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Authorization: U2FsdGVkX1/Ur0/Zu2FDjsy0JJOza58AXskxvEViOwEQ2hpVhA== > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:18:34 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>Tajni podaci NASA USA CIA</p> * Closing connection 0 Uz krive podatke: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -H \"Authorization: grinc\" http://localhost:8000/ * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > GET / HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Authorization: grinc > * Mark bundle as not supporting multiuse < HTTP/1.1 401 Unauthorized < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:18:15 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>Ruski hakleru bizi!</p> * Closing connection 0 gaseri - Implementacija autentifikacije RFC 7235 naslovljen Hypertext Transfer Protocol (HTTP/1.1): Authentication definira op\u0107eniti autenfikacijski okvir na na\u010din: Klijent \u0161alje zahtjev za resursom, a poslu\u017eitelj \u0161alje odgovor sa statusnim kodom 401 Unauthorized ... koji sadr\u017ei informacije o tome kako se autentificirati i zaglavlje WWW-Authenticate s najmanje jednim izazovom... Klijent koji se \u017eeli autentificirati s poslu\u017eiteljem \u0107e poslati zahtjev koji sadr\u017ei zaglavlje Authorization s tipom vjerodajnicama autorizacije. Kako to radi u PHP-u? gaseri U jeziku PHP mogu\u0107e je implementirati HTTP autentifikaciju kori\u0161tenjem funkcije header() za slanje HTTP zaglavlja WWW-Authenticate s odgovaraju\u0107om vrijednosti i, kao i ranije, funkcije http_response_code() za postavljanje statusnog koda 401 Unauthorized u odgovoru na zahtjev. Nakon primanja idu\u0107eg zahtjeva koji sadr\u017ei zaglavlje Authorization s odgovaraju\u0107om vrijednosti, u polju $_SERVER su dodane vrijednosti $_SERVER[\"AUTH_TYPE\"], $_SERVER[\"PHP_AUTH_USER\"] i $_SERVER[\"PHP_AUTH_PW\"] koje sadr\u017ee tip autentifikacije, korisni\u010dko ime i zaporku (respektivno). PHP autentifikacija <?php if ($_SERVER[\"PHP_AUTH_USER\"] == 'ilijacvorovic' && $_SERVER[\"PHP_AUTH_PW\"] == 'sokol' ) { $user = $_SERVER[\"PHP_AUTH_USER\"]; $pw = $_SERVER[\"PHP_AUTH_PW\"]; echo \"<p>Halo, ovdje $user...</p>\\n\"; } else { http_response_code(401); header(\"WWW-Authenticate: Basic realm=\\\"Tajni laboratorij Odjela za informatiku\\\"\"); echo \"<p>Moze centrala pogrijesiti jednom ali ne 100 puta!.</p>\\n\"; } Testiranje s ispravnim loginom: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -u ilijacvorovic:sokol http://localhost:8000/* Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) * Server auth using Basic with user 'ilijacvorovic' > GET / HTTP/1.1 > Host: localhost:8000 > Authorization: Basic aWxpamFjdm9yb3ZpYzpzb2tvbA== > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:24:06 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>Halo, ovdje ilijacvorovic...</p> * Closing connection 0 Testiranje s neispravnim loginom: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -u jakovljevic:sokol http://localhost:8000/ * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) * Server auth using Basic with user 'jakovljevic' > GET / HTTP/1.1 > Host: localhost:8000 > Authorization: Basic amFrb3ZsamV2aWM6c29rb2w= > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 401 Unauthorized < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:24:19 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 * Authentication problem. Ignoring this. < WWW-Authenticate: Basic realm=\"Tajni laboratorij Odjela za informatiku\" < Content-type: text/html; charset=UTF-8 < <p>Moze centrala pogrijesiti jednom ali ne 100 puta!.</p> * Closing connection 0","title":"HTTP autentifikacija u jeziku PHP"},{"location":"demonstrature.html#obrada-podataka-zapisanih-u-obliku-javascript-object-notation-json-u-jeziku-php","text":"Kako radi json u PHP-u? <?php $arr1 = [\"moja vrijednost\", 1, 3.5, true]; $arr2 = [\"moj kljuc\" => \"moja vrijednost\", \"broj\" => 8, \"drugi broj\" => 3.5, \"je li istina\" => true]; $arr3 = $arr2; $arr3[\"polje\"] = $arr1; $j3 = json_encode($arr3, JSON_PRETTY_PRINT); echo $j3; Kako dekodirati json u php-u? <?php $j = '{\"firstName\":\"Ivan\",\"lastName\":\"Horvat\",\"isAlive\":true,\"age\":19,\"address\":{\"streetAddress\":\"Radmile Matej\u010di\u0107 2a\",\"city\":\"Rijeka\",\"state\":\"Primorsko-goranska \u017eupanija\",\"postalCode\":\"51000\"},\"jobTitle\":\"junior software engineer\",\"phoneNumbers\":[{\"type\":\"home\",\"number\":\"051/999-999\"},{\"type\":\"office\",\"number\":\"099/999-9999\"}],\"twitterHandle\":\"@IvanNajjaciHorvat\",\"children\":[],\"spouse\":null}'; $person = json_decode($j, true); print_r($person); lljubojevic@IdeaPad5-Pro:~/Desktop/public$ php index.php Array ( [firstName] => Ivan [lastName] => Horvat [isAlive] => 1 [age] => 19 [address] => Array ( [streetAddress] => Radmile Matej\u010di\u0107 2a [city] => Rijeka [state] => Primorsko-goranska \u017eupanija [postalCode] => 51000 ) [jobTitle] => junior software engineer [phoneNumbers] => Array ( [0] => Array ( [type] => home [number] => 051/999-999 ) [1] => Array ( [type] => office [number] => 099/999-9999 ) ) [twitterHandle] => @IvanNajjaciHorvat [children] => Array ( ) [spouse] => ) No, to nije \"\u010ditki\" json.. zato koristimo jq: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ echo '{\"firstName\":\"Ivan\",\"lastName\":\"Horvat\",\"isAlive\":true,\"age\":19,\"address\":{\"streetAddress\":\"Radmile Matej\u010di\u0107 2a\",\"city\":\"Rijeka\",\"state\":\"Primorsko-goranska \u017eupanija\",\"postalCode\":\"51000\"},\"jobTitle\":\"junior software engineer\",\"phoneNumbers\":[{\"type\":\"home\",\"number\":\"051/999-999\"},{\"type\":\"office\",\"number\":\"099/999-9999\"}],\"twitterHandle\":\"@IvanNajjaciHorvat\",\"children\":[],\"spouse\":null}' | jq . { \"firstName\": \"Ivan\", \"lastName\": \"Horvat\", \"isAlive\": true, \"age\": 19, \"address\": { \"streetAddress\": \"Radmile Matej\u010di\u0107 2a\", \"city\": \"Rijeka\", \"state\": \"Primorsko-goranska \u017eupanija\", \"postalCode\": \"51000\" }, \"jobTitle\": \"junior software engineer\", \"phoneNumbers\": [ { \"type\": \"home\", \"number\": \"051/999-999\" }, { \"type\": \"office\", \"number\": \"099/999-9999\" } ], \"twitterHandle\": \"@IvanNajjaciHorvat\", \"children\": [], \"spouse\": null }","title":"Obrada podataka zapisanih u obliku JavaScript Object Notation (JSON) u jeziku PHP"},{"location":"demonstrature.html#http-kolacici-i-php","text":"gaseri HTTP kola\u010di\u0107 (engl. HTTP cookie, Wikipedia, vi\u0161e detalja o kola\u010di\u0107ima na MDN-u) je maleni dio podataka koji korisni\u010dki agent pohranjuje na ra\u010dunalu korisnika kod pregledavanja web sjedi\u0161ta. Na temelju pohranjenih podataka web sjedi\u0161te pamti stanje koje je korisnik stvorio svojim pregledavanjem, npr. predmete dodane u ko\u0161aricu za kupnju, prijavu na zatvoreni dio sjedi\u0161ta upotrebom odre\u0111enog korisni\u010dkog ra\u010duna ili tekst prethodnih pretraga arhive audiovizualnih datoteka. Stvorili smo base64 enkodiranjem neke kola\u010di\u0107e: cGxlbmtp em9raQ== dmxhZG8= ZHpv emVsZW5rbw== emJvZw== dmFz bWkgamU= c2t1cA== cGxpbg== cGEgbmlzYW0= Z2FzZXI= Napravimo PHP kod koji \u0107e pohraniti svakom \"prijavljenom\" korisniku neki enkriptirani ID u kola\u010di\u0107: <?php $file = \"secretCodesOnFBserver.json\"; if (file_exists($file)) { $j = file_get_contents($file); $data = json_decode($j, true); } else { $data = []; } $tokeni = [\"cGxlbmtp\", \"em9raQ==\", \"dmxhZG8=\", \"ZHpv\", \"emVsZW5rbw==\",\"emJvZw==\",\"dmFz\",\"bWkgamU=\",\"c2t1cA==\", \"cGxpbg==\",\"cGEgbmlzYW0=\",\"Z2FzZXI=\"]; if ($_SERVER[\"REQUEST_URI\"] == \"/login\") { if ($_SERVER[\"REQUEST_METHOD\"] == \"GET\") { if (array_key_exists(\"user_id\", $_COOKIE) && array_key_exists($_COOKIE[\"user_id\"], $data)) { $user_id = $_COOKIE[\"user_id\"]; $prev_token = $data[$user_id]; echo \"<p>It is I, \" . $prev_token . \".</p>\\n\"; } else { http_response_code(404); echo \"<p>Hmm.. sneaky? Tor?</p>\\n\"; } } else if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { $token_key = array_rand($tokeni); $tokeni = $tokeni[$token_key]; echo \"<p>You've been Zucced as\" . $tokeni . \".</p>\\n\"; if (array_key_exists(\"user_id\", $_COOKIE) && array_key_exists($_COOKIE[\"user_id\"], $data)) { $user_id = $_COOKIE[\"user_id\"]; $data[$user_id] = $tokeni; } else { $data[] = $tokeni; $user_id = array_key_last($data); setcookie(\"user_id\", $user_id); } } } $j = json_encode($data); file_put_contents($file, $j); Testirajmo metodama POST i GET s dvije prazne, razli\u010dite, datoteke: lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -c cookies.txt -X POST http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > POST /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:50:00 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 * Added cookie user_id=\"0\" for domain localhost, path /, expire 0 < Set-Cookie: user_id=0 < Content-type: text/html; charset=UTF-8 < <p>You've been Zucced asem9raQ==.</p> * Closing connection 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ ls cookies.txt index.php secretCodesOnFBserver.json lljubojevic@IdeaPad5-Pro:~/Desktop/public$ cat cookies.txt # Netscape HTTP Cookie File # https://curl.se/docs/http-cookies.html # This file was generated by libcurl! Edit at your own risk. localhost FALSE / FALSE 0 user_id 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -b cookies.txt http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > GET /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Cookie: user_id=0 > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:50:23 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>It is I, em9raQ==.</p> * Closing connection 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -b cookies.txt -X POST http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > POST /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > Cookie: user_id=0 > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:50:40 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 < Content-type: text/html; charset=UTF-8 < <p>You've been Zucced asbWkgamU=.</p> * Closing connection 0 lljubojevic@IdeaPad5-Pro:~/Desktop/public$ curl -v -c cookies-new.txt -X POST http://localhost:8000/login * Trying 127.0.0.1:8000... * Connected to localhost (127.0.0.1) port 8000 (#0) > POST /login HTTP/1.1 > Host: localhost:8000 > User-Agent: curl/7.81.0 > Accept: */* > * Mark bundle as not supporting multiuse < HTTP/1.1 200 OK < Host: localhost:8000 < Date: Mon, 07 Nov 2022 18:51:32 GMT < Connection: close < X-Powered-By: PHP/8.1.2-1ubuntu2.6 * Added cookie user_id=\"1\" for domain localhost, path /, expire 0 < Set-Cookie: user_id=1 < Content-type: text/html; charset=UTF-8 < <p>You've been Zucced asZHpv.</p> * Closing connection 0","title":"HTTP Kola\u010di\u0107i i PHP"},{"location":"demonstrature.html#podmreze","text":"TODO","title":"Podmre\u017ee"},{"location":"demonstrature.html#prevoenje-mreznih-adresa-nat","text":"Ako promotrite ovaj simboli\u010dni prikaz \"arhitekture\" interneta.. sigurno si postavljate pitanje kako je mogu\u0107e da dvije podmre\u017ee na svijetu imaju istu IP adresu. To se kosi s onim \u0161to ste do sada nau\u010dili. Odgovor na to pitanje je ne\u0161to \u0161to se naziva NAT (Network Address Translation). Network Address Translation (NAT) is a service that enables private IP networks to use the internet and cloud. NAT translates private IP addresses in an internal network to a public IP address before packets are sent to an external network. Kako NAT radi? Network Address Translation (NAT) is a service that operates on a router or edge platform to connect private networks to public networks like the internet. NAT is often implemented at the WAN edge router to enable internet access in core, campus, branch, and colocation sites. With NAT, an organization needs one IP address or one limited public IP address to represent an entire group of devices as they connect outside their network. Port Address Translation (PAT) enables one single IP to be shared by multiple hosts using IP and port address translation. Vrste NAT-a: Stati\u010dki NAT > Static NAT is a private IP address that is a single unregistered IP that is mapped with a legal Public IP address. Here one to one mapping is made within local and global address which is generally applied for web hosting. Dinami\u010dki NAT > Dynamic NAT is an unregistered IP address that is private is changed to a registered public address from a group of the public IP address. If the IP address group is occupied, then the packets are transmitted with a fixed number of the private IP address that can be transmitted to the public address PAT (Port Address Translation) > Port Address Translation is called NAT overload, where many private IP addresses can be transmitted into unit registered IP addresses. The port numbers are applied to differentiate the traffic flow that belongs to an individual IP address. This is frequently used as a cost-saving method since thousands of servers can be connected to the internet by one real global public IP address. Za\u0161to se NAT koristi? \u0160tedi IP adrese \u010cuva pouzdanost i fleksibilnost Interneta NAT ima posebne metode adresiranja mre\u017ee Dodaje razinu sigurnosti na mre\u017eu jer se ure\u0111ajima ne mo\u017ee direktno pristupiti A \u0161to je onda CGNAT? CGNAT is a network address translation technique that extends the IPv4 networks on a considerable scale and allows ISPs (internet service providers) to conserve their acquired IPv4 pool. Every online user has two IP addresses, a public and a private one. When a user intends to communicate online, the standard NAT protocol translates their private IPv4 address to a public one. But with CGNAT (LSN or NAT 444), an extra layer of address translation is added. The unique private IP addresses are translated into public IPs shared by multiple users. And this is how ISPs prevent their IPv4 pool from exhaustion. Prikaz IPv4 NAT pravila na sustavu: lljubojevic@IdeaPad-5-Pro:~$ sudo iptables -t nat -L -n -v [sudo] password for lljubojevic: Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain INPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination NAT tablica preslikavanja: Za\u0161to nam je tu bitan iptables: iptables - gaseri iptables example Definiranje NAT-a na ruteru: Uvijek uzmite su\u010delje na van (za POSTROUTING) iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE Kako to napraviti kada \u017eelimo omogu\u0107iti pristup nekom \u010dvoru iz vanjske mre\u017ee: Na vanjskom ruteru radimo PREROUTING (na unutra) za sve TCP pakete koji dolaze na port 2223 s odredi\u0161ta (vanjsko su\u010delje rutera) na odredi\u0161te u na\u0161oj mre\u017ei IP:2223 iptables -t nat -A PREROUTING -p tcp --dport 2223 -d 10.72.0.1 -j DNAT --to-destination 192.168.6.21:2223 A kako napraviti pristup svim vratima putem vanjske adrese rutera? Na vanjskom ruteru (rubnom u podmre\u017ei) radimo POSTROUTING (na van) svega \u0161to dolazi s rutera na neki \u010dvor iptables -t nat -A POSTROUTING -o eth0 -j SNAT -s 10.72.0.1 --to-source 192.168.6.22 Vatrozid Vatrozid u op\u0107enitom smislu podrazumijeva ure\u0111aj koji nadzire, te na temelju zadanih pravila, propu\u0161ta ili odbacuje mre\u017eni promet Vatrozid promet filtrira na vi\u0161e slojeva, ovisno o namjeni i potrebi (linkto: tcp/ip stack). Naj\u010de\u0161\u0107e se promet filtrira na IP i transportnom (TCP, UDP ...) sloju, me\u0111utim mogu\u0107e je definirati pravila filtriranja i za ni\u017ei \u2013 sloj podatkovne poveznice (Ethernet ...) i za vi\u0161i \u2013 aplikacijski sloj (HTTP, SMTP ...). Slo\u017eenost samog filtriranja ovisi o sloju filtriranja, pa tako filtriranje na vi\u0161im slojevima omogu\u0107uje \u201epametnije\u201c filtriranje (vi\u0161i slojevi sadr\u017ee vi\u0161e meta-podataka koji omogu\u0107uju selektivnije filtriranje), dok je s druge strane postupak filtriranja na ni\u017eim slojevima br\u017ei. Detalji na gaserima iptables [-t table] {-A|-C|-D} chain rule-specification Na primjer ako \u017eelimo postaviti vatrozid t.d. s nekih mre\u017ea mo\u017eemo pristupati nekim vratima, a s ostalih ne mo\u017eemo kao u zadatku: Postavite iptables na n1, n2 tako da n5, n6, n7 mogu na n17, n18, n19 pristupati samo vratima 8080, 80 i 8443, a da je pristup ostalim vratima zabranjen. Koristit \u0107emo slijede\u0107e naredbe: n1: iptables -A INPUT -p tcp -s 172.22.0.2/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.0.2/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.0.2/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT n2: iptables -A INPUT -p tcp -s 172.22.1.20/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.21/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.22/24 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.20/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.21/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.22/24 --dport 8080 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.20/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.21/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT iptables -A INPUT -p tcp -s 172.22.1.22/24 --dport 8443 -m state --state NEW,ESTABLISHED -j ACCEPT","title":"Prevo\u0111enje mre\u017enih adresa - NAT"},{"location":"notes.html","text":"Useful notes for Linux","title":"About notes"},{"location":"notes.html#useful-notes-for-linux","text":"","title":"Useful notes for Linux"},{"location":"notes/displ.html","text":"Fix multi-monitor problems on laptops with Intel and NVIDIA GPUs OS and Hardware for testing HP Omen an-113nm 2019. Intel UHD 630 and NVIDIA GeForce GTX 1050 Three screens with connections: Type-C -> DP (Intel output), HDMI - HDMI (NVIDIA output), miniDP - DP (NVIDIA outpu) Archlinux GUI OS KDE Plasma Desktop environment Preparations Update BIOS/UEFI to latest version Update the OS: sudo pacman -Syyu Download all the dependencies for optimus-manager package: sudo pacman -S mesa-utils python-dbus python-setuptools python xorg-xrandr git acpi_call bbswitch xf86-video-intel extra-cmake-modules nvidia qt5-base qt5-svg qt5-x11extras qt5-tools Installing optimus-manager Clone optimus-manager git repo git clone https://aur.archlinux.org/optimus-manager.git Build the source makepkg -si Reboot the system sudo reboot now Check the status of systemd unit optimus-manager: [lljubojevic@Omen17 ~]$ sudo systemctl status optimus-manager.service \u25cf optimus-manager.service - Optimus Manager Commands Daemon Loaded: loaded (/usr/lib/systemd/system/optimus-manager.service; enabled; preset: disabled) Active: active (running) since Mon 2022-10-03 16:54:59 CEST; 39min ago Process: 434 ExecStartPre=/usr/bin/python3 -u -m optimus_manager.hooks.pre_daemon_start (code=exited, status=0/SUCCESS) Process: 505 ExecStartPre=/usr/bin/python3 -u -m optimus_manager.hooks.pre_xorg_start (code=exited, status=0/SUCCESS) Main PID: 891 (python3) Tasks: 1 (limit: 38278) Memory: 29.3M CPU: 3.668s CGroup: /system.slice/optimus-manager.service \u2514\u2500891 /usr/bin/python3 -u -m optimus_manager.daemon If your system used bumblebee for GPU switching, DISABLE IT sudo systemctl disable bumblebeed.service Editing optimus-manager config files: In file /etc/default/grub load kernel parameter for hybrid screen management (both cards on): GRUB_CMDLINE_LINUX=\"optimus-manager.startup=hybrid\" Generate new GRUB config: sudo grub-mkconfig Create optimus-manager config file /etc/optimus-manager/optimus-manager.conf as follows: [optimus] startup_mode=hybrid startup_auto_battery_mode=hybrid startup_auto_extpower_mode=hybrid In SDDM config file /etc/sddm.conf place # characters in front of the lines starting with DisplayCommand and DisplayStopCommand Disable KDE screen manager: Settings - Startup - Background services - kscreen Remove KDE screen manager: sudo pacman -R kscreen Use xrandr to find out your display connection names: [lljubojevic@Omen17 ~]$ xrandr --listmonitors Monitors: 3 0: +*DP-1 1920/698x1080/393+1920+0 DP-1 1: +DP-1-1 1920/598x1080/336+0+0 DP-1-1 2: +HDMI-1-0 1920/527x1080/296+3840+0 HDMI-1-0 Create a BASH script in home directory /home/YOU/Displays.sh which will automatically set your prefered screen setup, use the following example and modify it: #!/bin/bash xrandr --output eDP-1 --auto --off xrandr --output DP-1 --primary xrandr --output DP-1-1 --auto --left-of DP-1 xrandr --output HDMI-1-0 --auto --right-of DP-1 Create a systemd unit on path /etc/systemd/user/display.service that will start the script with content: [Unit] Description=Set xrandr [Service] Type=simple TimeoutStartSec=0 ExecStartPre=/bin/sleep 60 ExecStart=/home/lljubojevic/Display.sh [Install] WantedBy=default.target Reload the process daemon sudo systemctl daemon-reload Enable unit start as a user: sudo systemctl --user enable display.service Reboot sudo reboot now","title":"Fix display glitches with switchable graphics"},{"location":"notes/displ.html#fix-multi-monitor-problems-on-laptops-with-intel-and-nvidia-gpus","text":"","title":"Fix multi-monitor problems on laptops with Intel and NVIDIA GPUs"},{"location":"notes/displ.html#os-and-hardware-for-testing","text":"HP Omen an-113nm 2019. Intel UHD 630 and NVIDIA GeForce GTX 1050 Three screens with connections: Type-C -> DP (Intel output), HDMI - HDMI (NVIDIA output), miniDP - DP (NVIDIA outpu) Archlinux GUI OS KDE Plasma Desktop environment","title":"OS and Hardware for testing"},{"location":"notes/displ.html#preparations","text":"Update BIOS/UEFI to latest version Update the OS: sudo pacman -Syyu Download all the dependencies for optimus-manager package: sudo pacman -S mesa-utils python-dbus python-setuptools python xorg-xrandr git acpi_call bbswitch xf86-video-intel extra-cmake-modules nvidia qt5-base qt5-svg qt5-x11extras qt5-tools","title":"Preparations"},{"location":"notes/displ.html#installing-optimus-manager","text":"Clone optimus-manager git repo git clone https://aur.archlinux.org/optimus-manager.git Build the source makepkg -si Reboot the system sudo reboot now Check the status of systemd unit optimus-manager: [lljubojevic@Omen17 ~]$ sudo systemctl status optimus-manager.service \u25cf optimus-manager.service - Optimus Manager Commands Daemon Loaded: loaded (/usr/lib/systemd/system/optimus-manager.service; enabled; preset: disabled) Active: active (running) since Mon 2022-10-03 16:54:59 CEST; 39min ago Process: 434 ExecStartPre=/usr/bin/python3 -u -m optimus_manager.hooks.pre_daemon_start (code=exited, status=0/SUCCESS) Process: 505 ExecStartPre=/usr/bin/python3 -u -m optimus_manager.hooks.pre_xorg_start (code=exited, status=0/SUCCESS) Main PID: 891 (python3) Tasks: 1 (limit: 38278) Memory: 29.3M CPU: 3.668s CGroup: /system.slice/optimus-manager.service \u2514\u2500891 /usr/bin/python3 -u -m optimus_manager.daemon If your system used bumblebee for GPU switching, DISABLE IT sudo systemctl disable bumblebeed.service","title":"Installing optimus-manager"},{"location":"notes/displ.html#editing-optimus-manager-config-files","text":"In file /etc/default/grub load kernel parameter for hybrid screen management (both cards on): GRUB_CMDLINE_LINUX=\"optimus-manager.startup=hybrid\" Generate new GRUB config: sudo grub-mkconfig Create optimus-manager config file /etc/optimus-manager/optimus-manager.conf as follows: [optimus] startup_mode=hybrid startup_auto_battery_mode=hybrid startup_auto_extpower_mode=hybrid In SDDM config file /etc/sddm.conf place # characters in front of the lines starting with DisplayCommand and DisplayStopCommand Disable KDE screen manager: Settings - Startup - Background services - kscreen Remove KDE screen manager: sudo pacman -R kscreen Use xrandr to find out your display connection names: [lljubojevic@Omen17 ~]$ xrandr --listmonitors Monitors: 3 0: +*DP-1 1920/698x1080/393+1920+0 DP-1 1: +DP-1-1 1920/598x1080/336+0+0 DP-1-1 2: +HDMI-1-0 1920/527x1080/296+3840+0 HDMI-1-0 Create a BASH script in home directory /home/YOU/Displays.sh which will automatically set your prefered screen setup, use the following example and modify it: #!/bin/bash xrandr --output eDP-1 --auto --off xrandr --output DP-1 --primary xrandr --output DP-1-1 --auto --left-of DP-1 xrandr --output HDMI-1-0 --auto --right-of DP-1 Create a systemd unit on path /etc/systemd/user/display.service that will start the script with content: [Unit] Description=Set xrandr [Service] Type=simple TimeoutStartSec=0 ExecStartPre=/bin/sleep 60 ExecStart=/home/lljubojevic/Display.sh [Install] WantedBy=default.target Reload the process daemon sudo systemctl daemon-reload Enable unit start as a user: sudo systemctl --user enable display.service Reboot sudo reboot now","title":"Editing optimus-manager config files:"},{"location":"notes/manage.html","text":"Managing Computer Systems Literature Essential System administration O'Reilly,2002 - Frisch, Ae. Unix and Linux system administration handbook - Nemeth, E. Addison 2017 Dole\u017eelov\u00e1, M., Muehlfeld, M., Svistunov, M., Wadeley, S., \u010capek, T., Hrad\u00edlek, J., Silas, D., Heves, J., Kov\u00e1\u0159, P., Ondrejka, P., Boko\u010d, P., Prpi\u010d, M., Slobodov\u00e1, E., Kopalov\u00e1, E., Svoboda, M., O'Brien, D., Hideo, M., Domingo, D. & Ha, J. System administrator's guide. (Red Hat, 2018) Aoki, O. Debian reference. (Debian, 2018). The FreeBSD documentation project. FreeBSD handbook. (FreeBSD, 2018.) How Linux Works, 3rd Edition: What Every Superuser Should Know 3rd Edition, Brian Ward How to properly document software? How to properly document systems? MkDocs - Markdown or VS Code with markdownlint extension .markdownlint.json example: { \"MD007\" : { \"indent\": 4 }, \"MD014\" : false } MD document example e-Mail server is configured on IP: 10.27.45.11. print(\"hello\") URL's and lists: + [www.miletic.net](https://www.miletic.net/) ili <https://www.miletic.net> + a + b + a + b 1. third 1. one more Code: ls Graph (Graphviz): a -> b; Quoting: Registering and Subscribing Your System Register your system: ~]# subscription-manager register The command will prompt you to enter your Red Hat Customer Portal user name and password. Determine the pool ID of a subscription that you require: ~]# subscription-manager list --available This command displays all available subscriptions for your Red Hat account. For every subscription, various characteristics are displayed, including the pool ID. Attach the appropriate subscription to your system by replacing pool_id with the pool ID determined in the previous step: ~]# subscription-manager attach --pool=pool_id For more information on registration of your system and attachment of the Red Hat Content Delivery Network subscriptions, see Chapter 7, Registering the System and Managing Subscriptions. source Single quotes about everything that appears on the screen! MD can be versioned on GitHub! Good practice for System Administrators is to use Password Managers e.g. KeepassXC while ensuring that the password length is 12 or more different characters (or let the Password Manager auto generate the password). Graph VS Code extension: Graphviz Markdown Preview v0.0.8 or Mermaid Cloud-config ArchLinux VM Img Cloud-init ready SSH QEMU Cloud-Init Cloud-config for a virtual machine What is a virtual machine? According to vmware documentation: A\u202fVirtual Machine (VM) is a compute resource that uses software instead of a physical computer to run programs and deploy apps. One or more virtual \u201cguest\u201d machines run on a physical \u201chost\u201d machine. According to Wikipedia: Virtual machine (VM) is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination. How to create and setup a virtual machine? 1. Generate SSH key: ssh-keygen -t rsa -b 4096 ssh-keygen -t dsa ssh-keygen -t ecdsa -b 521 2. Create user-data and meta-data files: Basic user-data with SSH key authentication: #cloud-config users: - name: fidit ssh_authorized_keys: - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZWfY7BinoB43gEXhlyvd97Yo9tKHpmx/+J0dkdyVSgX3fFlmMBpfulc7WsZ7tw3BOCgFPVHlX7awGylDmff3HE2+CntQuV0vwhqJ28yRu3LvxPm6Q4wbk+lNBO7qOg8wDroE0z0ikNg+DgqqJLXhPxX0R1lawZ0Vf+cL+M56roCMZl0CZy7TuZFcBCpEb/F5ipGQehVQVuixkA7G45+R5i7x8rZbi7wztS7oYzsgNKO/z66w4xVujLf2eMaIYEL2p7/CGc3U+nNULEUTwdJ6NsBmb2lv5HfRPrmmvIxJTSNMBEdVd2fhikFkfpzGyuKwy7p8iNRkQICURC+qEOEi4HYZvYtLsSeee0GQ5P0jTMp2Ya5vVhrz0fVn4byW8esOob7eiUX3E75iwtzUUmNLN8cuCZOhSTUlcqqJMYA701CJegWNDQw0f7lKvtvwFcuscK0+g80x8rXTngiLNTCXwVAFgSoRtI7RlQJcMOo9Z91P/NT3adC6I2G4Btmgoe+0= korisnik@ODJ-O365-117 Basic user-data with SSH key authentication for root and specific user: #cloud-config users: - name: myuser ssh_authorized_keys: - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZWfY7BinoB43gEXhlyvd97Yo9tKHpmx/+J0dkdyVSgX3fFlmMBpfulc7WsZ7tw3BOCgFPVHlX7awGylDmff3HE2+CntQuV0vwhqJ28yRu3LvxPm6Q4wbk+lNBO7qOg8wDroE0z0ikNg+DgqqJLXhPxX0R1lawZ0Vf+cL+M56roCMZl0CZy7TuZFcBCpEb/F5ipGQehVQVuixkA7G45+R5i7x8rZbi7wztS7oYzsgNKO/z66w4xVujLf2eMaIYEL2p7/CGc3U+nNULEUTwdJ6NsBmb2lv5HfRPrmmvIxJTSNMBEdVd2fhikFkfpzGyuKwy7p8iNRkQICURC+qEOEi4HYZvYtLsSeee0GQ5P0jTMp2Ya5vVhrz0fVn4byW8esOob7eiUX3E75iwtzUUmNLN8cuCZOhSTUlcqqJMYA701CJegWNDQw0f7lKvtvwFcuscK0+g80x8rXTngiLNTCXwVAFgSoRtI7RlQJcMOo9Z91P/NT3adC6I2G4Btmgoe+0= korisnik@ODJ-O365-117 - name: root ssh_authorized_keys: - ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAA5J/SRFcYnps9vCQQwnsXquEeKt9R7/7Ab6YovEoU5nE1vUSFHXoBNPhIXKOJU8G2pGi9nMFS27z9B7+oyLPTQhwFFbUOoG+/jTrc4CHy+b2rdx7x1CbR4fQSsgC/t0g+z05o9jar/t0Lea6/6hIAM2uGh+KGiKzGT/aug2VBU3SvcbQ== korisnik@ODJ-O365-117 What else can you do with cloud-config? 3. Generate cloud-init.iso: xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data 4. Create a virtual machine: 4.1. Expand ArchLinux disk image if you need more space: qemu-img resize aarch.qcow2 +10G 4.2. Create a virtual machine qemu-system-x86_64 -m 512M aarch.qcow2 -cdrom cloud-init.iso -nic user,hostfwd=tcp::60022-:22 4.3. Add port for acessing the virtual machine from host PC: ssh-keygen -f \"/home/korisnik/.ssh/known_hosts\" -R \"[localhost]:60022\" 5. Connect to the virtual machine: ssh -v -p 60022 fidit@localhost ssh -v -p 60022 root@localhost Some basic networking tasks after setting up a virtual machine or server enviroment Check network connection Find your network interface name [test@test-PC ~]$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp7s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether e0:d5:5e:44:69:77 brd ff:ff:ff:ff:ff:ff inet 192.168.0.17/24 brd 192.168.0.255 scope global dynamic enp7s0 valid_lft 2613sec preferred_lft 2613sec inet6 2a05:4f44:111c:8900::18/128 scope global dynamic noprefixroute valid_lft 410132sec preferred_lft 341012sec inet6 2a05:4f44:111c:8900:50bd:bfcb:7176:40fb/64 scope global dynamic noprefixroute valid_lft 414713sec preferred_lft 345593sec inet6 2a05:4f44:111c:8900:e2d5:5eff:fe44:6977/64 scope global dynamic mngtmpaddr noprefixroute valid_lft 414711sec preferred_lft 345591sec inet6 fe80::645f:28c4:cfb8:75e3/64 scope link noprefixroute valid_lft forever preferred_lft forever Network interfaces are listed by numbers 1:, 2:, 3:, etc. In a virtual machine it's named mostly eth0 In a PC it's named mostly enpXsY View network interface status and data about the network connection [lljubojevic@Ljubojevic-PC ~]$ networkctl status enp7s0 \u25cf 2: enp7s0 Link File: /usr/lib/systemd/network/99-default.link Network File: /etc/systemd/network/20-ethernet.network Type: ether State: routable (configured) Online state: online Path: pci-0000:07:00.0 Driver: r8169 Vendor: Realtek Semiconductor Co., Ltd. Model: RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (Onboard Ethernet) Hardware Address: XYZ MTU: 1500 (min: 68, max: 9194) QDisc: fq_codel IPv6 Address Generation Mode: none Queue Length (Tx/Rx): 1/1 Auto negotiation: yes Speed: 1Gbps Duplex: full Port: tp Address: XYZ Gateway: XYZ DNS: XYZ ... Hostnamectl According to Linuxhint : The hostname is an identity of the system and is used by the networks to search the system. The \u201chostnamectl\u201d is a Linux command that is used to set the hostname in the terminal without even opening and editing in the etc/hostname file of a system. Using the \u201chostnamectl\u201d command, the user can edit the static, pretty, and transient hostname as well. Output of hostnamectl: [test@test-PC ~]$ hostnamectl Static hostname: test-PC Icon name: computer-desktop Chassis: desktop \ud83d\udda5 Machine ID: 801cb2df0c5647d1835be225e0073015 Boot ID: 4fe8134f95d041af8dc53ab247179c28 Operating System: Arch Linux Kernel: Linux 5.17.4-arch1-1 Architecture: x86-64 Hardware Vendor: Gigabyte Technology Co., Ltd. Hardware Model: Z370P D3 Hostnamectl displays: Computer name (hostname) Icon name is the machine identifying name according to XDG Icon Naming Specification. What type of system it is? (Desktop, laptop, workstation etc.) Machine and Boot ID, OS and Kernel version CPU Architecture Motherboard vendor and model Deployment is the enviroment in which is the system used e.g. \"development\", \"integration\", \"staging\", \"production\"... Location - useful when managing multiple servers/VM's It can be used for setting up: Hostname: [root@archlinux ~]# hostnamectl set-hostname myServer1 [root@archlinux ~]# hostnamectl hostname myServer1 Icon-name [root@archlinux ~]# hostnamectl set-icon-name computer [root@archlinux ~]# hostnamectl icon-name computer [root@archlinux ~]# hostnamectl set-icon-name workstation [root@archlinux ~]# hostnamectl icon-name workstation [root@archlinux ~]# hostnamectl set-icon-name chassis-laptop [root@archlinux ~]# hostnamectl icon-name chassis-laptop [root@archlinux ~]# hostnamectl set-icon-name chassis-watch [root@archlinux ~]# hostnamectl icon-name chassis-watch [root@archlinux ~]# hostnamectl set-icon-name embedded [root@archlinux ~]# hostnamectl icon-name embedded Deployment [root@archlinux ~]# hostnamectl deployment staging [root@archlinux ~]# hostnamectl deployment staging Location [root@archlinux ~]# hostnamectl location \"Berlin, room 7, rack 6\" End result? [root@archlinux ~]# hostnamectl Static hostname: myServer1 Icon name: embedded Chassis: vm \ud83d\uddb4 Deployment: staging Location: Berlin, room 7, rack 6 Machine ID: 168fc71dc2b143fab51a45ad7b066d1b Boot ID: 5dd62398ce6a4a859179e8f2b25911bf Virtualization: qemu Operating System: Arch Linux Kernel: Linux 5.16.13-arch1-1 Architecture: x86-64 Hardware Vendor: QEMU Hardware Model: Standard PC _i440FX + PIIX, 1996_ more at DNS Settings? resolvectl may be used to resolve domain names, IPv4 and IPv6 addresses, DNS resource records and services with the systemd-resolved.service(8) resolver service. By default, the specified list of parameters will be resolved as hostnames, retrieving their IPv4 and IPv6 addresses. If the parameters specified are formatted as IPv4 or IPv6 operation the reverse operation is done, and a hostname is retrieved for the specified addresses. Use resolvectl command to edit those settings, e.g.: [test@test-PC ~]$ resolvectl help resolvectl [OPTIONS...] COMMAND ... Send control commands to the network name resolution manager, or resolve domain names, IPv4 and IPv6 addresses, DNS records, and services. Commands: query HOSTNAME|ADDRESS... Resolve domain names, IPv4 and IPv6 addresses service [[NAME] TYPE] DOMAIN Resolve service (SRV) openpgp EMAIL@DOMAIN... Query OpenPGP public key tlsa DOMAIN[:PORT]... Query TLS public key status [LINK...] Show link and server status statistics Show resolver statistics reset-statistics Reset resolver statistics flush-caches Flush all local DNS caches reset-server-features Forget learnt DNS server feature levels dns [LINK [SERVER...]] Get/set per-interface DNS server address domain [LINK [DOMAIN...]] Get/set per-interface search domain default-route [LINK [BOOL]] Get/set per-interface default route flag llmnr [LINK [MODE]] Get/set per-interface LLMNR mode mdns [LINK [MODE]] Get/set per-interface MulticastDNS mode dnsovertls [LINK [MODE]] Get/set per-interface DNS-over-TLS mode dnssec [LINK [MODE]] Get/set per-interface DNSSEC mode nta [LINK [DOMAIN...]] Get/set per-interface DNSSEC NTA revert LINK Revert per-interface configuration log-level [LEVEL] Get/set logging threshold for systemd-resolved ... Regional settings Some services that run on servers depend on time zone settings to work correctly. It's important, when planing the virtual or server environment to set it up properly. localectl : localectl - Control the system locale and keyboard layout settings Full list of commands How to set it up? Check current regional settings [test@test-PC ~]$ localectl status System Locale: LANG=hr_HR.UTF-8 VC Keymap: croat X11 Layout: hr List avaliable locales and keymaps - keyboard layouts [test@test-PC ~]$ localectl list-locales en_US.UTF-8 hr_HR.UTF-8 [test@test-PC ~]$ localectl list-keymaps ANSI-dvorak adnw amiga-de amiga-us apple-a1048-sv apple-a1243-sv apple-a1243-sv-fn-reverse apple-internal-0x0253-sv apple-internal-0x0253-sv-fn-reverse applkey atari-de atari-se ... Set the needed locale configuration [test@test-PC ~]$ localectl set-locale hr_HR.UTF-8 [test@test-PC ~]$ localectl set-x11-keymap hr [test@test-PC ~]$ setxkbmap hr Generate the locale config file [test@test-PC ~]$ locale-gen What about timezone? Use timedatectl command to set it: timedatectl set-timezone Europe/Zagreb Also note, Regional setting can be defined in cloud-init configuration files. Managing users and permissions Let's try managing users in a VM created using GUI tool -> virt-manager. Requirements: Virt-manager and ArchLinux VM Cloud-init: user data: #cloud-config users: - default system_info: default_user: name: myuser plain_text_passwd: '1234' gecos: arch Cloud User groups: [wheel, adm] sudo: [\"ALL=(ALL) NOPASSWD:ALL\"] shell: /bin/bash lock_passwd: False Note: Cloud-init is sensitive with tab spaces and requires a empty line at the end of file Make cloud-init.iso file: xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data Copy downloaded Arch system image (qcow2) in home directory and rename it to aarch.qcow2 Add more space to image: qemu-img resize aarch.qcow2 +10G Then in virt-manager: Use existing image -> aarch.qcow2 -> archlinux -> 1GB/2 cores -> Customize configuration before install -> Add cloud-init.iso and make it a CDROM type Then start ArchLinx VM and login with SSH from terminal on host to it: ssh myuser@IPadressOfVM Be careful when configuring users -> detect which user has permissions and what permissions does he have. ! in /etc/shadow file mean that the user is forbiden to login into the system User has permission to access ports from 1024, system uses ports to 1024. kvm group in etc/groups exists for using nested virtualization /dev/vd* - Linux way of mapping path to hard drives -> user dosen't have acess to disk, but has to filesystem! Working with users: In Unix-like operating systems, the chmod command sets the permissions of files or directories. Syntax: chmod ugo -rwx Where: ugo specifies a user, group of users or others -rwx specifies allowed operations: read, write, execute On Unix-like operating systems, the chown command changes ownership of files and directories in a filesystem. Syntax: chown parameters user Removing ownership: [myuser@archlinux ~]$ chmod -R go-r ftp ftp/ [myuser@archlinux ~]$ chmod -R go-- ftp ftp/ Where: go-r removes reading permissions go-- removes all permisions On Unix-like operating systems, the usermod command modifies a user account. Syntax: [myuser@archlinux ~]$ sudo usermod -aG video myuser Adds user \"myuser\" to group \"video\" [myuser@archlinux ~]$ grep video /etc/group video:x:985:myuser On Unix-like operating systems, the useradd command creates a new user or sets the default information for new users. Syntax: useradd user -c \"Basic User\" -s /bin/bash -m Where \"Basic User\" is description of the user, -s which shell will he use, -m creates a home directory for him. To add password for user \"user\" use: passwd user To block user loging into the system use: usermod -s /bin/false user /bin/false does nothing and it just exits with a status code indicating failure when a user attempts to login to the machine. To view all devices attached to system use: ls -la /dev To view all users in the system use: [test@test-PC ~]$ userdbctl NAME DISPOSITION UID GID REALNAME HOME SHELL root intrinsic 0 0 - /root /usr/bin/zsh nobody intrinsic 65534 65534 Nobody / /usr/bin/nologin bin system 1 1 - / /usr/bin/nologin daemon system 2 2 - / /usr/bin/nologin mail system 8 12 - /var/spool/mail /usr/bin/nologin ftp system 14 11 - /srv/ftp /usr/bin/nologin rpc system 32 32 Rpcbind Daemon /var/lib/rpcbind /usr/bin/nologin http system 33 33 - /srv/http /usr/bin/nologin named system 40 40 BIND DNS Server / /usr/bin/nologin uuidd system 68 68 - / /usr/bin/nologin dbus system 81 81 System Message Bus / /usr/bin/nologin polkitd system 102 102 PolicyKit daemon / /usr/bin/nologin partimag system 110 110 Partimage user / /usr/bin/nologin rtkit system 133 133 RealtimeKit /proc /usr/bin/nologin usbmux system 140 140 usbmux user / /usr/bin/nologin nvidia-persistenced system 143 143 NVIDIA Persistence Daemon / /usr/bin/nologin cups system 209 209 cups helper user / /usr/bin/nologin saned system 962 962 SANE daemon user / /usr/bin/nologin libvirt-qemu system 964 964 Libvirt QEMU user / /usr/bin/nologin sddm system 968 968 Simple Desktop Display Manager /var/lib/sddm /usr/bin/nologin openvpn system 969 969 OpenVPN / /usr/bin/nologin nbd system 970 970 Network Block Device /var/empty /usr/bin/nologin git system 971 971 git daemon user / /usr/bin/git-shell dnsmasq system 972 972 dnsmasq daemon / /usr/bin/nologin dhcpcd system 973 973 dhcpcd privilege separation / /usr/bin/nologin avahi system 974 974 Avahi mDNS/DNS-SD daemon / /usr/bin/nologin tss system 975 975 tss user for tpm2 / /usr/bin/nologin systemd-timesync system 976 976 systemd Time Synchronization / /usr/bin/nologin systemd-resolve system 977 977 systemd Resolver / /usr/bin/nologin systemd-journal-remote system 978 978 systemd Journal Remote / /usr/bin/nologin systemd-oom system 979 979 systemd Userspace OOM Killer / /usr/bin/nologin systemd-network system 980 980 systemd Network Management / /usr/bin/nologin systemd-coredump system 981 981 systemd Core Dumper / /usr/bin/nologin test regular 1000 1000 Test /home/test /bin/bash To kill all processes for a user session and deallocate the resources use: loginctl kill-user user For those who want to know more: Users interact with the system using GUI or by terminal interface. Here you can find out more about terminal devices avaliable to users. More simultaneous users with keyboards and screens on one PC? No problem! Multi-seat . Systemd Quoting materials given for homework from doc. dr. Vedran Mileti\u0107 @ UniRi - Faculty of Informatics and Digital Technologies modern operating systems based on Linux kernel use systemd for managing processes, specifically starting services on system startup. Systemd ecosystem A set of programs called systemd actually contains a number of interconnected and somewhat independent tools, the most important of which are: systemd init process, it is the first process to run the Linux kernel after loading and it is in charge of starting and managing the life of other processes systemd services, which are files for defining requests, sequences and instructions for running other processes required for system operation systemctl tool, for viewing and managing defined service states *journalctl tool, to view system events and service-related events Service: A unit configuration file whose name ends in .service encodes information about a process controlled and supervised by systemd. Target: A unit configuration file whose name ends in \".target\" encodes information about a target unit of systemd, which is used for grouping units and as well-known synchronization points during start-up. These both refer to unit configuration files, which are: A unit configuration file encodes information about a service, a socket, a device, a mount point, an automount point, a swap file or partition, a start-up target, a watched file system path, a timer controlled and supervised by systemd(1), a resource management slice or a group of externally created processes. Systemd unit is a configuration file used to implement startup services and goals: services that run daemon processes are defined by * .service files, startup targets are defined by * .target files. How services work? Pipeline A pipe is a form of redirection (transfer of standard output to some other destination) that is used in Linux and other Unix-like operating systems to send the output of one command/program/process to another command/program/process for further processing. Pipe is used to combine two or more commands, and in this, the output of one command acts as input to another command, and this command\u2019s output may act as input to the next command and so on. It can also be visualized as a temporary connection between two or more commands/ programs/ processes. The command line programs that do the further processing are referred to as filters. This direct connection between commands/ programs/ processes allows them to operate simultaneously and permits data to be transferred between them continuously rather than having to pass it through temporary text files or through the display screen. Every service, process, program is connected to a service bus. User service bus: [root@archlinux ~]# stat /run/user/0/bus File: /run/user/0/bus Size: 0 Blocks: 0 IO Block: 4096 socket Device: 0,48 Inode: 16 Links: 1 Access: (0666/srw-rw-rw-) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2022-03-11 14:13:08.986285110 +0000 Modify: 2022-03-11 14:13:08.986285110 +0000 Change: 2022-03-11 14:13:08.986285110 +0000 Birth: - To list all bus connections viewed by process and the user who started it use: [test@test-PC ~]$ busctl NAME PID PROCESS USER CONNECTION UNIT > :1.0 481 systemd-resolve systemd-resolve :1.0 systemd-resolved.> :1.1 472 systemd-network systemd-network :1.1 systemd-networkd.> :1.11 635 sddm root :1.11 sddm.service > :1.118 3444 sudo root :1.118 user@1000.service> :1.119 3448 busctl root :1.119 user@1000.service> :1.12 647 Xorg root :1.12 sddm.service > :1.16 803 systemd test :1.16 user@1000.service> :1.18 855 kded5 test :1.18 session-1.scope > :1.19 858 kwin_x11 test :1.19 session-1.scope > :1.2 1 systemd root :1.2 init.scope > :1.20 896 polkitd polkitd :1.20 polkit.service > :1.21 890 ksmserver test :1.21 session-1.scope > ... Busctl - active mutual communication of processes locally, where they are connected, etc. [Any]ctl - bus in which a SERVICE communicate with a SERVICEd (daemon) machinectl is \"systemd's docker\" coredumpctl - coredumpctl is a tool that can be used to retrieve and process core dumps and metadata which were saved by systemd-coredump Socket Statistics ss -l: Ss is an abbreviation for Socket Statistics. As the name suggests, the ss command can be used to get socket statistics, which can display something similar to netstat. The advantage of ss is that it can display more detailed information about TCP and connection status, and is faster and more efficient than netstat. When the number of socket connections on the server becomes very large, either using the netstat command or directly cat /proc/net/tcp, the execution speed will be slow. Some systemd units [root@archlinux ~]# ls /usr/bin/*ctl /usr/bin/auditctl /usr/bin/journalctl /usr/bin/oomctl /usr/bin/userdbctl /usr/bin/bootctl /usr/bin/keyctl /usr/bin/portablectl /usr/bin/wdctl /usr/bin/busctl /usr/bin/localectl /usr/bin/resolvectl /usr/bin/zramctl /usr/bin/coredumpctl /usr/bin/loginctl /usr/bin/sysctl /usr/bin/homectl /usr/bin/machinectl /usr/bin/systemctl /usr/bin/hostnamectl /usr/bin/networkctl /usr/bin/timedatectl oomctl may be used to get information about the various contexts read in by the systemd(1) userspace out-of-memory (OOM) killer, systemd-oomd(8). e.g. when service mariadb crashes, view why it crashes. oomctl - \"OOM KILLER\" - deletes the service that uses a lot of system memory Systemd startup target unit Systemd boots the system to a predefined target consisting of specific running services. The predefined launch targets are: poweroff.target (SysV runlevel0') reboot.target (SysV runlevel6) multi-user.target (SysV runlevel[234]) graphical.target (SysV runlevel5) rescure.target (SysV runlevel1) emergency.target In the general case, systemd boots the system to the default.target state, which typically points to graphical.target. The system will boot to the graphical interface and allow you to log in only if one of the display managers, such as Simple Desktop Display Manager (SDDM) and GNOME Display Manager (GDM). systemctl isolate TARGET command can be used to move the system to the desired boot destination. Services are implemented as service units, e.g. acpid.service, sshd.service. A detailed specification can be found in the systemd.service man page. Syslog command rsyslog configuration file /etc/rsyslog.conf $ -- global commands $ModLoad Rotate log files command logrotate config file /etc/logrotate.conf directives that determine how often rotation occurs: daily, weekly, monthly, yearly directives that determine compression: compress, nocompress, compresscmd, uncompresscmd, compressext, compressoptions, delaycompress directive rotate NUMBER makes sure that the NUMBER of rotated files is saved, ie that the log file passes the NUMBER of rotation before deleting directive mail ADRESS allows you to send a log file by email to the ADDRESS address when rotating just before deleting Systemd timer to automate the execution of individual services in accordance with a certain time schedule, we can use systemd units of the type timer all existing timers on the system and their states can be viewed with the systemctl list-timers command every times consists of two files located in directory /etc/systemd/system SERVICE.timer - defines the time dependency or start time of our service SERVICE.service - defines the service itself or the commands to run Through all the examples we use SERVICE as the name of our pair of timers and systemd services: enabling and starting the timer is done with the help of systemctl tools as for all other types of units: systemctl enable SERVICE.timer systemctl disable SERVICE.timer systemctl start SERVICE.timer systemctl stop SERVICE.timer Structure of systemd.timer files: the SERVICE.timer file must be located in the /etc/systemd/system directory and be of the following format: [Unit] Description=My time dependent service [Timer] # ... [Install] WantedBy=timers.target Structure of SERVICE.service files: The difference between the SERVICE.service file for using a timer from a typical systemd service file is in: SERVICE.service for timer file does not contain a section [Install] timer service It does not need to be enabled or run with systemctl, we enable and run the SERVICE.timer unit instead Example format: [Unit] # ... [Service] # ... There are two types of timers: relative for a event defined for a specific time Parameters for a timer defined relative to an event: OnActiveSec - relative to the start time of the timer itself OnBootSec - relative to the start time of OS boot OnStartupSec - relative to starting systemd process OnUnitActiveSec - relative to the time of last unit start OnUnitInactiveSec - relative to the time of last unit stop OnCalendar - defined for a specific date-time Relative times are defined by combinig time measurement units: 1h 20m or 5 s Specific times can be defined generically or specifically by valuess: hourly, daily, weekly, monthly, 2003-03-05 05:40 Systemd Journal Journal (daemon systemd-journald) is a component of systemd in charge of viewing and managing log files a replacement for Syslog, although systems can use both The systemd-journald service collects and stores log data and associated metadata in binary form The journalctl tool is used to view log files Output structure similar to / var / log / messages High-priority messages are highlighted visually (red, bold) Times are translated to the local time zone All data is displayed, including rotated log files journalctl -n NUMBER displays only the last NUMBER of messages journalctl -o FORM shows the output in the form of FORM, where FORM can be verbose, export, json, ... journalctl -f tracks messages as they are created Rsync backup service rsync is an open source tool for efficient incremental data transfer. It is very useful as a data backup tool. When used for backup, a very important parameter is --archive, or -a which stores metadata about files Usage: rsync -a /myDirIwantToBackup /backupDir Starting units on boot Example 1: Reflector Reflector is a Python script which can retrieve the latest mirror list from the Arch Linux Mirror Status page, filter the most up-to-date mirrors, sort them by speed and overwrite the file /etc/pacman.d/mirrorlist. [fidit@archlinux ~]$ systemctl status reflector-init.service \u25cf reflector-init.service - Initializes mirrors for the VM Loaded: loaded (/etc/systemd/system/reflector-init.service; enabled; vendor preset: disabled) Active: active (exited) since Fri 2022-04-22 12:15:47 UTC; 8min ago Process: 692 ExecStart=reflector --latest 20 --protocol https --sort rate --save /etc/pacman.d/m> Main PID: 692 (code=exited, status=0/SUCCESS) CPU: 1.176s [fidit@archlinux ~]$ cat /etc/systemd/system/reflector-init.service [Unit] Description=Initializes mirrors for the VM After=network-online.target Wants=network-online.target Before=sshd.service cloud-final.service ConditionFirstBoot=yes [Service] Type=oneshot RemainAfterExit=yes ExecStart=reflector --latest 20 --protocol https --sort rate --save /etc/pacman.d/mirrorlist [Install] WantedBy=multi-user.target [fidit@archlinux ~]$ cat /etc/systemd/system/pacman-init.service [Unit] Description=Initializes Pacman keyring Before=sshd.service cloud-final.service ConditionFirstBoot=yes [Service] Type=oneshot RemainAfterExit=yes ExecStart=/usr/bin/pacman-key --init ExecStart=/usr/bin/pacman-key --populate archlinux [Install] WantedBy=multi-user.target Services can be executed paralelly on boot process. Services know what they depend on, it is possible to change the order. After=network-online.target cloud-config.service rc-local.service - condition what needs to be started before this service. Before=sshd.service cloud-final.service - condition before which services must this service start ConditionFirstBoot=yes - runs only on first OS boot Example 2: cloud-final This stage runs as late in boot as possible. Any scripts that a user is accustomed to running after logging into a system should run correctly here. Things that run here include: package installations configuration management plugins (puppet, chef, salt-minion) user-defined scripts (e.g. shell scripts passed as user-data) [fidit@archlinux ~]$ cat /usr/lib/systemd/system/cloud-final.service [Unit] Description=Execute cloud user/final scripts After=network-online.target cloud-config.service rc-local.service Wants=network-online.target cloud-config.service [Service] Type=oneshot ExecStart=/usr/bin/cloud-init modules --mode=final RemainAfterExit=yes TimeoutSec=0 KillMode=process TasksMax=infinity # Output needs to appear in instance console output StandardOutput=journal+console [Install] WantedBy=cloud-init.target [fidit@archlinux ~]$ cat /usr/lib/systemd/system/cloud-config.service [Unit] Description=Apply the settings specified in cloud-config After=network-online.target cloud-config.target After=snapd.seeded.service Wants=network-online.target cloud-config.target [Service] Type=oneshot ExecStart=/usr/bin/cloud-init modules --mode=config RemainAfterExit=yes TimeoutSec=0 # Output needs to appear in instance console output StandardOutput=journal+console [Install] WantedBy=cloud-init.target List dependencies of a service: [fidit@archlinux ~]$ systemctl list-dependencies cloud-init.target cloud-init.target \u25cf \u251c\u2500cloud-config.service \u25cf \u251c\u2500cloud-final.service \u25cf \u251c\u2500cloud-init-local.service \u25cf \u2514\u2500cloud-init.service Disks and ZFS Let's add some storage to our VM. We will add 5 disks using virt-manager Linux stores all connected disks into the directory /dev/disk. You can view the disks by id, label, partition UUID or disk UUID. In a virtual machine disks are stored in /dev/vd where is the number of a drive Let's view all disks and their info in the system: [test@test-PC ~]$ sudo fdisk -l Disk /dev/vda: 12 GiB, 12884901888 bytes, 25165824 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 902FD2FE-154A-4635-9BF8-3FAB93BA67FC Device Start End Sectors Size Type /dev/vda1 2048 4095 2048 1M BIOS boot /dev/vda2 4096 25165790 25161695 12G Linux filesystem Disk /dev/vdb: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/vdc: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/vdd: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/vde: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes We will now create a RAID disk pool using ZFS. ZFS: ZFS - ArchWiki - pay atention to the Linux kernel version and edition ZFS needs to be compiled on the system and binds itself to the system hardware. Linux kernel versions: linux, lts, zen (multimedia), dkms - more on that later Why ZFS? No technical filesystem limits (as of today), portable, fast etc. Has built-in Volume manager What's my Linux Kernel?: [test@test-PC ~]$uname -a Linux archlinux 5.17.1-arch1-1 #1 SMP PREEMPT Mon, 28 Mar 2022 20:55:33 +0000 x86_64 GNU/Linux Install ZFS Download PKGBUILD Then prerequisites: pacman -S make fakeroot patch autoconf automake dkms nano Download 0001-only-build-the-module-in-dkms patch. curl -o 0001-only-build-the-module-in-dkms.conf.patch \"https://aur.archlinux.org/cgit/aur.git/plain/0001-only-build-the-module-in-dkms.conf.patch?h=zfs-dkms\" Problems with GPG package : For signing use: link pacman-key --recv-keys keyid or gpg --recv-keys keyid The key on 27.04.2022. was: 6AD860EED4598027 4. Install ZFS Utils curl -o zfs.initcpio.hook \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.hook?h=zfs-utils\" curl -o zfs.initcpio.install \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.install?h=zfs-utils\" nano PKGBUILD-utils -> https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-utils makepkg -p PKGBUILD-utils Then build and install ZFS makepkg sudo pacman -U zfs-dkms-2.1.4-1-any.pkg.tar.zst zfs-utils-2.1.4-1-x86_64.pkg.tar.zst Test does ZFS even work? sudo modprobe zfs No? That's because of Kernel Headers install them with: pacman -S linux-headers Kernel Headers are used when various modules are using (connecting) to the Linux kernel - let's say they are the same as libraries in programming languages. * RAID pool Let's create a zpool. ZFS is dividen in two layers: ZFS - High layer Zpool - low level Zpool is..? ZFS filesystems are built on top of virtual storage pools called zpools. A zpool is constructed of virtual devices (vdevs), which are themselves constructed of block devices: files, hard drive partitions, or entire drives, with the last being the recommended usage. RAID-Z - software RAID inside ZFS. Best for data recovery because it dosen't depend on a physical RAID controller. It has features like: Parity disks Data deduplication - if finds multiple copies of the same file, leaves only one, deletes others and creates symbolic links to the one kept in RAID pool. Auto-compression (lz4 and zstd) Setup all disks for ZFS and create a pool on disk vdb: fdisk /dev/vd[bcde] - Typed in: g, n, 1, enter, enter, t, L, 157 \"Solaris /usr and Apple ZFS\", w zpool create mypool /dev/vdb What have we done? [user@archlinux ~]$ fdisk -l /dev/vd[bcde] | grep ZFS /dev/vdb1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS /dev/vdc1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS /dev/vdd1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS /dev/vde1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS [user@archlinux ~]$ zpool create mojbazen /dev/vdb [user@archlinux ~]$ zpool list NAME SIZE ALLOC FREE CKPOINT EXPANDSZ FRAG CAP DEDUP HEALTH ALTROOT mypool 960M 120K 960M - - 0% 0% 1.00x ONLINE - Delete a pool: zpool destroy mypool Let's create a RAID mirrored pool and mount it to the point /mypool: zpool create -m /mypool mypool mirror /dev/vdb1 /dev/vdc1 mount | grep poo mypool on /mypool type zfs (rw,xattr,noacl) zpool list NAME SIZE ALLOC FREE CKPOINT EXPANDSZ FRAG CAP DEDUP HEALTH ALTROOT mypool 960M 120K 960M - - 0% 0% 1.00x ONLINE - Let's create one directory and one file and give ourselfs ownership over the file in that mounted directory: [fidit@archlinux ~]$ cd /mypool [fidit@archlinux mypool]$ ls [fidit@archlinux mypool]$ sudo mkdir mydir [fidit@archlinux mypool]$ sudo touch myfile [fidit@archlinux mypool]$ ls myfile mydir [fidit@archlinux mypool]$ ls -la total 18 drwxr-xr-x 3 root root 4 Apr 1 14:17 . drwxr-xr-x 1 root root 146 Apr 1 14:15 .. -rw-r--r-- 1 root root 0 Apr 1 14:17 myfile drwxr-xr-x 2 root root 2 Apr 1 14:16 mydir [fidit@archlinux mypool]$ chown fidit:fidit myfile We will now list our pool: [fidit@archlinux mypool]$ zpool list NAME SIZE ALLOC FREE CKPOINT EXPANDSZ FRAG CAP DEDUP HEALTH ALTROOT mypool 960M 153K 960M - - 0% 0% 1.00x ONLINE - How to attach detach more disks to the pool: [fidit@archlinux mypool]$ zpool attach mypool /dev/vdd1 [fidit@archlinux mypool]$ sudo zpool detach mypool vdb1 [fidit@archlinux mypool]$ sudo zpool add mypool vdb1 [fidit@archlinux mypool]$ sudo zpool add mypool vde1 We created a RAID-0 stripe: [fidit@archlinux mypool]$ zpool status pool: mypool state: ONLINE config: NAME STATE READ WRITE CKSUM mypool ONLINE 0 0 0 vdc1 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vde1 ONLINE 0 0 0 Extending mirrors: [fidit@archlinux ~]$ sudo zpool destroy mypool [fidit@archlinux ~]$ sudo zpool create -m /mypool mypool mirror /dev/vdb1 /dev/vdc1 [fidit@archlinux ~]$ sudo zpool attach mypool /dev/vdc1 /dev/vdd1 [fidit@archlinux ~]$ zpool status pool: mypool state: ONLINE scan: resilvered 232K in 00:00:00 with 0 errors on Fri Apr 1 14:46:44 2022 config: NAME STATE READ WRITE CKSUM mypool ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vdc1 ONLINE 0 0 0 vdd1 ONLINE 0 0 0 RAID-Z This is a non-standard RAID that uses the ZFS file system; no other file system can be used for this array. Note that there is not a single hardware controller that implements RAID-Z. The ZFS file system uses an additional level of checksums to search for data corruption without displaying the appropriate messages. ZFS uses checksums with any level of redundancy, including single disk pools. The distribution mechanism is similar to RAID 5, but it uses dynamic bandwidth. Any block, regardless of its size, has its own RAID bandwidth, which means that each RAID-Z record is a full-band record. source How to create RAID-Z pool: sudo zpool create -m /mypool mypool raidz /dev/vdb1 /dev/vdc1 /dev/vdd1 /dev/vde1 So what about parity? If you have up to 5 disks only one parity drive is needed If you have 6 - 8 disks -> 2 parity drives 8+ disks -> 3 parity and more.. Those parity disks are usually the same size RAID-Z variants: RAID-Z RAID-Z2 *RAID-Z3 In RAID-Z, files are never divided exactly in half, but the data is treated as blocks of a fixed length. The minimum number of disks you can use is three. Three drives are usually combined into a virtual device (vdev). RAID-Z (sometimes called RAID-Z1) will provide a record of each unique data block so that it can recover from the failure of any single disk on vdev. In this case, the data is automatically distributed across the disk in the most optimal way. RAID-Z1 is practically an analogue of RAID 5, as it uses single parity. It is not difficult to guess that fault tolerance will be the same; i.e., there may be a possible failure of a drive. RAID-Z2 is more fault-tolerant, as it uses two parity blocks and two data blocks from one piece of information. This is an analogue of RAID 6 and can also withstand the collapse of as many as two disks. In RAID-Z2, the maximum number of disks is at least four. You can go further and try RAID-Z3, which has a maximum of at least five disks and the ability to survive damage to up to three disks. RAID-Z3 is rarely used due to its size. It is also not as space-efficient as other RAID-Z options. source How to create RAID-Z2: [fidit@archlinux ~]$ sudo zpool create -m /mypool mypool raidz2 /dev/vdb1 /dev/vdc1 /dev/vdd1 /dev/vde1 [fidit@archlinux ~]$ df -h Filesystem Size Used Avail Use% Mounted on dev 478M 0 478M 0% /dev run 485M 796K 485M 1% /run /dev/vda2 12G 2.4G 9.3G 21% / tmpfs 485M 0 485M 0% /dev/shm tmpfs 485M 0 485M 0% /tmp tmpfs 97M 0 97M 0% /run/user/1000 mypool 1.8G 128K 1.8G 1% /mypool [fidit@archlinux ~]$ sudo zpool status pool: mypool state: ONLINE config: NAME STATE READ WRITE CKSUM mypool ONLINE 0 0 0 raidz2-0 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vdc1 ONLINE 0 0 0 vdd1 ONLINE 0 0 0 vde1 ONLINE 0 0 0 RAID-Z3: [fidit@archlinux sudo zpool create -m /mypool raidz3 /dev/vdb1 /dev/vdc1 /dev/vdd1 /dev/vde1 [fidit@archlinux ~]$ df -h Filesystem Size Used Avail Use% Mounted on dev 478M 0 478M 0% /dev run 485M 796K 485M 1% /run /dev/vda2 12G 2.4G 9.3G 21% / tmpfs 485M 0 485M 0% /dev/shm tmpfs 485M 0 485M 0% /tmp tmpfs 97M 0 97M 0% /run/user/1000 mypool 832M 128K 832M 1% /mypool Set compression method on a ZFS pool: [fidit@archlinux ~]$ sudo zfs set compression=zstd mypool Security mechanisms Resilvering - zfs reads data from all devices and makes sure that all of it can be read correctly (no errors, proper checksums etc.) Scrubbing and resilvering are very similar operations. The difference is that resilvering only examines data that ZFS knows to be out of date (for example, when attaching a new device to a mirror or replacing an existing device), whereas scrubbing examines all data to discover silent errors due to hardware faults or disk failure. Because scrubbing and resilvering are I/O-intensive operations, ZFS only allows one at a time. A scrub is split into two parts: metadata scanning and block scrubbing. The metadata scanning sorts blocks into large sequential ranges which can then be read much more efficiently from disk when issuing the scrub I/O. source How to? sudo zpool resilver mypool sudo zpool scrub mypool Optimizing Kernel Kernel? Linux Kernel web ArchLinux always uses the latest kernel. Officially supported kernels Stable \u2014 Vanilla Linux kernel and modules, with a few patches applied. Hardened \u2014 A security-focused Linux kernel applying a set of hardening patches to mitigate kernel and userspace exploits. It also enables more upstream kernel hardening features than linux. Longterm \u2014 Long-term support (LTS) Linux kernel and modules. Zen Kernel For every server that is used for providing some kind of service, it is recomended that it runs on a Long-term supported Linux kernel. How to install long term support linux kernel? First install LTS kernel: sudo pacman -S linux-lts Then edit /boot/grub/grub.cfg: linux /boot/vmlinuz-linux-lts root=UUID=ef9af0ad-7937-442e-af1e-0f71094122b2 rw net.ifname> initrd /boot/initramfs-linux-lts.img Linux will now boot with the LTS kernel, previously used kernel (linux linux - latest) is avaliable in GNU GRUB startup menu. GNU GRUB is: GNU GRUB is a Multiboot boot loader. It was derived from GRUB, the GRand Unified Bootloader, which was originally designed and implemented by Erich Stefan Boleyn. Briefly, a boot loader is the first software program that runs when a computer starts. It is responsible for loading and transferring control to the operating system kernel software. It can be run in: BIOS mode UEFI mode Gummiboot instead of GRUB? (systemd's Gummiboot) -> GRUB and systemd bootloaders are not the same, Arch uses it's own bootloader. In the boot process you can notice initramfs and vmliuz.. what is that? initramfs linux fallback - kernel modules that are required by your PC's (server, VM etc.) hardware vmlinuz - Linux Kernel - same on every computer running that kernel version Analyzing boot times To view detail specification about loading times for all system and user services use: systemd-analyze blame If you want a graph of the system booting process: systemd-analyze dot systemd-analyze plot > graph.svg You can see some red coloured items. They are part of the Critical-chain. What is the Critical-chain? Basically this. \"+\" shows how much seconds has been added to the boot time and @ shows when did a service started compared to booting. Analyzing service security To view the security state of all services use: [fidit@archlinux ~]$ systemd-analyze security UNIT EXPOSURE PREDICATE HAPPY auditd.service 8.7 EXPOSED \ud83d\ude41 dbus.service 9.6 UNSAFE \ud83d\ude28 dm-event.service 9.5 UNSAFE \ud83d\ude28 emergency.service 9.5 UNSAFE \ud83d\ude28 getty@tty1.service 9.6 UNSAFE \ud83d\ude28 rescue.service 9.5 UNSAFE \ud83d\ude28 shadow.service 9.6 UNSAFE \ud83d\ude28 sshd.service 9.6 UNSAFE \ud83d\ude28 systemd-ask-password-console.service 9.4 UNSAFE \ud83d\ude28 systemd-ask-password-wall.service 9.4 UNSAFE \ud83d\ude28 systemd-homed.service 5.8 MEDIUM \ud83d\ude10 systemd-journald.service 4.3 OK \ud83d\ude42 systemd-logind.service 2.8 OK \ud83d\ude42 systemd-networkd.service 2.6 OK \ud83d\ude42 systemd-resolved.service 2.1 OK \ud83d\ude42 systemd-rfkill.service 9.4 UNSAFE \ud83d\ude28 systemd-timesyncd.service 2.1 OK \ud83d\ude42 systemd-udevd.service 6.7 MEDIUM \ud83d\ude10 systemd-userdbd.service 2.2 OK \ud83d\ude42 user@1000.service 9.4 UNSAFE \ud83d\ude28 To view the security state and parameters of a specific service use: [fidit@archlinux ~]$ systemd-analyze security sshd.service NAME DESCRIPTION > \u2717 RootDirectory=/RootImage= Service runs within the host's root di> SupplementaryGroups= Service runs as root, option does not > RemoveIPC= Service runs as root, option does not > \u2717 User=/DynamicUser= Service runs as root user > \u2717 CapabilityBoundingSet=~CAP_SYS_TIME Service processes may change the syste> \u2717 NoNewPrivileges= Service processes may acquire new priv> \u2713 AmbientCapabilities= Service process does not receive ambie> \u2717 PrivateDevices= Service potentially has access to hard> \u2717 ProtectClock= Service may write to the hardware cloc> \u2717 CapabilityBoundingSet=~CAP_SYS_PACCT Service may use acct() > \u2717 CapabilityBoundingSet=~CAP_KILL Service may send UNIX signals to arbit> \u2717 ProtectKernelLogs= Service may read from or write to the > \u2717 CapabilityBoundingSet=~CAP_WAKE_ALARM Service may program timers that wake u> \u2717 CapabilityBoundingSet=~CAP_(DAC_*|FOWNER|IPC_OWNER) Service may override UNIX file/IPC per> \u2717 ProtectControlGroups= Service may modify the control group f> \u2717 CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE Service may mark files immutable > \u2717 CapabilityBoundingSet=~CAP_IPC_LOCK Service may lock memory into RAM > \u2717 ProtectKernelModules= Service may load or read kernel module> \u2717 CapabilityBoundingSet=~CAP_SYS_MODULE Service may load kernel modules > \u2717 CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG Service may issue vhangup() > \u2717 CapabilityBoundingSet=~CAP_SYS_BOOT Service may issue reboot() > \u2717 CapabilityBoundingSet=~CAP_SYS_CHROOT Service may issue chroot() > \u2717 PrivateMounts= Service may install system mounts > \u2717 SystemCallArchitectures= Service may execute system calls with > \u2717 CapabilityBoundingSet=~CAP_BLOCK_SUSPEND Service may establish wake locks > \u2717 MemoryDenyWriteExecute= Service may create writable executable> \u2717 RestrictNamespaces=~user Service may create user namespaces > \u2717 RestrictNamespaces=~pid Service may create process namespaces > \u2717 RestrictNamespaces=~net Service may create network namespaces > \u2717 RestrictNamespaces=~uts Service may create hostname namespaces> \u2717 RestrictNamespaces=~mnt Service may create file system namespa> \u2717 CapabilityBoundingSet=~CAP_LEASE Service may create file leases > \u2717 CapabilityBoundingSet=~CAP_MKNOD Service may create device nodes > \u2717 RestrictNamespaces=~cgroup Service may create cgroup namespaces > \u2717 RestrictSUIDSGID= Service may create SUID/SGID files > \u2717 RestrictNamespaces=~ipc Service may create IPC namespaces > \u2717 ProtectHostname= Service may change system host/domainn> \u2717 CapabilityBoundingSet=~CAP_(CHOWN|FSETID|SETFCAP) Service may change file ownership/acce> \u2717 CapabilityBoundingSet=~CAP_SET(UID|GID|PCAP) Service may change UID/GID identities/> \u2717 LockPersonality= Service may change ABI personality > \u2717 ProtectKernelTunables= Service may alter kernel tunables > \u2717 RestrictAddressFamilies=~AF_PACKET Service may allocate packet sockets > \u2717 RestrictAddressFamilies=~AF_NETLINK Service may allocate netlink sockets > \u2717 RestrictAddressFamilies=~AF_UNIX Service may allocate local sockets > \u2717 RestrictAddressFamilies=~\u2026 Service may allocate exotic sockets > \u2717 RestrictAddressFamilies=~AF_(INET|INET6) Service may allocate Internet sockets > \u2717 CapabilityBoundingSet=~CAP_MAC_* Service may adjust SMACK MAC > \u2717 RestrictRealtime= Service may acquire realtime schedulin> SSHD is executed as root user at the port 22 To ensure that some services don't go crazy while working use capatibilities in security It's only restricted on that specific local machine Editing boot options Editing GRUB boot options /boot/grub/grub.cfg Just in case, if you break something, edit the 1st of Advanced options in GRUB config menuentry - Submenu. For pracice we will edit the following in the line that begins with linux: Read-write to read-only - ro - simulate disk error (when it occurs probably disks in the server are bad.) Parameter 1 - rescue mode Parameter 3 - no GUI option net.ifnames=1 - net.ifnames tells systemd to create predictable NIC names linux /boot/vmlinuz-linux root=UUID=dcf21c7c-7209-49d1-b9a6-70e4689c16a6 ro 1 3 net.ifnames=1 quiet resume=UUID=91f4> Let's see can we boot to GUI? [fidit@archlinux ~]$ systemctl get-default graphical.target Note: found \"3\" on the kernel commandline, which overrides the default unit. List all modules: lsmod View info about a specific module: modinfo name [lljubojevic@Ljubojevic-PC ~]$ modinfo kvm filename: /lib/modules/5.17.4-arch1-1/kernel/arch/x86/kvm/kvm.ko.zst license: GPL author: Qumranet srcversion: 6121525AFDBD6FA12A6EA40 depends: irqbypass retpoline: Y intree: Y name: kvm vermagic: 5.17.4-arch1-1 SMP preempt mod_unload sig_id: PKCS#7 signer: Build time autogenerated kernel key sig_key: 36:76:4D:01:56:28:F8:D4:45:6E:7C:84:4E:B4:8A:6F:98:D8:6D:FD sig_hashalgo: sha512 signature: 30:64:02:30:4F:1A:2B:11:FE:3F:49:47:A2:26:BE:8A:87:F5:62:60: F9:15:74:57:BA:47:F2:B9:95:3E:25:78:4E:7D:1E:41:CF:C4:5B:FB: BC:91:BD:2F:CE:BF:1E:70:B5:93:A4:E5:02:30:41:5D:E7:62:8B:60: B3:15:09:19:3E:6D:13:A2:54:26:66:2F:3E:FF:12:74:47:10:6F:71: 97:BC:24:EF:62:A4:58:15:7A:0B:27:5F:FC:F2:B0:2C:9E:A0:1D:D9: 9E:73 parm: tdp_mmu:bool parm: mmio_caching:bool parm: nx_huge_pages:bool parm: nx_huge_pages_recovery_ratio:uint parm: nx_huge_pages_recovery_period_ms:uint parm: are parameters of a module For example, let's optimize our boot proces by excluding sound module (servers in most cases don't need sound): snd_intel_hda - sound module Shut it down with GRUB parameter in line linux: linux /boot/vmlinuz-linux root=UUID=dcf21c7c-7209-49d1-b9a6-70e4689c16a6 snd-hda-intel.enable=0 quiet resume=UUID=91f4 Test: dmesg | grep snd Blacklisting modules Blacklisting, in the context of kernel modules, is a mechanism to prevent the kernel module from loading. This could be useful if, for example, the associated hardware is not needed, or if loading that module causes problems: for instance there may be two kernel modules that try to control the same piece of hardware, and loading them together would result in a conflict. Example: module_blacklist=kvm,btrfs,cdrom Dosen't boot? Btrfs is a filesystem and the core can't be loaded without it. Also a heads up, never delete kernels that WORK! :/ You may notice that on first boot when cloud-init is configuring the system, boot time is higher than later on. You can check if cloud-init has started on current boot with: journalctl --unit cloud-init -b That can be useful when you change cloud-init config files. Firewalls Layer 3 and layer 2 firewalls always analyze packet headers On Linux, software firewalls are: iptables - will be replaced with nftables nftables nftables is the modern Linux kernel packet classification framework. New code should use it instead of the legacy {ip,ip6,arp,eb}_tables (xtables) infrastructure. For existing codebases that have not yet converted, the legacy xtables infrastructure is still maintained as of 2021 netlink socket Netlink is used to transfer information between the kernel and user-space processes. It consists of a standard sockets-based interface for user space processes and an internal kernel API for kernel modules. How to use nftables firewall: nft mnl.c:60: Unable to initialize Netlink socket: Protocol not supported Fix: Reboot after system upgrade [fidit@archlinux ~]$ find /lib/modules/5.15.36-1-lts/ -name \\*tables\\* /lib/modules/5.15.36-1-lts/kernel/net/bridge/netfilter/ebtables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/ipv4/netfilter/arp_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/ipv4/netfilter/ip_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/ipv6/netfilter/ip6_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/netfilter/nf_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/netfilter/x_tables.ko.zst What can you do with a firewall? Create a table that supports IPv4 and IPv6: [fidit@archlinux ~]$ sudo nft add table inet my_table [fidit@archlinux ~]$ sudo nft list ruleset table inet my_table { } Create a chain: sudo nft add chain inet my_table my_chain [fidit@archlinux ~]$ sudo nft add chain inet my_table my_chain2 '{type filter hook input priority 0;}' [fidit@archlinux ~]$ sudo nft list ruleset table inet my_table { chain my_chain { } chain my_chain2 { type filter hook input priority filter; policy accept; } } [fidit@archlinux ~]$ sudo nft chain inet my_table my_chain2 '{policy drop;}' DONT DO THIS! YOU WILL DROP ALL TRAFFIC IN VM AND LOCK YOURSELF OUT:(! Chain actions: Accept Drop Reject Chains in iptables: forward, input, output -> FILTER pre/postroute -> NAT Chains in nftables: ipv4, inet, ip6 Add rules to the chain : Example 1 Let's block (drop) all ipv4 traffic from 192.168.122.1:80 Hint: http uses port 80 on layer 5, and uses tcp protocol on l4 [fidit@archlinux ~]$ sudo nft add rule inet my_table my_chain2 ip saddr 192.168.122.1 tcp dport 80 drop pacman -S nginx [fidit@archlinux ~]$ sudo systemctl start nginx [fidit@archlinux ~]$ systemctl status nginx Example 2 Explicitly Enable access to TCP port 80 from a local address sudo nft add rule inet my_table my_chain2 ip saddr 127.0.0.1 tcp dport 80 accept Example 3 Add rule that discards all udp traffic [fidit@archlinux ~]$ sudo nft add rule inet my_table my_chain2 ip protocol udp drop Example 4 Disable ssh from IP address 13.198.209.200 sudo nft add rule inet my_table my_chain2 ip saddr 193.198.209.200 tcp dport 22 reject Example 5 Disable connection from local to address 51.158.166.78 port 80 sudo nft add chain inet my_table my_chain3 '{type filter hook output priority 0;}' sudo nft add rule inet my_table my_chain3 ip daddr 51.158.166.73 tcp dport 80 drop Example 6 Block access to the address 120.240.11.25 from address 25.41.36.127. sudo nft add chain inet my_table my_chain4 '{type filter hook forward priority 0;}' sudo nft add rule inet my_table my_chain4 ip saddr 25.41.36.127 ip daddr 121.240.11.25 drop Infrastructure automation using Ansible Tired of doing all the work manually? No problem, use infrastructure automation tools as: Terraform, Ansible, Puppet, Chef, SaltStack.. whatever you prefer. We will try Red-Hat Ansible. Let's install it: pacman -S ansible ansible-lint code We write ansible playbooks in VS Code with extension -> Remote Development v0.21.0 Process goes as following: Host (VS Code on host) connects remotely with extensions to Virtual Machine 1 that has Ansible installed. Virtual Machine 1 manages Virtual Machine 2 using Ansible How to start? In VS Code do ssh to your VM1. Then edit /etc/ansible/hosts file as following: [me] 192.168.122.225 -- your IP [others] 192.168.122.13 -- IP of VM2 You can't ping VM's by authenticating with password because it only works with SSH keys! That's why you need to generate SSH keys on both VM's and add the public keys in each other to .ssh/allowed_hosts on VM1 and VM2 Create a playbook.yaml file in VS Code: This playbook will perform a full system upgrade on both VM's --- - name: All hosts up-to-date hosts: me others become: yes tasks: - name: full system upgrade pacman: update_cache: yes upgrade: yes More on Ansible playbooks Now, let's install Apache HTTP server on VM2 and a postgresql DB on VM1: playbook1.yaml: : --- - name: Install apache hosts: others become: yes tasks: - name: install apache pacman: name: apache state: latest - name: goooo apachee ansible.builtin.service: name: httpd state: started playbook2.yaml : - name: install postgresql hosts: me become: yes tasks: - name: install postgresql pacman: name: postgresql state: latest - name: gooo postgresql ansible.builtin.service: name: postgresql state: started Playbook to install Wordpress : --- - name: Update web servers hosts: lokalna become: yes vars: ime_baze: mojabaza ime_korisnika: mojkorisnik passwd: 1234 tasks: - name: Ensure apache is at the latest version ansible.builtin.pacman: name: apache state: latest - name: Ensure that apache is started ansible.builtin.service: name: httpd state: started # - name: Download index.html from group.miletic.net # ansible.builtin.command: # cmd: curl -o /srv/http/index.html https://group.miletic.net/index.html - name: ansible.builtin.command: cmd: curl -o /srv/http/index.php https://www.miletic.net/index.txt - name: Ensure php-fpm is at the latest version ansible.builtin.pacman: name: php-fpm state: latest - name: Ensure that php-fpm is started ansible.builtin.service: name: php-fpm state: started - name: Copy httpd.conf ansible.builtin.copy: src: ./httpd.conf dest: /etc/httpd/conf/httpd.conf - name: Copy php-fpm.conf ansible.builtin.copy: src: ./php-fpm.conf dest: /etc/httpd/conf/extra/php-fpm.conf - name: Restart apache ansible.builtin.service: name: httpd state: restarted - name: pymysql ansible.builtin.pacman: name: python-pymysql state: latest - name: Ensure mariadb is at the latest version ansible.builtin.pacman: name: mariadb state: latest - name: Configure mariadb ansible.builtin.command: cmd: mariadb-install-db --user=mysql --auth-root-authentication-method=normal --basedir=/usr --datadir=/var/lib/mysql - name: Ensure that mariadb is started ansible.builtin.service: name: mariadb state: started - name: Create database user with name 'bob' and password '12345' with all database privileges community.mysql.mysql_user: name: \"{{ime_korisnika}}\" password: \"{{passwd}}\" priv: '*.*:ALL' state: present - name: Create a new database mojabaza community.mysql.mysql_db: check_implicit_admin: yes login_user: \"{{ime_korisnika}}\" login_password: \"{{passwd}}\" name: \"{{ime_baze}}\" state: present - name: install wordpress ansible.builtin.command: cmd: curl -o /tmp/wordpress.tar.gz https://hr.wordpress.org/latest-hr.tar.gz - name: wp ansible.builtin.command: cmd: tar xvf /tmp/wordpress.tar.gz -C /tmp - name: wp ansible.builtin.command: cmd: rm -r /srv/http - name: a ansible.builtin.command: cmd: mv /tmp/wordpress /srv/http - name: aaa ansible.builtin.template: src: ./wp-config.php.j2 dest: /srv/http/wp-config.php Playbook to install mediawiki : --- - name: Update web servers hosts: lokalna become: yes vars: ime_baze: mojabaza ime_korisnika: mojkorisnik passwd: 1234 tasks: - name: Ensure apache is at the latest version ansible.builtin.pacman: name: apache state: latest - name: Ensure that apache is started ansible.builtin.service: name: httpd state: started - name: Ensure php-fpm is at the latest version ansible.builtin.pacman: name: php-fpm state: latest - name: Ensure that php-fpm is started ansible.builtin.service: name: php-fpm state: started - name: Copy httpd.conf ansible.builtin.copy: src: ./httpd.conf dest: /etc/httpd/conf/httpd.conf - name: Copy php-fpm.conf ansible.builtin.copy: src: ./php-fpm.conf dest: /etc/httpd/conf/extra/php-fpm.conf - name: Restart apache ansible.builtin.service: name: httpd state: restarted - name: Install postgresql ansible.builtin.pacman: name: postgresql state: latest - name: Install postgresql ansible.builtin.pacman: name: python-psycopg2 #- name: Configure postgresql # become_user: postgres # ansible.builtin.command: # cmd: initdb -D /var/lib/postgres/data - name: Ensure that postgres is started ansible.builtin.service: name: postgresql state: started - name: Create database become: yes become_user: postgres postgresql_db: name: \"{{ime_baze}}\" - name: create db user become: yes become_user: postgres postgresql_user: state: present name: \"{{ime_korisnika}}\" password: \"{{passwd}}\" - name: Create a new database mojabaza become: yes become_user: postgres postgresql_privs: type: database database: \"{{ ime_baze }}\" roles: \"{{ ime_korisnika }}\" grant_option: no privs: all - name: install mediawiki ansible.builtin.command: cmd: curl -o /tmp/mediawiki.tar.gz https://releases.wikimedia.org/mediawiki/1.37/mediawiki-1.37.2.tar.gz - name: mwiki ansible.builtin.command: cmd: tar xvf /tmp/mediawiki.tar.gz -C /tmp #- name: a # ansible.builtin.command: # cmd: mv /tmp/mediawiki-1.37.2 /srv/http - name: caarl ansible.builtin.command: cmd: curl -o myconf.php.j2 https://gist.github.com/5154384.git - name: aaa ansible.builtin.template: src: ./myconf.php.j2 dest: /srv/http/LocalSettings.php - name: Install PHP packages vars: ekstenzija: iconv ansible.builtin.template: src: ./phpextconf.conf.j2 dest: /etc/php/php-fpm.d/{{ ekstenzija }}.conf How to add php extensions? php-fpm: /etc/php/php-fpm.d/gd.conf or /etc/php/php.ini Ansible can do many more things, check out Ansible extensions","title":"Managing Computer Systems"},{"location":"notes/manage.html#managing-computer-systems","text":"","title":"Managing Computer Systems"},{"location":"notes/manage.html#literature","text":"Essential System administration O'Reilly,2002 - Frisch, Ae. Unix and Linux system administration handbook - Nemeth, E. Addison 2017 Dole\u017eelov\u00e1, M., Muehlfeld, M., Svistunov, M., Wadeley, S., \u010capek, T., Hrad\u00edlek, J., Silas, D., Heves, J., Kov\u00e1\u0159, P., Ondrejka, P., Boko\u010d, P., Prpi\u010d, M., Slobodov\u00e1, E., Kopalov\u00e1, E., Svoboda, M., O'Brien, D., Hideo, M., Domingo, D. & Ha, J. System administrator's guide. (Red Hat, 2018) Aoki, O. Debian reference. (Debian, 2018). The FreeBSD documentation project. FreeBSD handbook. (FreeBSD, 2018.) How Linux Works, 3rd Edition: What Every Superuser Should Know 3rd Edition, Brian Ward How to properly document software? How to properly document systems? MkDocs - Markdown or VS Code with markdownlint extension .markdownlint.json example: { \"MD007\" : { \"indent\": 4 }, \"MD014\" : false }","title":"Literature"},{"location":"notes/manage.html#md-document-example","text":"e-Mail server is configured on IP: 10.27.45.11. print(\"hello\") URL's and lists: + [www.miletic.net](https://www.miletic.net/) ili <https://www.miletic.net> + a + b + a + b 1. third 1. one more Code: ls Graph (Graphviz): a -> b; Quoting: Registering and Subscribing Your System Register your system: ~]# subscription-manager register The command will prompt you to enter your Red Hat Customer Portal user name and password. Determine the pool ID of a subscription that you require: ~]# subscription-manager list --available This command displays all available subscriptions for your Red Hat account. For every subscription, various characteristics are displayed, including the pool ID. Attach the appropriate subscription to your system by replacing pool_id with the pool ID determined in the previous step: ~]# subscription-manager attach --pool=pool_id For more information on registration of your system and attachment of the Red Hat Content Delivery Network subscriptions, see Chapter 7, Registering the System and Managing Subscriptions. source Single quotes about everything that appears on the screen! MD can be versioned on GitHub! Good practice for System Administrators is to use Password Managers e.g. KeepassXC while ensuring that the password length is 12 or more different characters (or let the Password Manager auto generate the password).","title":"MD document example"},{"location":"notes/manage.html#graph","text":"VS Code extension: Graphviz Markdown Preview v0.0.8 or Mermaid","title":"Graph"},{"location":"notes/manage.html#cloud-config","text":"ArchLinux VM Img Cloud-init ready SSH QEMU Cloud-Init","title":"Cloud-config"},{"location":"notes/manage.html#cloud-config-for-a-virtual-machine","text":"","title":"Cloud-config for a virtual machine"},{"location":"notes/manage.html#what-is-a-virtual-machine","text":"According to vmware documentation: A\u202fVirtual Machine (VM) is a compute resource that uses software instead of a physical computer to run programs and deploy apps. One or more virtual \u201cguest\u201d machines run on a physical \u201chost\u201d machine. According to Wikipedia: Virtual machine (VM) is the virtualization/emulation of a computer system. Virtual machines are based on computer architectures and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.","title":"What is a virtual machine?"},{"location":"notes/manage.html#how-to-create-and-setup-a-virtual-machine","text":"1. Generate SSH key: ssh-keygen -t rsa -b 4096 ssh-keygen -t dsa ssh-keygen -t ecdsa -b 521 2. Create user-data and meta-data files: Basic user-data with SSH key authentication: #cloud-config users: - name: fidit ssh_authorized_keys: - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZWfY7BinoB43gEXhlyvd97Yo9tKHpmx/+J0dkdyVSgX3fFlmMBpfulc7WsZ7tw3BOCgFPVHlX7awGylDmff3HE2+CntQuV0vwhqJ28yRu3LvxPm6Q4wbk+lNBO7qOg8wDroE0z0ikNg+DgqqJLXhPxX0R1lawZ0Vf+cL+M56roCMZl0CZy7TuZFcBCpEb/F5ipGQehVQVuixkA7G45+R5i7x8rZbi7wztS7oYzsgNKO/z66w4xVujLf2eMaIYEL2p7/CGc3U+nNULEUTwdJ6NsBmb2lv5HfRPrmmvIxJTSNMBEdVd2fhikFkfpzGyuKwy7p8iNRkQICURC+qEOEi4HYZvYtLsSeee0GQ5P0jTMp2Ya5vVhrz0fVn4byW8esOob7eiUX3E75iwtzUUmNLN8cuCZOhSTUlcqqJMYA701CJegWNDQw0f7lKvtvwFcuscK0+g80x8rXTngiLNTCXwVAFgSoRtI7RlQJcMOo9Z91P/NT3adC6I2G4Btmgoe+0= korisnik@ODJ-O365-117 Basic user-data with SSH key authentication for root and specific user: #cloud-config users: - name: myuser ssh_authorized_keys: - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZWfY7BinoB43gEXhlyvd97Yo9tKHpmx/+J0dkdyVSgX3fFlmMBpfulc7WsZ7tw3BOCgFPVHlX7awGylDmff3HE2+CntQuV0vwhqJ28yRu3LvxPm6Q4wbk+lNBO7qOg8wDroE0z0ikNg+DgqqJLXhPxX0R1lawZ0Vf+cL+M56roCMZl0CZy7TuZFcBCpEb/F5ipGQehVQVuixkA7G45+R5i7x8rZbi7wztS7oYzsgNKO/z66w4xVujLf2eMaIYEL2p7/CGc3U+nNULEUTwdJ6NsBmb2lv5HfRPrmmvIxJTSNMBEdVd2fhikFkfpzGyuKwy7p8iNRkQICURC+qEOEi4HYZvYtLsSeee0GQ5P0jTMp2Ya5vVhrz0fVn4byW8esOob7eiUX3E75iwtzUUmNLN8cuCZOhSTUlcqqJMYA701CJegWNDQw0f7lKvtvwFcuscK0+g80x8rXTngiLNTCXwVAFgSoRtI7RlQJcMOo9Z91P/NT3adC6I2G4Btmgoe+0= korisnik@ODJ-O365-117 - name: root ssh_authorized_keys: - ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAA5J/SRFcYnps9vCQQwnsXquEeKt9R7/7Ab6YovEoU5nE1vUSFHXoBNPhIXKOJU8G2pGi9nMFS27z9B7+oyLPTQhwFFbUOoG+/jTrc4CHy+b2rdx7x1CbR4fQSsgC/t0g+z05o9jar/t0Lea6/6hIAM2uGh+KGiKzGT/aug2VBU3SvcbQ== korisnik@ODJ-O365-117 What else can you do with cloud-config? 3. Generate cloud-init.iso: xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data 4. Create a virtual machine: 4.1. Expand ArchLinux disk image if you need more space: qemu-img resize aarch.qcow2 +10G 4.2. Create a virtual machine qemu-system-x86_64 -m 512M aarch.qcow2 -cdrom cloud-init.iso -nic user,hostfwd=tcp::60022-:22 4.3. Add port for acessing the virtual machine from host PC: ssh-keygen -f \"/home/korisnik/.ssh/known_hosts\" -R \"[localhost]:60022\" 5. Connect to the virtual machine: ssh -v -p 60022 fidit@localhost ssh -v -p 60022 root@localhost","title":"How to create and setup a virtual machine?"},{"location":"notes/manage.html#some-basic-networking-tasks-after-setting-up-a-virtual-machine-or-server-enviroment","text":"Check network connection Find your network interface name [test@test-PC ~]$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp7s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether e0:d5:5e:44:69:77 brd ff:ff:ff:ff:ff:ff inet 192.168.0.17/24 brd 192.168.0.255 scope global dynamic enp7s0 valid_lft 2613sec preferred_lft 2613sec inet6 2a05:4f44:111c:8900::18/128 scope global dynamic noprefixroute valid_lft 410132sec preferred_lft 341012sec inet6 2a05:4f44:111c:8900:50bd:bfcb:7176:40fb/64 scope global dynamic noprefixroute valid_lft 414713sec preferred_lft 345593sec inet6 2a05:4f44:111c:8900:e2d5:5eff:fe44:6977/64 scope global dynamic mngtmpaddr noprefixroute valid_lft 414711sec preferred_lft 345591sec inet6 fe80::645f:28c4:cfb8:75e3/64 scope link noprefixroute valid_lft forever preferred_lft forever Network interfaces are listed by numbers 1:, 2:, 3:, etc. In a virtual machine it's named mostly eth0 In a PC it's named mostly enpXsY View network interface status and data about the network connection [lljubojevic@Ljubojevic-PC ~]$ networkctl status enp7s0 \u25cf 2: enp7s0 Link File: /usr/lib/systemd/network/99-default.link Network File: /etc/systemd/network/20-ethernet.network Type: ether State: routable (configured) Online state: online Path: pci-0000:07:00.0 Driver: r8169 Vendor: Realtek Semiconductor Co., Ltd. Model: RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (Onboard Ethernet) Hardware Address: XYZ MTU: 1500 (min: 68, max: 9194) QDisc: fq_codel IPv6 Address Generation Mode: none Queue Length (Tx/Rx): 1/1 Auto negotiation: yes Speed: 1Gbps Duplex: full Port: tp Address: XYZ Gateway: XYZ DNS: XYZ ... Hostnamectl According to Linuxhint : The hostname is an identity of the system and is used by the networks to search the system. The \u201chostnamectl\u201d is a Linux command that is used to set the hostname in the terminal without even opening and editing in the etc/hostname file of a system. Using the \u201chostnamectl\u201d command, the user can edit the static, pretty, and transient hostname as well. Output of hostnamectl: [test@test-PC ~]$ hostnamectl Static hostname: test-PC Icon name: computer-desktop Chassis: desktop \ud83d\udda5 Machine ID: 801cb2df0c5647d1835be225e0073015 Boot ID: 4fe8134f95d041af8dc53ab247179c28 Operating System: Arch Linux Kernel: Linux 5.17.4-arch1-1 Architecture: x86-64 Hardware Vendor: Gigabyte Technology Co., Ltd. Hardware Model: Z370P D3 Hostnamectl displays: Computer name (hostname) Icon name is the machine identifying name according to XDG Icon Naming Specification. What type of system it is? (Desktop, laptop, workstation etc.) Machine and Boot ID, OS and Kernel version CPU Architecture Motherboard vendor and model Deployment is the enviroment in which is the system used e.g. \"development\", \"integration\", \"staging\", \"production\"... Location - useful when managing multiple servers/VM's It can be used for setting up: Hostname: [root@archlinux ~]# hostnamectl set-hostname myServer1 [root@archlinux ~]# hostnamectl hostname myServer1 Icon-name [root@archlinux ~]# hostnamectl set-icon-name computer [root@archlinux ~]# hostnamectl icon-name computer [root@archlinux ~]# hostnamectl set-icon-name workstation [root@archlinux ~]# hostnamectl icon-name workstation [root@archlinux ~]# hostnamectl set-icon-name chassis-laptop [root@archlinux ~]# hostnamectl icon-name chassis-laptop [root@archlinux ~]# hostnamectl set-icon-name chassis-watch [root@archlinux ~]# hostnamectl icon-name chassis-watch [root@archlinux ~]# hostnamectl set-icon-name embedded [root@archlinux ~]# hostnamectl icon-name embedded Deployment [root@archlinux ~]# hostnamectl deployment staging [root@archlinux ~]# hostnamectl deployment staging Location [root@archlinux ~]# hostnamectl location \"Berlin, room 7, rack 6\" End result? [root@archlinux ~]# hostnamectl Static hostname: myServer1 Icon name: embedded Chassis: vm \ud83d\uddb4 Deployment: staging Location: Berlin, room 7, rack 6 Machine ID: 168fc71dc2b143fab51a45ad7b066d1b Boot ID: 5dd62398ce6a4a859179e8f2b25911bf Virtualization: qemu Operating System: Arch Linux Kernel: Linux 5.16.13-arch1-1 Architecture: x86-64 Hardware Vendor: QEMU Hardware Model: Standard PC _i440FX + PIIX, 1996_ more at DNS Settings? resolvectl may be used to resolve domain names, IPv4 and IPv6 addresses, DNS resource records and services with the systemd-resolved.service(8) resolver service. By default, the specified list of parameters will be resolved as hostnames, retrieving their IPv4 and IPv6 addresses. If the parameters specified are formatted as IPv4 or IPv6 operation the reverse operation is done, and a hostname is retrieved for the specified addresses. Use resolvectl command to edit those settings, e.g.: [test@test-PC ~]$ resolvectl help resolvectl [OPTIONS...] COMMAND ... Send control commands to the network name resolution manager, or resolve domain names, IPv4 and IPv6 addresses, DNS records, and services. Commands: query HOSTNAME|ADDRESS... Resolve domain names, IPv4 and IPv6 addresses service [[NAME] TYPE] DOMAIN Resolve service (SRV) openpgp EMAIL@DOMAIN... Query OpenPGP public key tlsa DOMAIN[:PORT]... Query TLS public key status [LINK...] Show link and server status statistics Show resolver statistics reset-statistics Reset resolver statistics flush-caches Flush all local DNS caches reset-server-features Forget learnt DNS server feature levels dns [LINK [SERVER...]] Get/set per-interface DNS server address domain [LINK [DOMAIN...]] Get/set per-interface search domain default-route [LINK [BOOL]] Get/set per-interface default route flag llmnr [LINK [MODE]] Get/set per-interface LLMNR mode mdns [LINK [MODE]] Get/set per-interface MulticastDNS mode dnsovertls [LINK [MODE]] Get/set per-interface DNS-over-TLS mode dnssec [LINK [MODE]] Get/set per-interface DNSSEC mode nta [LINK [DOMAIN...]] Get/set per-interface DNSSEC NTA revert LINK Revert per-interface configuration log-level [LEVEL] Get/set logging threshold for systemd-resolved ...","title":"Some basic networking tasks after setting up a virtual machine or server enviroment"},{"location":"notes/manage.html#regional-settings","text":"Some services that run on servers depend on time zone settings to work correctly. It's important, when planing the virtual or server environment to set it up properly. localectl : localectl - Control the system locale and keyboard layout settings Full list of commands How to set it up? Check current regional settings [test@test-PC ~]$ localectl status System Locale: LANG=hr_HR.UTF-8 VC Keymap: croat X11 Layout: hr List avaliable locales and keymaps - keyboard layouts [test@test-PC ~]$ localectl list-locales en_US.UTF-8 hr_HR.UTF-8 [test@test-PC ~]$ localectl list-keymaps ANSI-dvorak adnw amiga-de amiga-us apple-a1048-sv apple-a1243-sv apple-a1243-sv-fn-reverse apple-internal-0x0253-sv apple-internal-0x0253-sv-fn-reverse applkey atari-de atari-se ... Set the needed locale configuration [test@test-PC ~]$ localectl set-locale hr_HR.UTF-8 [test@test-PC ~]$ localectl set-x11-keymap hr [test@test-PC ~]$ setxkbmap hr Generate the locale config file [test@test-PC ~]$ locale-gen What about timezone? Use timedatectl command to set it: timedatectl set-timezone Europe/Zagreb Also note, Regional setting can be defined in cloud-init configuration files.","title":"Regional settings"},{"location":"notes/manage.html#managing-users-and-permissions","text":"Let's try managing users in a VM created using GUI tool -> virt-manager. Requirements: Virt-manager and ArchLinux VM Cloud-init: user data: #cloud-config users: - default system_info: default_user: name: myuser plain_text_passwd: '1234' gecos: arch Cloud User groups: [wheel, adm] sudo: [\"ALL=(ALL) NOPASSWD:ALL\"] shell: /bin/bash lock_passwd: False Note: Cloud-init is sensitive with tab spaces and requires a empty line at the end of file Make cloud-init.iso file: xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data Copy downloaded Arch system image (qcow2) in home directory and rename it to aarch.qcow2 Add more space to image: qemu-img resize aarch.qcow2 +10G Then in virt-manager: Use existing image -> aarch.qcow2 -> archlinux -> 1GB/2 cores -> Customize configuration before install -> Add cloud-init.iso and make it a CDROM type Then start ArchLinx VM and login with SSH from terminal on host to it: ssh myuser@IPadressOfVM Be careful when configuring users -> detect which user has permissions and what permissions does he have. ! in /etc/shadow file mean that the user is forbiden to login into the system User has permission to access ports from 1024, system uses ports to 1024. kvm group in etc/groups exists for using nested virtualization /dev/vd* - Linux way of mapping path to hard drives -> user dosen't have acess to disk, but has to filesystem! Working with users: In Unix-like operating systems, the chmod command sets the permissions of files or directories. Syntax: chmod ugo -rwx Where: ugo specifies a user, group of users or others -rwx specifies allowed operations: read, write, execute On Unix-like operating systems, the chown command changes ownership of files and directories in a filesystem. Syntax: chown parameters user Removing ownership: [myuser@archlinux ~]$ chmod -R go-r ftp ftp/ [myuser@archlinux ~]$ chmod -R go-- ftp ftp/ Where: go-r removes reading permissions go-- removes all permisions On Unix-like operating systems, the usermod command modifies a user account. Syntax: [myuser@archlinux ~]$ sudo usermod -aG video myuser Adds user \"myuser\" to group \"video\" [myuser@archlinux ~]$ grep video /etc/group video:x:985:myuser On Unix-like operating systems, the useradd command creates a new user or sets the default information for new users. Syntax: useradd user -c \"Basic User\" -s /bin/bash -m Where \"Basic User\" is description of the user, -s which shell will he use, -m creates a home directory for him. To add password for user \"user\" use: passwd user To block user loging into the system use: usermod -s /bin/false user /bin/false does nothing and it just exits with a status code indicating failure when a user attempts to login to the machine. To view all devices attached to system use: ls -la /dev To view all users in the system use: [test@test-PC ~]$ userdbctl NAME DISPOSITION UID GID REALNAME HOME SHELL root intrinsic 0 0 - /root /usr/bin/zsh nobody intrinsic 65534 65534 Nobody / /usr/bin/nologin bin system 1 1 - / /usr/bin/nologin daemon system 2 2 - / /usr/bin/nologin mail system 8 12 - /var/spool/mail /usr/bin/nologin ftp system 14 11 - /srv/ftp /usr/bin/nologin rpc system 32 32 Rpcbind Daemon /var/lib/rpcbind /usr/bin/nologin http system 33 33 - /srv/http /usr/bin/nologin named system 40 40 BIND DNS Server / /usr/bin/nologin uuidd system 68 68 - / /usr/bin/nologin dbus system 81 81 System Message Bus / /usr/bin/nologin polkitd system 102 102 PolicyKit daemon / /usr/bin/nologin partimag system 110 110 Partimage user / /usr/bin/nologin rtkit system 133 133 RealtimeKit /proc /usr/bin/nologin usbmux system 140 140 usbmux user / /usr/bin/nologin nvidia-persistenced system 143 143 NVIDIA Persistence Daemon / /usr/bin/nologin cups system 209 209 cups helper user / /usr/bin/nologin saned system 962 962 SANE daemon user / /usr/bin/nologin libvirt-qemu system 964 964 Libvirt QEMU user / /usr/bin/nologin sddm system 968 968 Simple Desktop Display Manager /var/lib/sddm /usr/bin/nologin openvpn system 969 969 OpenVPN / /usr/bin/nologin nbd system 970 970 Network Block Device /var/empty /usr/bin/nologin git system 971 971 git daemon user / /usr/bin/git-shell dnsmasq system 972 972 dnsmasq daemon / /usr/bin/nologin dhcpcd system 973 973 dhcpcd privilege separation / /usr/bin/nologin avahi system 974 974 Avahi mDNS/DNS-SD daemon / /usr/bin/nologin tss system 975 975 tss user for tpm2 / /usr/bin/nologin systemd-timesync system 976 976 systemd Time Synchronization / /usr/bin/nologin systemd-resolve system 977 977 systemd Resolver / /usr/bin/nologin systemd-journal-remote system 978 978 systemd Journal Remote / /usr/bin/nologin systemd-oom system 979 979 systemd Userspace OOM Killer / /usr/bin/nologin systemd-network system 980 980 systemd Network Management / /usr/bin/nologin systemd-coredump system 981 981 systemd Core Dumper / /usr/bin/nologin test regular 1000 1000 Test /home/test /bin/bash To kill all processes for a user session and deallocate the resources use: loginctl kill-user user For those who want to know more: Users interact with the system using GUI or by terminal interface. Here you can find out more about terminal devices avaliable to users. More simultaneous users with keyboards and screens on one PC? No problem! Multi-seat .","title":"Managing users and permissions"},{"location":"notes/manage.html#systemd","text":"Quoting materials given for homework from doc. dr. Vedran Mileti\u0107 @ UniRi - Faculty of Informatics and Digital Technologies modern operating systems based on Linux kernel use systemd for managing processes, specifically starting services on system startup. Systemd ecosystem A set of programs called systemd actually contains a number of interconnected and somewhat independent tools, the most important of which are: systemd init process, it is the first process to run the Linux kernel after loading and it is in charge of starting and managing the life of other processes systemd services, which are files for defining requests, sequences and instructions for running other processes required for system operation systemctl tool, for viewing and managing defined service states *journalctl tool, to view system events and service-related events Service: A unit configuration file whose name ends in .service encodes information about a process controlled and supervised by systemd. Target: A unit configuration file whose name ends in \".target\" encodes information about a target unit of systemd, which is used for grouping units and as well-known synchronization points during start-up. These both refer to unit configuration files, which are: A unit configuration file encodes information about a service, a socket, a device, a mount point, an automount point, a swap file or partition, a start-up target, a watched file system path, a timer controlled and supervised by systemd(1), a resource management slice or a group of externally created processes. Systemd unit is a configuration file used to implement startup services and goals: services that run daemon processes are defined by * .service files, startup targets are defined by * .target files.","title":"Systemd"},{"location":"notes/manage.html#how-services-work","text":"","title":"How services work?"},{"location":"notes/manage.html#pipeline","text":"A pipe is a form of redirection (transfer of standard output to some other destination) that is used in Linux and other Unix-like operating systems to send the output of one command/program/process to another command/program/process for further processing. Pipe is used to combine two or more commands, and in this, the output of one command acts as input to another command, and this command\u2019s output may act as input to the next command and so on. It can also be visualized as a temporary connection between two or more commands/ programs/ processes. The command line programs that do the further processing are referred to as filters. This direct connection between commands/ programs/ processes allows them to operate simultaneously and permits data to be transferred between them continuously rather than having to pass it through temporary text files or through the display screen. Every service, process, program is connected to a service bus. User service bus: [root@archlinux ~]# stat /run/user/0/bus File: /run/user/0/bus Size: 0 Blocks: 0 IO Block: 4096 socket Device: 0,48 Inode: 16 Links: 1 Access: (0666/srw-rw-rw-) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2022-03-11 14:13:08.986285110 +0000 Modify: 2022-03-11 14:13:08.986285110 +0000 Change: 2022-03-11 14:13:08.986285110 +0000 Birth: - To list all bus connections viewed by process and the user who started it use: [test@test-PC ~]$ busctl NAME PID PROCESS USER CONNECTION UNIT > :1.0 481 systemd-resolve systemd-resolve :1.0 systemd-resolved.> :1.1 472 systemd-network systemd-network :1.1 systemd-networkd.> :1.11 635 sddm root :1.11 sddm.service > :1.118 3444 sudo root :1.118 user@1000.service> :1.119 3448 busctl root :1.119 user@1000.service> :1.12 647 Xorg root :1.12 sddm.service > :1.16 803 systemd test :1.16 user@1000.service> :1.18 855 kded5 test :1.18 session-1.scope > :1.19 858 kwin_x11 test :1.19 session-1.scope > :1.2 1 systemd root :1.2 init.scope > :1.20 896 polkitd polkitd :1.20 polkit.service > :1.21 890 ksmserver test :1.21 session-1.scope > ... Busctl - active mutual communication of processes locally, where they are connected, etc. [Any]ctl - bus in which a SERVICE communicate with a SERVICEd (daemon) machinectl is \"systemd's docker\" coredumpctl - coredumpctl is a tool that can be used to retrieve and process core dumps and metadata which were saved by systemd-coredump Socket Statistics ss -l: Ss is an abbreviation for Socket Statistics. As the name suggests, the ss command can be used to get socket statistics, which can display something similar to netstat. The advantage of ss is that it can display more detailed information about TCP and connection status, and is faster and more efficient than netstat. When the number of socket connections on the server becomes very large, either using the netstat command or directly cat /proc/net/tcp, the execution speed will be slow.","title":"Pipeline"},{"location":"notes/manage.html#some-systemd-units","text":"[root@archlinux ~]# ls /usr/bin/*ctl /usr/bin/auditctl /usr/bin/journalctl /usr/bin/oomctl /usr/bin/userdbctl /usr/bin/bootctl /usr/bin/keyctl /usr/bin/portablectl /usr/bin/wdctl /usr/bin/busctl /usr/bin/localectl /usr/bin/resolvectl /usr/bin/zramctl /usr/bin/coredumpctl /usr/bin/loginctl /usr/bin/sysctl /usr/bin/homectl /usr/bin/machinectl /usr/bin/systemctl /usr/bin/hostnamectl /usr/bin/networkctl /usr/bin/timedatectl oomctl may be used to get information about the various contexts read in by the systemd(1) userspace out-of-memory (OOM) killer, systemd-oomd(8). e.g. when service mariadb crashes, view why it crashes. oomctl - \"OOM KILLER\" - deletes the service that uses a lot of system memory","title":"Some systemd units"},{"location":"notes/manage.html#systemd-startup-target-unit","text":"Systemd boots the system to a predefined target consisting of specific running services. The predefined launch targets are: poweroff.target (SysV runlevel0') reboot.target (SysV runlevel6) multi-user.target (SysV runlevel[234]) graphical.target (SysV runlevel5) rescure.target (SysV runlevel1) emergency.target In the general case, systemd boots the system to the default.target state, which typically points to graphical.target. The system will boot to the graphical interface and allow you to log in only if one of the display managers, such as Simple Desktop Display Manager (SDDM) and GNOME Display Manager (GDM). systemctl isolate TARGET command can be used to move the system to the desired boot destination. Services are implemented as service units, e.g. acpid.service, sshd.service. A detailed specification can be found in the systemd.service man page.","title":"Systemd startup target unit"},{"location":"notes/manage.html#syslog","text":"command rsyslog configuration file /etc/rsyslog.conf $ -- global commands $ModLoad","title":"Syslog"},{"location":"notes/manage.html#rotate-log-files","text":"command logrotate config file /etc/logrotate.conf directives that determine how often rotation occurs: daily, weekly, monthly, yearly directives that determine compression: compress, nocompress, compresscmd, uncompresscmd, compressext, compressoptions, delaycompress directive rotate NUMBER makes sure that the NUMBER of rotated files is saved, ie that the log file passes the NUMBER of rotation before deleting directive mail ADRESS allows you to send a log file by email to the ADDRESS address when rotating just before deleting","title":"Rotate log files"},{"location":"notes/manage.html#systemd-timer","text":"to automate the execution of individual services in accordance with a certain time schedule, we can use systemd units of the type timer all existing timers on the system and their states can be viewed with the systemctl list-timers command every times consists of two files located in directory /etc/systemd/system SERVICE.timer - defines the time dependency or start time of our service SERVICE.service - defines the service itself or the commands to run Through all the examples we use SERVICE as the name of our pair of timers and systemd services: enabling and starting the timer is done with the help of systemctl tools as for all other types of units: systemctl enable SERVICE.timer systemctl disable SERVICE.timer systemctl start SERVICE.timer systemctl stop SERVICE.timer Structure of systemd.timer files: the SERVICE.timer file must be located in the /etc/systemd/system directory and be of the following format: [Unit] Description=My time dependent service [Timer] # ... [Install] WantedBy=timers.target Structure of SERVICE.service files: The difference between the SERVICE.service file for using a timer from a typical systemd service file is in: SERVICE.service for timer file does not contain a section [Install] timer service It does not need to be enabled or run with systemctl, we enable and run the SERVICE.timer unit instead Example format: [Unit] # ... [Service] # ... There are two types of timers: relative for a event defined for a specific time Parameters for a timer defined relative to an event: OnActiveSec - relative to the start time of the timer itself OnBootSec - relative to the start time of OS boot OnStartupSec - relative to starting systemd process OnUnitActiveSec - relative to the time of last unit start OnUnitInactiveSec - relative to the time of last unit stop OnCalendar - defined for a specific date-time Relative times are defined by combinig time measurement units: 1h 20m or 5 s Specific times can be defined generically or specifically by valuess: hourly, daily, weekly, monthly, 2003-03-05 05:40","title":"Systemd timer"},{"location":"notes/manage.html#systemd-journal","text":"Journal (daemon systemd-journald) is a component of systemd in charge of viewing and managing log files a replacement for Syslog, although systems can use both The systemd-journald service collects and stores log data and associated metadata in binary form The journalctl tool is used to view log files Output structure similar to / var / log / messages High-priority messages are highlighted visually (red, bold) Times are translated to the local time zone All data is displayed, including rotated log files journalctl -n NUMBER displays only the last NUMBER of messages journalctl -o FORM shows the output in the form of FORM, where FORM can be verbose, export, json, ... journalctl -f tracks messages as they are created","title":"Systemd Journal"},{"location":"notes/manage.html#rsync-backup-service","text":"rsync is an open source tool for efficient incremental data transfer. It is very useful as a data backup tool. When used for backup, a very important parameter is --archive, or -a which stores metadata about files Usage: rsync -a /myDirIwantToBackup /backupDir","title":"Rsync backup service"},{"location":"notes/manage.html#starting-units-on-boot","text":"","title":"Starting units on boot"},{"location":"notes/manage.html#example-1-reflector","text":"Reflector is a Python script which can retrieve the latest mirror list from the Arch Linux Mirror Status page, filter the most up-to-date mirrors, sort them by speed and overwrite the file /etc/pacman.d/mirrorlist. [fidit@archlinux ~]$ systemctl status reflector-init.service \u25cf reflector-init.service - Initializes mirrors for the VM Loaded: loaded (/etc/systemd/system/reflector-init.service; enabled; vendor preset: disabled) Active: active (exited) since Fri 2022-04-22 12:15:47 UTC; 8min ago Process: 692 ExecStart=reflector --latest 20 --protocol https --sort rate --save /etc/pacman.d/m> Main PID: 692 (code=exited, status=0/SUCCESS) CPU: 1.176s [fidit@archlinux ~]$ cat /etc/systemd/system/reflector-init.service [Unit] Description=Initializes mirrors for the VM After=network-online.target Wants=network-online.target Before=sshd.service cloud-final.service ConditionFirstBoot=yes [Service] Type=oneshot RemainAfterExit=yes ExecStart=reflector --latest 20 --protocol https --sort rate --save /etc/pacman.d/mirrorlist [Install] WantedBy=multi-user.target [fidit@archlinux ~]$ cat /etc/systemd/system/pacman-init.service [Unit] Description=Initializes Pacman keyring Before=sshd.service cloud-final.service ConditionFirstBoot=yes [Service] Type=oneshot RemainAfterExit=yes ExecStart=/usr/bin/pacman-key --init ExecStart=/usr/bin/pacman-key --populate archlinux [Install] WantedBy=multi-user.target Services can be executed paralelly on boot process. Services know what they depend on, it is possible to change the order. After=network-online.target cloud-config.service rc-local.service - condition what needs to be started before this service. Before=sshd.service cloud-final.service - condition before which services must this service start ConditionFirstBoot=yes - runs only on first OS boot","title":"Example 1: Reflector"},{"location":"notes/manage.html#example-2-cloud-final","text":"This stage runs as late in boot as possible. Any scripts that a user is accustomed to running after logging into a system should run correctly here. Things that run here include: package installations configuration management plugins (puppet, chef, salt-minion) user-defined scripts (e.g. shell scripts passed as user-data) [fidit@archlinux ~]$ cat /usr/lib/systemd/system/cloud-final.service [Unit] Description=Execute cloud user/final scripts After=network-online.target cloud-config.service rc-local.service Wants=network-online.target cloud-config.service [Service] Type=oneshot ExecStart=/usr/bin/cloud-init modules --mode=final RemainAfterExit=yes TimeoutSec=0 KillMode=process TasksMax=infinity # Output needs to appear in instance console output StandardOutput=journal+console [Install] WantedBy=cloud-init.target [fidit@archlinux ~]$ cat /usr/lib/systemd/system/cloud-config.service [Unit] Description=Apply the settings specified in cloud-config After=network-online.target cloud-config.target After=snapd.seeded.service Wants=network-online.target cloud-config.target [Service] Type=oneshot ExecStart=/usr/bin/cloud-init modules --mode=config RemainAfterExit=yes TimeoutSec=0 # Output needs to appear in instance console output StandardOutput=journal+console [Install] WantedBy=cloud-init.target List dependencies of a service: [fidit@archlinux ~]$ systemctl list-dependencies cloud-init.target cloud-init.target \u25cf \u251c\u2500cloud-config.service \u25cf \u251c\u2500cloud-final.service \u25cf \u251c\u2500cloud-init-local.service \u25cf \u2514\u2500cloud-init.service","title":"Example 2: cloud-final"},{"location":"notes/manage.html#disks-and-zfs","text":"Let's add some storage to our VM. We will add 5 disks using virt-manager Linux stores all connected disks into the directory /dev/disk. You can view the disks by id, label, partition UUID or disk UUID. In a virtual machine disks are stored in /dev/vd where is the number of a drive Let's view all disks and their info in the system: [test@test-PC ~]$ sudo fdisk -l Disk /dev/vda: 12 GiB, 12884901888 bytes, 25165824 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: 902FD2FE-154A-4635-9BF8-3FAB93BA67FC Device Start End Sectors Size Type /dev/vda1 2048 4095 2048 1M BIOS boot /dev/vda2 4096 25165790 25161695 12G Linux filesystem Disk /dev/vdb: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/vdc: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/vdd: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk /dev/vde: 1 GiB, 1073741824 bytes, 2097152 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes We will now create a RAID disk pool using ZFS. ZFS: ZFS - ArchWiki - pay atention to the Linux kernel version and edition ZFS needs to be compiled on the system and binds itself to the system hardware. Linux kernel versions: linux, lts, zen (multimedia), dkms - more on that later Why ZFS? No technical filesystem limits (as of today), portable, fast etc. Has built-in Volume manager What's my Linux Kernel?: [test@test-PC ~]$uname -a Linux archlinux 5.17.1-arch1-1 #1 SMP PREEMPT Mon, 28 Mar 2022 20:55:33 +0000 x86_64 GNU/Linux","title":"Disks and ZFS"},{"location":"notes/manage.html#install-zfs","text":"Download PKGBUILD Then prerequisites: pacman -S make fakeroot patch autoconf automake dkms nano Download 0001-only-build-the-module-in-dkms patch. curl -o 0001-only-build-the-module-in-dkms.conf.patch \"https://aur.archlinux.org/cgit/aur.git/plain/0001-only-build-the-module-in-dkms.conf.patch?h=zfs-dkms\" Problems with GPG package : For signing use: link pacman-key --recv-keys keyid or gpg --recv-keys keyid The key on 27.04.2022. was: 6AD860EED4598027 4. Install ZFS Utils curl -o zfs.initcpio.hook \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.hook?h=zfs-utils\" curl -o zfs.initcpio.install \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.install?h=zfs-utils\" nano PKGBUILD-utils -> https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-utils makepkg -p PKGBUILD-utils Then build and install ZFS makepkg sudo pacman -U zfs-dkms-2.1.4-1-any.pkg.tar.zst zfs-utils-2.1.4-1-x86_64.pkg.tar.zst Test does ZFS even work? sudo modprobe zfs No? That's because of Kernel Headers install them with: pacman -S linux-headers Kernel Headers are used when various modules are using (connecting) to the Linux kernel - let's say they are the same as libraries in programming languages. * RAID pool Let's create a zpool. ZFS is dividen in two layers: ZFS - High layer Zpool - low level Zpool is..? ZFS filesystems are built on top of virtual storage pools called zpools. A zpool is constructed of virtual devices (vdevs), which are themselves constructed of block devices: files, hard drive partitions, or entire drives, with the last being the recommended usage. RAID-Z - software RAID inside ZFS. Best for data recovery because it dosen't depend on a physical RAID controller. It has features like: Parity disks Data deduplication - if finds multiple copies of the same file, leaves only one, deletes others and creates symbolic links to the one kept in RAID pool. Auto-compression (lz4 and zstd) Setup all disks for ZFS and create a pool on disk vdb: fdisk /dev/vd[bcde] - Typed in: g, n, 1, enter, enter, t, L, 157 \"Solaris /usr and Apple ZFS\", w zpool create mypool /dev/vdb What have we done? [user@archlinux ~]$ fdisk -l /dev/vd[bcde] | grep ZFS /dev/vdb1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS /dev/vdc1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS /dev/vdd1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS /dev/vde1 2048 2095103 2093056 1022M Solaris /usr & Apple ZFS [user@archlinux ~]$ zpool create mojbazen /dev/vdb [user@archlinux ~]$ zpool list NAME SIZE ALLOC FREE CKPOINT EXPANDSZ FRAG CAP DEDUP HEALTH ALTROOT mypool 960M 120K 960M - - 0% 0% 1.00x ONLINE - Delete a pool: zpool destroy mypool Let's create a RAID mirrored pool and mount it to the point /mypool: zpool create -m /mypool mypool mirror /dev/vdb1 /dev/vdc1 mount | grep poo mypool on /mypool type zfs (rw,xattr,noacl) zpool list NAME SIZE ALLOC FREE CKPOINT EXPANDSZ FRAG CAP DEDUP HEALTH ALTROOT mypool 960M 120K 960M - - 0% 0% 1.00x ONLINE - Let's create one directory and one file and give ourselfs ownership over the file in that mounted directory: [fidit@archlinux ~]$ cd /mypool [fidit@archlinux mypool]$ ls [fidit@archlinux mypool]$ sudo mkdir mydir [fidit@archlinux mypool]$ sudo touch myfile [fidit@archlinux mypool]$ ls myfile mydir [fidit@archlinux mypool]$ ls -la total 18 drwxr-xr-x 3 root root 4 Apr 1 14:17 . drwxr-xr-x 1 root root 146 Apr 1 14:15 .. -rw-r--r-- 1 root root 0 Apr 1 14:17 myfile drwxr-xr-x 2 root root 2 Apr 1 14:16 mydir [fidit@archlinux mypool]$ chown fidit:fidit myfile We will now list our pool: [fidit@archlinux mypool]$ zpool list NAME SIZE ALLOC FREE CKPOINT EXPANDSZ FRAG CAP DEDUP HEALTH ALTROOT mypool 960M 153K 960M - - 0% 0% 1.00x ONLINE - How to attach detach more disks to the pool: [fidit@archlinux mypool]$ zpool attach mypool /dev/vdd1 [fidit@archlinux mypool]$ sudo zpool detach mypool vdb1 [fidit@archlinux mypool]$ sudo zpool add mypool vdb1 [fidit@archlinux mypool]$ sudo zpool add mypool vde1 We created a RAID-0 stripe: [fidit@archlinux mypool]$ zpool status pool: mypool state: ONLINE config: NAME STATE READ WRITE CKSUM mypool ONLINE 0 0 0 vdc1 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vde1 ONLINE 0 0 0 Extending mirrors: [fidit@archlinux ~]$ sudo zpool destroy mypool [fidit@archlinux ~]$ sudo zpool create -m /mypool mypool mirror /dev/vdb1 /dev/vdc1 [fidit@archlinux ~]$ sudo zpool attach mypool /dev/vdc1 /dev/vdd1 [fidit@archlinux ~]$ zpool status pool: mypool state: ONLINE scan: resilvered 232K in 00:00:00 with 0 errors on Fri Apr 1 14:46:44 2022 config: NAME STATE READ WRITE CKSUM mypool ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vdc1 ONLINE 0 0 0 vdd1 ONLINE 0 0 0","title":"Install ZFS"},{"location":"notes/manage.html#raid-z","text":"This is a non-standard RAID that uses the ZFS file system; no other file system can be used for this array. Note that there is not a single hardware controller that implements RAID-Z. The ZFS file system uses an additional level of checksums to search for data corruption without displaying the appropriate messages. ZFS uses checksums with any level of redundancy, including single disk pools. The distribution mechanism is similar to RAID 5, but it uses dynamic bandwidth. Any block, regardless of its size, has its own RAID bandwidth, which means that each RAID-Z record is a full-band record. source How to create RAID-Z pool: sudo zpool create -m /mypool mypool raidz /dev/vdb1 /dev/vdc1 /dev/vdd1 /dev/vde1 So what about parity? If you have up to 5 disks only one parity drive is needed If you have 6 - 8 disks -> 2 parity drives 8+ disks -> 3 parity and more.. Those parity disks are usually the same size RAID-Z variants: RAID-Z RAID-Z2 *RAID-Z3 In RAID-Z, files are never divided exactly in half, but the data is treated as blocks of a fixed length. The minimum number of disks you can use is three. Three drives are usually combined into a virtual device (vdev). RAID-Z (sometimes called RAID-Z1) will provide a record of each unique data block so that it can recover from the failure of any single disk on vdev. In this case, the data is automatically distributed across the disk in the most optimal way. RAID-Z1 is practically an analogue of RAID 5, as it uses single parity. It is not difficult to guess that fault tolerance will be the same; i.e., there may be a possible failure of a drive. RAID-Z2 is more fault-tolerant, as it uses two parity blocks and two data blocks from one piece of information. This is an analogue of RAID 6 and can also withstand the collapse of as many as two disks. In RAID-Z2, the maximum number of disks is at least four. You can go further and try RAID-Z3, which has a maximum of at least five disks and the ability to survive damage to up to three disks. RAID-Z3 is rarely used due to its size. It is also not as space-efficient as other RAID-Z options. source How to create RAID-Z2: [fidit@archlinux ~]$ sudo zpool create -m /mypool mypool raidz2 /dev/vdb1 /dev/vdc1 /dev/vdd1 /dev/vde1 [fidit@archlinux ~]$ df -h Filesystem Size Used Avail Use% Mounted on dev 478M 0 478M 0% /dev run 485M 796K 485M 1% /run /dev/vda2 12G 2.4G 9.3G 21% / tmpfs 485M 0 485M 0% /dev/shm tmpfs 485M 0 485M 0% /tmp tmpfs 97M 0 97M 0% /run/user/1000 mypool 1.8G 128K 1.8G 1% /mypool [fidit@archlinux ~]$ sudo zpool status pool: mypool state: ONLINE config: NAME STATE READ WRITE CKSUM mypool ONLINE 0 0 0 raidz2-0 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vdc1 ONLINE 0 0 0 vdd1 ONLINE 0 0 0 vde1 ONLINE 0 0 0 RAID-Z3: [fidit@archlinux sudo zpool create -m /mypool raidz3 /dev/vdb1 /dev/vdc1 /dev/vdd1 /dev/vde1 [fidit@archlinux ~]$ df -h Filesystem Size Used Avail Use% Mounted on dev 478M 0 478M 0% /dev run 485M 796K 485M 1% /run /dev/vda2 12G 2.4G 9.3G 21% / tmpfs 485M 0 485M 0% /dev/shm tmpfs 485M 0 485M 0% /tmp tmpfs 97M 0 97M 0% /run/user/1000 mypool 832M 128K 832M 1% /mypool Set compression method on a ZFS pool: [fidit@archlinux ~]$ sudo zfs set compression=zstd mypool Security mechanisms Resilvering - zfs reads data from all devices and makes sure that all of it can be read correctly (no errors, proper checksums etc.) Scrubbing and resilvering are very similar operations. The difference is that resilvering only examines data that ZFS knows to be out of date (for example, when attaching a new device to a mirror or replacing an existing device), whereas scrubbing examines all data to discover silent errors due to hardware faults or disk failure. Because scrubbing and resilvering are I/O-intensive operations, ZFS only allows one at a time. A scrub is split into two parts: metadata scanning and block scrubbing. The metadata scanning sorts blocks into large sequential ranges which can then be read much more efficiently from disk when issuing the scrub I/O. source How to? sudo zpool resilver mypool sudo zpool scrub mypool","title":"RAID-Z"},{"location":"notes/manage.html#optimizing-kernel","text":"Kernel? Linux Kernel web ArchLinux always uses the latest kernel. Officially supported kernels Stable \u2014 Vanilla Linux kernel and modules, with a few patches applied. Hardened \u2014 A security-focused Linux kernel applying a set of hardening patches to mitigate kernel and userspace exploits. It also enables more upstream kernel hardening features than linux. Longterm \u2014 Long-term support (LTS) Linux kernel and modules. Zen Kernel For every server that is used for providing some kind of service, it is recomended that it runs on a Long-term supported Linux kernel. How to install long term support linux kernel? First install LTS kernel: sudo pacman -S linux-lts Then edit /boot/grub/grub.cfg: linux /boot/vmlinuz-linux-lts root=UUID=ef9af0ad-7937-442e-af1e-0f71094122b2 rw net.ifname> initrd /boot/initramfs-linux-lts.img Linux will now boot with the LTS kernel, previously used kernel (linux linux - latest) is avaliable in GNU GRUB startup menu. GNU GRUB is: GNU GRUB is a Multiboot boot loader. It was derived from GRUB, the GRand Unified Bootloader, which was originally designed and implemented by Erich Stefan Boleyn. Briefly, a boot loader is the first software program that runs when a computer starts. It is responsible for loading and transferring control to the operating system kernel software. It can be run in: BIOS mode UEFI mode Gummiboot instead of GRUB? (systemd's Gummiboot) -> GRUB and systemd bootloaders are not the same, Arch uses it's own bootloader. In the boot process you can notice initramfs and vmliuz.. what is that? initramfs linux fallback - kernel modules that are required by your PC's (server, VM etc.) hardware vmlinuz - Linux Kernel - same on every computer running that kernel version","title":"Optimizing Kernel"},{"location":"notes/manage.html#analyzing-boot-times","text":"To view detail specification about loading times for all system and user services use: systemd-analyze blame If you want a graph of the system booting process: systemd-analyze dot systemd-analyze plot > graph.svg You can see some red coloured items. They are part of the Critical-chain. What is the Critical-chain? Basically this. \"+\" shows how much seconds has been added to the boot time and @ shows when did a service started compared to booting.","title":"Analyzing boot times"},{"location":"notes/manage.html#analyzing-service-security","text":"To view the security state of all services use: [fidit@archlinux ~]$ systemd-analyze security UNIT EXPOSURE PREDICATE HAPPY auditd.service 8.7 EXPOSED \ud83d\ude41 dbus.service 9.6 UNSAFE \ud83d\ude28 dm-event.service 9.5 UNSAFE \ud83d\ude28 emergency.service 9.5 UNSAFE \ud83d\ude28 getty@tty1.service 9.6 UNSAFE \ud83d\ude28 rescue.service 9.5 UNSAFE \ud83d\ude28 shadow.service 9.6 UNSAFE \ud83d\ude28 sshd.service 9.6 UNSAFE \ud83d\ude28 systemd-ask-password-console.service 9.4 UNSAFE \ud83d\ude28 systemd-ask-password-wall.service 9.4 UNSAFE \ud83d\ude28 systemd-homed.service 5.8 MEDIUM \ud83d\ude10 systemd-journald.service 4.3 OK \ud83d\ude42 systemd-logind.service 2.8 OK \ud83d\ude42 systemd-networkd.service 2.6 OK \ud83d\ude42 systemd-resolved.service 2.1 OK \ud83d\ude42 systemd-rfkill.service 9.4 UNSAFE \ud83d\ude28 systemd-timesyncd.service 2.1 OK \ud83d\ude42 systemd-udevd.service 6.7 MEDIUM \ud83d\ude10 systemd-userdbd.service 2.2 OK \ud83d\ude42 user@1000.service 9.4 UNSAFE \ud83d\ude28 To view the security state and parameters of a specific service use: [fidit@archlinux ~]$ systemd-analyze security sshd.service NAME DESCRIPTION > \u2717 RootDirectory=/RootImage= Service runs within the host's root di> SupplementaryGroups= Service runs as root, option does not > RemoveIPC= Service runs as root, option does not > \u2717 User=/DynamicUser= Service runs as root user > \u2717 CapabilityBoundingSet=~CAP_SYS_TIME Service processes may change the syste> \u2717 NoNewPrivileges= Service processes may acquire new priv> \u2713 AmbientCapabilities= Service process does not receive ambie> \u2717 PrivateDevices= Service potentially has access to hard> \u2717 ProtectClock= Service may write to the hardware cloc> \u2717 CapabilityBoundingSet=~CAP_SYS_PACCT Service may use acct() > \u2717 CapabilityBoundingSet=~CAP_KILL Service may send UNIX signals to arbit> \u2717 ProtectKernelLogs= Service may read from or write to the > \u2717 CapabilityBoundingSet=~CAP_WAKE_ALARM Service may program timers that wake u> \u2717 CapabilityBoundingSet=~CAP_(DAC_*|FOWNER|IPC_OWNER) Service may override UNIX file/IPC per> \u2717 ProtectControlGroups= Service may modify the control group f> \u2717 CapabilityBoundingSet=~CAP_LINUX_IMMUTABLE Service may mark files immutable > \u2717 CapabilityBoundingSet=~CAP_IPC_LOCK Service may lock memory into RAM > \u2717 ProtectKernelModules= Service may load or read kernel module> \u2717 CapabilityBoundingSet=~CAP_SYS_MODULE Service may load kernel modules > \u2717 CapabilityBoundingSet=~CAP_SYS_TTY_CONFIG Service may issue vhangup() > \u2717 CapabilityBoundingSet=~CAP_SYS_BOOT Service may issue reboot() > \u2717 CapabilityBoundingSet=~CAP_SYS_CHROOT Service may issue chroot() > \u2717 PrivateMounts= Service may install system mounts > \u2717 SystemCallArchitectures= Service may execute system calls with > \u2717 CapabilityBoundingSet=~CAP_BLOCK_SUSPEND Service may establish wake locks > \u2717 MemoryDenyWriteExecute= Service may create writable executable> \u2717 RestrictNamespaces=~user Service may create user namespaces > \u2717 RestrictNamespaces=~pid Service may create process namespaces > \u2717 RestrictNamespaces=~net Service may create network namespaces > \u2717 RestrictNamespaces=~uts Service may create hostname namespaces> \u2717 RestrictNamespaces=~mnt Service may create file system namespa> \u2717 CapabilityBoundingSet=~CAP_LEASE Service may create file leases > \u2717 CapabilityBoundingSet=~CAP_MKNOD Service may create device nodes > \u2717 RestrictNamespaces=~cgroup Service may create cgroup namespaces > \u2717 RestrictSUIDSGID= Service may create SUID/SGID files > \u2717 RestrictNamespaces=~ipc Service may create IPC namespaces > \u2717 ProtectHostname= Service may change system host/domainn> \u2717 CapabilityBoundingSet=~CAP_(CHOWN|FSETID|SETFCAP) Service may change file ownership/acce> \u2717 CapabilityBoundingSet=~CAP_SET(UID|GID|PCAP) Service may change UID/GID identities/> \u2717 LockPersonality= Service may change ABI personality > \u2717 ProtectKernelTunables= Service may alter kernel tunables > \u2717 RestrictAddressFamilies=~AF_PACKET Service may allocate packet sockets > \u2717 RestrictAddressFamilies=~AF_NETLINK Service may allocate netlink sockets > \u2717 RestrictAddressFamilies=~AF_UNIX Service may allocate local sockets > \u2717 RestrictAddressFamilies=~\u2026 Service may allocate exotic sockets > \u2717 RestrictAddressFamilies=~AF_(INET|INET6) Service may allocate Internet sockets > \u2717 CapabilityBoundingSet=~CAP_MAC_* Service may adjust SMACK MAC > \u2717 RestrictRealtime= Service may acquire realtime schedulin> SSHD is executed as root user at the port 22 To ensure that some services don't go crazy while working use capatibilities in security It's only restricted on that specific local machine","title":"Analyzing service security"},{"location":"notes/manage.html#editing-boot-options","text":"Editing GRUB boot options /boot/grub/grub.cfg Just in case, if you break something, edit the 1st of Advanced options in GRUB config menuentry - Submenu. For pracice we will edit the following in the line that begins with linux: Read-write to read-only - ro - simulate disk error (when it occurs probably disks in the server are bad.) Parameter 1 - rescue mode Parameter 3 - no GUI option net.ifnames=1 - net.ifnames tells systemd to create predictable NIC names linux /boot/vmlinuz-linux root=UUID=dcf21c7c-7209-49d1-b9a6-70e4689c16a6 ro 1 3 net.ifnames=1 quiet resume=UUID=91f4> Let's see can we boot to GUI? [fidit@archlinux ~]$ systemctl get-default graphical.target Note: found \"3\" on the kernel commandline, which overrides the default unit. List all modules: lsmod View info about a specific module: modinfo name [lljubojevic@Ljubojevic-PC ~]$ modinfo kvm filename: /lib/modules/5.17.4-arch1-1/kernel/arch/x86/kvm/kvm.ko.zst license: GPL author: Qumranet srcversion: 6121525AFDBD6FA12A6EA40 depends: irqbypass retpoline: Y intree: Y name: kvm vermagic: 5.17.4-arch1-1 SMP preempt mod_unload sig_id: PKCS#7 signer: Build time autogenerated kernel key sig_key: 36:76:4D:01:56:28:F8:D4:45:6E:7C:84:4E:B4:8A:6F:98:D8:6D:FD sig_hashalgo: sha512 signature: 30:64:02:30:4F:1A:2B:11:FE:3F:49:47:A2:26:BE:8A:87:F5:62:60: F9:15:74:57:BA:47:F2:B9:95:3E:25:78:4E:7D:1E:41:CF:C4:5B:FB: BC:91:BD:2F:CE:BF:1E:70:B5:93:A4:E5:02:30:41:5D:E7:62:8B:60: B3:15:09:19:3E:6D:13:A2:54:26:66:2F:3E:FF:12:74:47:10:6F:71: 97:BC:24:EF:62:A4:58:15:7A:0B:27:5F:FC:F2:B0:2C:9E:A0:1D:D9: 9E:73 parm: tdp_mmu:bool parm: mmio_caching:bool parm: nx_huge_pages:bool parm: nx_huge_pages_recovery_ratio:uint parm: nx_huge_pages_recovery_period_ms:uint parm: are parameters of a module For example, let's optimize our boot proces by excluding sound module (servers in most cases don't need sound): snd_intel_hda - sound module Shut it down with GRUB parameter in line linux: linux /boot/vmlinuz-linux root=UUID=dcf21c7c-7209-49d1-b9a6-70e4689c16a6 snd-hda-intel.enable=0 quiet resume=UUID=91f4 Test: dmesg | grep snd","title":"Editing boot options"},{"location":"notes/manage.html#blacklisting-modules","text":"Blacklisting, in the context of kernel modules, is a mechanism to prevent the kernel module from loading. This could be useful if, for example, the associated hardware is not needed, or if loading that module causes problems: for instance there may be two kernel modules that try to control the same piece of hardware, and loading them together would result in a conflict. Example: module_blacklist=kvm,btrfs,cdrom Dosen't boot? Btrfs is a filesystem and the core can't be loaded without it. Also a heads up, never delete kernels that WORK! :/ You may notice that on first boot when cloud-init is configuring the system, boot time is higher than later on. You can check if cloud-init has started on current boot with: journalctl --unit cloud-init -b That can be useful when you change cloud-init config files.","title":"Blacklisting modules"},{"location":"notes/manage.html#firewalls","text":"Layer 3 and layer 2 firewalls always analyze packet headers On Linux, software firewalls are: iptables - will be replaced with nftables nftables nftables is the modern Linux kernel packet classification framework. New code should use it instead of the legacy {ip,ip6,arp,eb}_tables (xtables) infrastructure. For existing codebases that have not yet converted, the legacy xtables infrastructure is still maintained as of 2021 netlink socket Netlink is used to transfer information between the kernel and user-space processes. It consists of a standard sockets-based interface for user space processes and an internal kernel API for kernel modules. How to use nftables firewall: nft mnl.c:60: Unable to initialize Netlink socket: Protocol not supported Fix: Reboot after system upgrade [fidit@archlinux ~]$ find /lib/modules/5.15.36-1-lts/ -name \\*tables\\* /lib/modules/5.15.36-1-lts/kernel/net/bridge/netfilter/ebtables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/ipv4/netfilter/arp_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/ipv4/netfilter/ip_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/ipv6/netfilter/ip6_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/netfilter/nf_tables.ko.zst /lib/modules/5.15.36-1-lts/kernel/net/netfilter/x_tables.ko.zst What can you do with a firewall? Create a table that supports IPv4 and IPv6: [fidit@archlinux ~]$ sudo nft add table inet my_table [fidit@archlinux ~]$ sudo nft list ruleset table inet my_table { } Create a chain: sudo nft add chain inet my_table my_chain [fidit@archlinux ~]$ sudo nft add chain inet my_table my_chain2 '{type filter hook input priority 0;}' [fidit@archlinux ~]$ sudo nft list ruleset table inet my_table { chain my_chain { } chain my_chain2 { type filter hook input priority filter; policy accept; } } [fidit@archlinux ~]$ sudo nft chain inet my_table my_chain2 '{policy drop;}' DONT DO THIS! YOU WILL DROP ALL TRAFFIC IN VM AND LOCK YOURSELF OUT:(! Chain actions: Accept Drop Reject Chains in iptables: forward, input, output -> FILTER pre/postroute -> NAT Chains in nftables: ipv4, inet, ip6 Add rules to the chain : Example 1 Let's block (drop) all ipv4 traffic from 192.168.122.1:80 Hint: http uses port 80 on layer 5, and uses tcp protocol on l4 [fidit@archlinux ~]$ sudo nft add rule inet my_table my_chain2 ip saddr 192.168.122.1 tcp dport 80 drop pacman -S nginx [fidit@archlinux ~]$ sudo systemctl start nginx [fidit@archlinux ~]$ systemctl status nginx Example 2 Explicitly Enable access to TCP port 80 from a local address sudo nft add rule inet my_table my_chain2 ip saddr 127.0.0.1 tcp dport 80 accept Example 3 Add rule that discards all udp traffic [fidit@archlinux ~]$ sudo nft add rule inet my_table my_chain2 ip protocol udp drop Example 4 Disable ssh from IP address 13.198.209.200 sudo nft add rule inet my_table my_chain2 ip saddr 193.198.209.200 tcp dport 22 reject Example 5 Disable connection from local to address 51.158.166.78 port 80 sudo nft add chain inet my_table my_chain3 '{type filter hook output priority 0;}' sudo nft add rule inet my_table my_chain3 ip daddr 51.158.166.73 tcp dport 80 drop Example 6 Block access to the address 120.240.11.25 from address 25.41.36.127. sudo nft add chain inet my_table my_chain4 '{type filter hook forward priority 0;}' sudo nft add rule inet my_table my_chain4 ip saddr 25.41.36.127 ip daddr 121.240.11.25 drop","title":"Firewalls"},{"location":"notes/manage.html#infrastructure-automation-using-ansible","text":"Tired of doing all the work manually? No problem, use infrastructure automation tools as: Terraform, Ansible, Puppet, Chef, SaltStack.. whatever you prefer. We will try Red-Hat Ansible. Let's install it: pacman -S ansible ansible-lint code We write ansible playbooks in VS Code with extension -> Remote Development v0.21.0 Process goes as following: Host (VS Code on host) connects remotely with extensions to Virtual Machine 1 that has Ansible installed. Virtual Machine 1 manages Virtual Machine 2 using Ansible How to start? In VS Code do ssh to your VM1. Then edit /etc/ansible/hosts file as following: [me] 192.168.122.225 -- your IP [others] 192.168.122.13 -- IP of VM2 You can't ping VM's by authenticating with password because it only works with SSH keys! That's why you need to generate SSH keys on both VM's and add the public keys in each other to .ssh/allowed_hosts on VM1 and VM2 Create a playbook.yaml file in VS Code: This playbook will perform a full system upgrade on both VM's --- - name: All hosts up-to-date hosts: me others become: yes tasks: - name: full system upgrade pacman: update_cache: yes upgrade: yes More on Ansible playbooks Now, let's install Apache HTTP server on VM2 and a postgresql DB on VM1: playbook1.yaml: : --- - name: Install apache hosts: others become: yes tasks: - name: install apache pacman: name: apache state: latest - name: goooo apachee ansible.builtin.service: name: httpd state: started playbook2.yaml : - name: install postgresql hosts: me become: yes tasks: - name: install postgresql pacman: name: postgresql state: latest - name: gooo postgresql ansible.builtin.service: name: postgresql state: started Playbook to install Wordpress : --- - name: Update web servers hosts: lokalna become: yes vars: ime_baze: mojabaza ime_korisnika: mojkorisnik passwd: 1234 tasks: - name: Ensure apache is at the latest version ansible.builtin.pacman: name: apache state: latest - name: Ensure that apache is started ansible.builtin.service: name: httpd state: started # - name: Download index.html from group.miletic.net # ansible.builtin.command: # cmd: curl -o /srv/http/index.html https://group.miletic.net/index.html - name: ansible.builtin.command: cmd: curl -o /srv/http/index.php https://www.miletic.net/index.txt - name: Ensure php-fpm is at the latest version ansible.builtin.pacman: name: php-fpm state: latest - name: Ensure that php-fpm is started ansible.builtin.service: name: php-fpm state: started - name: Copy httpd.conf ansible.builtin.copy: src: ./httpd.conf dest: /etc/httpd/conf/httpd.conf - name: Copy php-fpm.conf ansible.builtin.copy: src: ./php-fpm.conf dest: /etc/httpd/conf/extra/php-fpm.conf - name: Restart apache ansible.builtin.service: name: httpd state: restarted - name: pymysql ansible.builtin.pacman: name: python-pymysql state: latest - name: Ensure mariadb is at the latest version ansible.builtin.pacman: name: mariadb state: latest - name: Configure mariadb ansible.builtin.command: cmd: mariadb-install-db --user=mysql --auth-root-authentication-method=normal --basedir=/usr --datadir=/var/lib/mysql - name: Ensure that mariadb is started ansible.builtin.service: name: mariadb state: started - name: Create database user with name 'bob' and password '12345' with all database privileges community.mysql.mysql_user: name: \"{{ime_korisnika}}\" password: \"{{passwd}}\" priv: '*.*:ALL' state: present - name: Create a new database mojabaza community.mysql.mysql_db: check_implicit_admin: yes login_user: \"{{ime_korisnika}}\" login_password: \"{{passwd}}\" name: \"{{ime_baze}}\" state: present - name: install wordpress ansible.builtin.command: cmd: curl -o /tmp/wordpress.tar.gz https://hr.wordpress.org/latest-hr.tar.gz - name: wp ansible.builtin.command: cmd: tar xvf /tmp/wordpress.tar.gz -C /tmp - name: wp ansible.builtin.command: cmd: rm -r /srv/http - name: a ansible.builtin.command: cmd: mv /tmp/wordpress /srv/http - name: aaa ansible.builtin.template: src: ./wp-config.php.j2 dest: /srv/http/wp-config.php Playbook to install mediawiki : --- - name: Update web servers hosts: lokalna become: yes vars: ime_baze: mojabaza ime_korisnika: mojkorisnik passwd: 1234 tasks: - name: Ensure apache is at the latest version ansible.builtin.pacman: name: apache state: latest - name: Ensure that apache is started ansible.builtin.service: name: httpd state: started - name: Ensure php-fpm is at the latest version ansible.builtin.pacman: name: php-fpm state: latest - name: Ensure that php-fpm is started ansible.builtin.service: name: php-fpm state: started - name: Copy httpd.conf ansible.builtin.copy: src: ./httpd.conf dest: /etc/httpd/conf/httpd.conf - name: Copy php-fpm.conf ansible.builtin.copy: src: ./php-fpm.conf dest: /etc/httpd/conf/extra/php-fpm.conf - name: Restart apache ansible.builtin.service: name: httpd state: restarted - name: Install postgresql ansible.builtin.pacman: name: postgresql state: latest - name: Install postgresql ansible.builtin.pacman: name: python-psycopg2 #- name: Configure postgresql # become_user: postgres # ansible.builtin.command: # cmd: initdb -D /var/lib/postgres/data - name: Ensure that postgres is started ansible.builtin.service: name: postgresql state: started - name: Create database become: yes become_user: postgres postgresql_db: name: \"{{ime_baze}}\" - name: create db user become: yes become_user: postgres postgresql_user: state: present name: \"{{ime_korisnika}}\" password: \"{{passwd}}\" - name: Create a new database mojabaza become: yes become_user: postgres postgresql_privs: type: database database: \"{{ ime_baze }}\" roles: \"{{ ime_korisnika }}\" grant_option: no privs: all - name: install mediawiki ansible.builtin.command: cmd: curl -o /tmp/mediawiki.tar.gz https://releases.wikimedia.org/mediawiki/1.37/mediawiki-1.37.2.tar.gz - name: mwiki ansible.builtin.command: cmd: tar xvf /tmp/mediawiki.tar.gz -C /tmp #- name: a # ansible.builtin.command: # cmd: mv /tmp/mediawiki-1.37.2 /srv/http - name: caarl ansible.builtin.command: cmd: curl -o myconf.php.j2 https://gist.github.com/5154384.git - name: aaa ansible.builtin.template: src: ./myconf.php.j2 dest: /srv/http/LocalSettings.php - name: Install PHP packages vars: ekstenzija: iconv ansible.builtin.template: src: ./phpextconf.conf.j2 dest: /etc/php/php-fpm.d/{{ ekstenzija }}.conf How to add php extensions? php-fpm: /etc/php/php-fpm.d/gd.conf or /etc/php/php.ini Ansible can do many more things, check out Ansible extensions","title":"Infrastructure automation using Ansible"},{"location":"notes/moodle.html","text":"Automatization of Computer Systems Management For my Undergraduate thesis at FIDIT Rijeka I want to explore the topic of computer systems management automatization using Ansible. All my thesis work will be placed here as I work. Projektni zadatak prikazuje korake koje je potrebno provesti u jednom virtualnom stroju kako bi se konfiguriralo poslu\u017eivanje moodle platforme, ali i isto rje\u0161eno automatizacijom putem sustava Ansible. Virtualni stroj pokre\u0107e Archlinux operacijski sustav, koristi zrcaljenje pogona (eng. \u201emirror\u201c) i automatsko sigurnosno kopiranje moodle direktorija, vatrozid koji blokira sav promet van vrata 80 (HTTP), 443 (SSL, HTTPS) i 22 (SSH), MariaDB sustav za upravljanje bazom podataka, Apache web poslu\u017eitelj i PHP7.4 parser. Virtualni stroj: Preuzeti sliku sustava archlinux za poslu\u017eivanje u oblaku. Napraviti mapu projekta, preuzetu sliku sustava prekopirati u mapu i preimenovati te stvoriti datoteke user-data i meta-data za sustav pokretanja virtualnih strojeva - cloud-init: [lljubojevic@Ljubojevic-PC ~]$ mkdir projekt-urs [lljubojevic@Ljubojevic-PC ~]$ cd projekt-urs/ [lljubojevic@Ljubojevic-PC projekt-urs]$ nano user-data [lljubojevic@Ljubojevic-PC projekt-urs]$ touch meta-data [lljubojevic@Ljubojevic-PC projekt-urs]$ ls meta-data user-data Datoteka user-data je sadr\u017eaja: #cloud-config users: - default system_info: default_user: name: seminar plain_text_passwd: '1234' gecos: arch Cloud User groups: [wheel, adm] sudo: [\"ALL=(ALL) NOPASSWD:ALL\"] shell: /bin/bash lock_passwd: False Generirati sliku, u formatu ISO, s konfiguracijskim datotekama za cloud-init: [lljubojevic@Ljubojevic-PC projekt-urs]$ xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data xorriso 1.5.4 : RockRidge filesystem manipulator, libburnia project. Drive current: -outdev 'stdio:cloud-init.iso' Media current: stdio file, overwriteable Media status : is blank Media summary: 0 sessions, 0 data blocks, 0 data, 272g free Added to ISO image: file '/user-data'='/home/lljubojevic/projekt-urs/user-data' xorriso : UPDATE : 1 files added in 1 seconds Added to ISO image: file '/meta-data'='/home/lljubojevic/projekt-urs/meta-data' xorriso : UPDATE : 2 files added in 1 seconds ISO image produced: 184 sectors Written to medium : 184 sectors at LBA 0 Writing to 'stdio:cloud-init.iso' completed successfully. Pove\u0107ati prostor za pohranu na preuzetoj slici sustava: [lljubojevic@Ljubojevic-PC projekt-urs]$ qemu-img resize myaarch.qcow2 20G Image resized. Stvoriti virtualni stroj u alatu virt-manager s koracima: Import existing image - Browse local - odabrati sliku sustava Operacijski sustav: archlinux Memorija: 2048 MB - Procesor: 2 jezgre Odabrati \"Customize before install\", zatim \"Add hardware\" - Storage - izabrati ISO sliku za cloud-init - tip: cdrom Odabrati ponovno \"Add hardware\" - Storage - kreirati dva nova virtualna diska veli\u010dine 20GB - tip: VirtIO Disk Begin Installation U su\u010delju za interakciju s virtualnim strojem QEMU/KVM izvr\u0161iti prijavu na sustav i saznati IP adresu virtualnog stroja: Spojiti se s glavnog ra\u010dunala naredbom ssh i a\u017eurirati sustav: [lljubojevic@Ljubojevic-PC ~]$ ssh seminar@192.168.122.64 [seminar@archlinux ~]$ sudo pacman -Syyu ```shell ip address -> 192.168.122.62 ssh seminar@192.168.122.62 sudo pacman -Syyu Inicijalizirati diskove i particije za ZFS zrcaljenje pogona: [seminar@archlinux ~]$ sudo fdisk /dev/vdb Welcome to fdisk (util-linux 2.38). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Device does not contain a recognized partition table. Created a new DOS disklabel with disk identifier 0x4f56e4a7. Command (m for help): g Created a new GPT disklabel (GUID: AB543153-05B1-0344-939E-0B2E121700D9). Command (m for help): n Partition number (1-128, default 1): 1 First sector (2048-41943006, default 2048): Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-41943006, default 41940991): Created a new partition 1 of type 'Linux filesystem' and of size 20 GiB. Command (m for help): t Selected partition 1 Partition type or alias (type L to list all): 157 Changed type of partition 'Linux filesystem' to 'Solaris /usr & Apple ZFS'. Command (m for help): w The partition table has been altered. Calling ioctl() to re-read partition table. Syncing disks. [seminar@archlinux ~]$ sudo fdisk /dev/vdc Welcome to fdisk (util-linux 2.38). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Device does not contain a recognized partition table. Created a new DOS disklabel with disk identifier 0x0dca6cdc. Command (m for help): g Created a new GPT disklabel (GUID: 40E56ED1-5399-F14F-945A-D6F9E5FAC901). Command (m for help): n Partition number (1-128, default 1): 1 First sector (2048-41943006, default 2048): Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-41943006, default 41940991): Created a new partition 1 of type 'Linux filesystem' and of size 20 GiB. Command (m for help): t Selected partition 1 Partition type or alias (type L to list all): 157 Changed type of partition 'Linux filesystem' to 'Solaris /usr & Apple ZFS'. Command (m for help): w The partition table has been altered. Calling ioctl() to re-read partition table. Syncing disks. Instalirati sav potreban softver: [seminar@archlinux ~]$ sudo pacman -S make fakeroot patch autoconf linux-headers git automake dkms nano rsync nftables apache mariadb php7 php7-apache graphviz aspell ghostscript clamav php7-pspell php7-gd php7-intl git Dohvatiti ZFS i ZFS-utils izvorni kod iz Arclinux korisni\u010dkog repozitorija, ovjeriti klju\u010deve paketa [seminar@archlinux zfs]$ curl -o 0001-only-build-the-module-in-dkms.conf.patch \"https://aur.archlinux.org/cgit/aur.git/plain/0001-only-build-the-module-in-dkms.conf.patch?h=zfs-dkms\" [seminar@archlinux zfs]$ curl -o PKGBUILD \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-dkms\" [seminar@archlinux zfs]$ curl -o zfs.initcpio.hook \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.hook?h=zfs-utils\" % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 3620 100 3620 0 0 18612 0 --:--:-- --:--:-- --:--:-- 18564 [seminar@archlinux zfs]$ curl -o zfs.initcpio.install \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.install?h=zfs-utils\" % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2301 100 2301 0 0 10843 0 --:--:-- --:--:-- --:--:-- 10853 [seminar@archlinux zfs]$ curl -o PKGBUILD-utils \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-utils\" % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2779 100 2779 0 0 12819 0 --:--:-- --:--:-- --:--:-- 12865 [seminar@archlinux zfs]$ sudo gpg --receive-keys 6AD860EED4598027 gpg: keybox '/root/.gnupg/pubring.kbx' created gpg: /root/.gnupg/trustdb.gpg: trustdb created gpg: key 6AD860EED4598027: public key \"Tony Hutter (GPG key for signing ZFS releases) <hutter2@llnl.gov>\" imported gpg: Total number processed: 1 gpg: imported: 1 Generirati, iz izvornog koda, instalacijske pakete za ZFS i ZFS-utils i instalirati ih pomo\u0107u upravitelja paketa: [seminar@archlinux zfs]$ makepkg -p PKGBUILD-utils ==> Making package: zfs-utils 2.1.4+65.r05147319b0-1 (Thu 26 May 2022 08:52:27 AM UTC) ==> Checking runtime dependencies... ==> Checking buildtime dependencies... ==> Retrieving sources... -> Updating zfs git repo... Fetching origin -> Found zfs.initcpio.install -> Found zfs.initcpio.hook ... ==> Creating package \"zfs-utils\"... -> Generating .PKGINFO file... -> Generating .BUILDINFO file... -> Generating .MTREE file... -> Compressing package... ==> Leaving fakeroot environment. ==> Finished making: zfs-utils 2.1.4+65.r05147319b0-1 (Thu 26 May 2022 09:02:19 AM UTC) [seminar@archlinux zfs]$ makepkg -p PKGBUILD ==> Making package: zfs-dkms 2.1.4+65.r05147319b0-2 (Thu 26 May 2022 09:03:27 AM UTC) ==> Checking runtime dependencies... ==> Checking buildtime dependencies... ==> Retrieving sources... -> Updating zfs git repo... Fetching origin -> Found zfs.initcpio.install -> Found zfs.initcpio.hook ... ==> Creating package \"zfs-dkms\"... -> Generating .PKGINFO file... -> Generating .BUILDINFO file... -> Generating .MTREE file... -> Compressing package... ==> Leaving fakeroot environment. ==> Finished making: zfs-dkms 2.1.4+65.r05147319b0-2 (Thu 26 May 2022 09:10:19 AM UTC) [seminar@archlinux zfs]$ sudo pacman -U zfs-dkms-2.1.4+65.r05147319b0-2-any.pkg.tar.zst zfs-utils-2.1.4+65.r05147319b0-1-x86_64.pkg.tar.zst Ponovno pokrenuti sustav U\u010ditati zfs modul jezgre: [seminar@archlinux ~]$ sudo modprobe zfs Kreirati zrcaljenje pogona pomo\u0107u upravitelja zpool: [seminar@archlinux ~]$ sudo zpool create -m /mymirror mymirror mirror /dev/vdb1 /dev/vdc1 [seminar@archlinux ~]$ zpool status pool: mymirror state: ONLINE config: NAME STATE READ WRITE CKSUM mymirror ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vdc1 ONLINE 0 0 0 errors: No known data errors Kreirati systemd jedinicu, Bash skriptu (koja pokre\u0107e sigurnosnu kopiju) i broja\u010d vremena za automatsko sigurnosno kopiranje: [seminar@archlinux ~]$ cd /etc/systemd/system/ [seminar@archlinux system]$ sudo nano backup.timer [seminar@archlinux system]$ sudo nano backup.service Datoteka backup.timer je sadr\u017eaja: [Unit] Description=test [Timer] OnCalendar=daily Persistent=true [Install] WantedBy=timers.target Datoteka backup.service je sadr\u017eaja: [Unit] Description=backup [Service] Type=oneshot ExecStart=/bin/bash /home/seminar/backup.sh Datoteka backup.sh je sadr\u017eaja: #!/bin/sh sudo rsync -a --delete --quiet /var/www/html /mymirror Omogu\u0107iti izvr\u0161avanje skripte, broja\u010da i jedinice: [seminar@archlinux ~]$ sudo systemctl daemon-reload [seminar@archlinux ~]$ sudo systemctl unmask backup.timer [seminar@archlinux ~]$ sudo systemctl unmask backup.service [seminar@archlinux ~]$ sudo systemctl enable backup.timer [seminar@archlinux ~]$ sudo systemctl enable backup.service [seminar@archlinux ~]$ sudo systemctl start backup.timer [seminar@archlinux ~]$ sudo chmod u+x backup.sh Podesiti vatrozid s tablicom \"moja_pravila\" i lancem \"moj_lanac\" dodati pravilo da se sav promet prema poslu\u017eitelju, osim na vratima 80 (HTTP), 22 (SSH) i 443 (HTTPS/SSL), blokira: [seminar@archlinux ~]$ sudo nft add table inet my_rules [seminar@archlinux ~]$ sudo nft add chain inet my_rules my_chain '{type filter hook input priority 0; policy drop;}' [seminar@archlinux ~]$ sudo nft add rule inet my_rules my_chain tcp dport {22, 80, 443} accept Inicijalizirati MariaDB SUBP, Konfigurirati bazu podataka i korisnika \u201emoodle\u201c, korisniku omogu\u0107iti prava pristupa bazi podataka moodle, kreirati lozinku korijenskog korisnika [seminar@archlinux ~]$ sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql [seminar@archlinux ~]$ sudo systemctl start mariadb [seminar@archlinux ~]$ mysql -u root -p MariaDB [(none)]> CREATE USER 'moodle'@'localhost' IDENTIFIED BY 'vrloTajniPass'; Query OK, 0 rows affected (0.012 sec) MariaDB [(none)]> CREATE DATABASE moodle DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; Query OK, 1 row affected (0.001 sec) MariaDB [(none)]> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,CREATE TEMPORARY TABLES,DROP,INDEX,ALTER ON moodle.* TO 'moodle'@'localhost'; Query OK, 0 rows affected (0.009 sec) MariaDB [(none)]> ALTER USER 'root'@'localhost' IDENTIFIED BY 'mypass'; Query OK, 0 rows affected (0.009 sec) MariaDB [(none)]> FLUSH PRIVILEGES; Query OK, 0 rows affected (0.001 sec) Promijeniti konfiguracijsku datoteku Apache poslu\u017eitelja tako da se uklju\u010de PHP moduli i postavi se direktorij poslu\u017eivanja /var/www/html: [seminar@archlinux conf]$ sudo nano httpd.conf DocumentRoot \"/var/www/html\" SetHandler application/x-httpd-php LoadModule php7_module modules/libphp7.so AddHandler php-script .php Include conf/extra/php7_module.conf #LoadModule mpm_event_module modules/mod_mpm_event.so Preuzeti moodle s Git repozitorija, premjestiti ga u /var/www/html [seminar@archlinux ~]$ mkdir moodle [seminar@archlinux ~]$ cd moodle [seminar@archlinux moodle]$ sudo git clone git://git.moodle.org/moodle.git [seminar@archlinux moodle]$ sudo cp -R moodle /var/www/html/moodle [seminar@archlinux moodle]$ sudo mkdir /var/moodledata [seminar@archlinux moodle]$ sudo chmod -R 777 /var/www/moodledata [seminar@archlinux moodle]$ sudo chmod -R 0755 /var/www/html/moodle [seminar@archlinux html]$ sudo chown -R http /var/moodledata Promijeniti php konfiguracijsku datoteku na na\u010din da se uklju\u010de ekstenzije potrebne za moodle, uklju\u010diti ke\u0161iranje: [seminar@archlinux php]$ sudo nano /etc/php7/php.ini #LoadModule mpm_event_module modules/mod_mpm_event.so ... zend_extension=opcache extension=curl extension=gd extension=sodium extension=exif extension=iconv extension=intl extension=ldap extension=mysqli extension=pspell extension=soap extension=xmlrpc extension=zip ... max_input_vars = 6000 .. opcache.enable=1 Pokrenuti Apache poslu\u017eitelj [seminar@archlinux conf]$ sudo systemctl start httpd Instalirati moodle putem web su\u010delja: Spremiti moodle konfiguraciju u /var/www/html/config.php Ansible Koraci: Preuzeti sliku sustava archlinux za poslu\u017eivanje u oblaku. Napraviti mapu projekta, preuzetu sliku sustava prekopirati u mapu i preimenovati te stvoriti datoteke user-data i meta-data za sustav pokretanja virtualnih strojeva - cloud-init: [lljubojevic@Ljubojevic-PC ~]$ mkdir projekt-urs [lljubojevic@Ljubojevic-PC ~]$ cd projekt-urs/ [lljubojevic@Ljubojevic-PC projekt-urs]$ nano user-data [lljubojevic@Ljubojevic-PC projekt-urs]$ touch meta-data [lljubojevic@Ljubojevic-PC projekt-urs]$ ls meta-data user-data Datoteka user-data je sadr\u017eaja: #cloud-config users: - default system_info: default_user: name: seminar plain_text_passwd: '1234' gecos: arch Cloud User groups: [wheel, adm] sudo: [\"ALL=(ALL) NOPASSWD:ALL\"] shell: /bin/bash lock_passwd: False Generirati sliku, u formatu ISO, s konfiguracijskim datotekama za cloud-init: [lljubojevic@Ljubojevic-PC projekt-urs]$ xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data xorriso 1.5.4 : RockRidge filesystem manipulator, libburnia project. Drive current: -outdev 'stdio:cloud-init.iso' Media current: stdio file, overwriteable Media status : is blank Media summary: 0 sessions, 0 data blocks, 0 data, 272g free Added to ISO image: file '/user-data'='/home/lljubojevic/projekt-urs/user-data' xorriso : UPDATE : 1 files added in 1 seconds Added to ISO image: file '/meta-data'='/home/lljubojevic/projekt-urs/meta-data' xorriso : UPDATE : 2 files added in 1 seconds ISO image produced: 184 sectors Written to medium : 184 sectors at LBA 0 Writing to 'stdio:cloud-init.iso' completed successfully. Pove\u0107ati prostor za pohranu na preuzetoj slici sustava: [lljubojevic@Ljubojevic-PC projekt-urs]$ qemu-img resize myaarch.qcow2 20G Image resized. Stvoriti virtualni stroj u alatu virt-manager s koracima: Import existing image - Browse local - odabrati sliku sustava Operacijski sustav: archlinux Memorija: 2048 MB - Procesor: 2 jezgre Odabrati \"Customize before install\", zatim \"Add hardware\" - Storage - izabrati ISO sliku za cloud-init - tip: cdrom Odabrati ponovno \"Add hardware\" - Storage - kreirati dva nova virtualna diska veli\u010dine 20GB - tip: VirtIO Disk Begin Installation U su\u010delju za interakciju s virtualnim strojem QEMU/KVM izvr\u0161iti prijavu na sustav i saznati IP adresu virtualnog stroja: Proslijediti na virtualni stroj skripte diskB i diskC, http i php konfiguraciju: [lljubojevic@Ljubojevic-PC Desktop]$ scp diskB.sh diskC.sh httpd.conf php.ini seminar@192.168.122.102:/home/seminar Konfiguracije su zadane od softvera uz izmjene kao u sekciji iznad. Instalirati na doma\u0107inu Ansible, instalirati sshpass i zapisati IP adresu od virtualnog stroja u /etc/ansible/known-hosts [lljubojevic@Ljubojevic-PC Desktop]$ sudo pacman -S ansible sshpass [lljubojevic@Ljubojevic-PC Desktop]$ sudo nano /etc/ansible/hosts [me] 192.168.0.17 [virtualka] 192.168.122.102 ansible_user=seminar [seminar@archlinux ~]$ sudo -k ansible-playbook moodle.yml SSH password: PLAY [Instalacija svih potrebnih requirementa] ********************************************************************************************************************************************************************************************* TASK [Gathering Facts] ********************************************************************************************************************************************************************************************************************* [WARNING]: Platform linux on host 192.168.122.102 is using the discovered Python interpreter at /usr/bin/python3.10, but future installation of another Python interpreter could change the meaning of that path. See https://docs.ansible.com/ansible-core/2.13/reference_appendices/interpreter_discovery.html for more information. ok: [192.168.122.102] TASK [update packages] ********************************************************************************************************************************************************************************************************************* ok: [192.168.122.102] TASK [Download all packages] *************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [install zfs-utils] ******************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [install zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [Reboot] ****************************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [cekanje na reboot] ******************************************************************************************************************************************************************************************************************* ok: [192.168.122.102] TASK [initialize zfs] ********************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdb] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdc] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdb] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdc] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [create a mirror] ********************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [make service and timer files] ******************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [make service and timer files] ******************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [make backup script] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [reload systemd daemon] *************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [unmask unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [unmask unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [enable unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [enable unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [start unit] ************************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [mkdir /var/www/html] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [start unit] ************************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [initialize firewall] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [initialize firewall] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [initialize firewall] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [enable mariadb] ************************************************************************************************************************************** changed: [192.168.122.102] TASK [configure mariadb] *********************************************************************************************************************************** changed: [192.168.122.102] TASK [enable mariadb] ************************************************************************************************************************************** changed: [192.168.122.102] TASK [install pip] ***************************************************************************************************************************************** changed: [192.168.122.102] TASK [install mysqlclient] ********************************************************************************************************************************* changed: [192.168.122.102] TASK [Create a new database mojabaza] ********************************************************************************************************************** changed: [192.168.122.102] TASK [Create user] ***************************************************************************************************************************************** changed: [192.168.122.102] TASK [Set MariaDB root password for the first time (root@localhost)] *************************************************************************************** changed: [192.168.122.102] TASK [replace httpd conf] ********************************************************************************************************************************** changed: [192.168.122.102] TASK [replace php ini] ************************************************************************************************************************************* changed: [192.168.122.102] TASK [download moodle] ************************************************************************************************************************************* changed: [192.168.122.102] TASK [move moodle to /var/www/html] ************************************************************************************************************************ changed: [192.168.122.102] TASK [create moodledata] *********************************************************************************************************************************** changed: [192.168.122.102] TASK [restart httpd] *************************************************************************************************************************************** changed: [192.168.122.102] Konfigurirati moodle putem web su\u010delja: Spremiti ispisanu moodle konfiguraciju u /var/www/html/moodle/config.php Skripta DiskB je sadr\u017eaja: #!bin/sh echo \"g n p 1 t 157 w\" | fdisk /dev/vdb Skripta DiskC je sadr\u017eaja: #!bin/sh echo \"g n p 1 t 157 w\" | fdisk /dev/vdc Playbook moodle.yml je sadr\u017eaja: --- - name: Instalacija svih potrebnih requirementa hosts: virtualka become: yes tasks: - name: update packages ansible.builtin.pacman: update_cache: yes upgrade: yes - name: Download all packages ansible.builtin.pacman: name: - make - fakeroot - patch - autoconf - linux-headers - git - automake - dkms - nano - rsync - nftables - apache - mariadb - php7 - php7-apache - graphviz - aspell - ghostscript - clamav - php7-pspell - php7-gd - php7-intl - git state: latest - name: prepare zfs ansible.builtin.command: cmd: curl -o 0001-only-build-the-module-in-dkms.conf.patch \"https://aur.archlinux.org/cgit/aur.git/plain/0001-only-build-the-module-in-dkms.conf.patch?h=zfs-dkms\" - name: prepare zfs ansible.builtin.command: cmd: curl -o PKGBUILD \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-dkms\" - name: prepare zfs ansible.builtin.command: cmd: curl -o PKGBUILD \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-dkms\" - name: prepare zfs ansible.builtin.command: cmd: curl -o zfs.initcpio.install \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.install?h=zfs-utils\" - name: prepare zfs ansible.builtin.command: cmd: curl -o zfs.initcpio.hook \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.hook?h=zfs-utils\" - name: prepare zfs ansible.builtin.command: cmd: curl -o PKGBUILD-utils \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-utils\" - name: prepare zfs ansible.builtin.command: cmd: gpg --receive-keys 6AD860EED4598027 - name: prepare zfs ansible.builtin.command: cmd: makepkg -p PKGBUILD-utils become_user: seminar - name: prepare zfs ansible.builtin.command: cmd: makepkg become_user: seminar - name: install zfs-utils ansible.builtin.pacman: name: - zfs-utils-2.1.4+65.r05147319b0-1-x86_64.pkg.tar.zst state: present - name: install zfs ansible.builtin.pacman: name: - zfs-dkms-2.1.4+65.r05147319b0-2-any.pkg.tar.zst state: present - name: Reboot shell: \"sleep 5 && reboot\" async: 1 poll: 0 - name: cekanje na reboot wait_for_connection: connect_timeout: 60 sleep: 5 delay: 5 timeout: 300 - name: initialize zfs ansible.builtin.command: cmd: modprobe zfs - name: partition disk vdb ansible.builtin.command: cmd: chmod u+x diskB.sh - name: partition disk vdc ansible.builtin.command: cmd: chmod u+x diskC.sh - name: partition disk vdb ansible.builtin.command: cmd: bash diskB.sh - name: partition disk vdc ansible.builtin.command: cmd: bash diskC.sh - name: create a mirror ansible.builtin.command: cmd: zpool create -m /mymirror mymirror mirror /dev/vdb1 /dev/vdc1 - name: make service and timer files ansible.builtin.copy: dest: /etc/systemd/system/backup.timer content: | [Unit] Description=test [Timer] OnCalendar=daily Persistent=true [Install] WantedBy=timers.target - name: make service and timer files ansible.builtin.copy: dest: /etc/systemd/system/backup.service content: | [Unit] Description=backup [Service] Type=oneshot ExecStart=/bin/bash /home/seminar/backup.sh - name: make backup script ansible.builtin.copy: dest: /home/seminar/backup.sh content: | #!/bin/sh sudo rsync -a --delete --quiet /var/www/html /mymirror - name: reload systemd daemon ansible.builtin.command: cmd: systemctl daemon-reload - name: unmask unit ansible.builtin.command: cmd: systemctl unmask backup.timer - name: unmask unit ansible.builtin.command: cmd: systemctl unmask backup.service - name: enable unit ansible.builtin.command: cmd: systemctl enable backup.timer - name: enable unit ansible.builtin.command: cmd: systemctl enable backup.service - name: start unit ansible.builtin.command: cmd: systemctl start backup.timer - name: mkdir /var/www/html ansible.builtin.file: path: /var/www/html state: directory mode: '0755' - name: start unit ansible.builtin.command: cmd: systemctl start backup.service - name: initialize firewall ansible.builtin.command: cmd: nft add table inet my_rules - name: initialize firewall ansible.builtin.command: cmd: nft add chain inet my_rules my_chain '{type filter hook input priority 0;}' - name: initialize firewall ansible.builtin.command: cmd: nft add rule inet my_rules my_chain tcp dport {22, 80, 443} accept - name: enable mariadb ansible.builtin.command: cmd: systemctl enable mariadb - name: configure mariadb ansible.builtin.command: cmd: mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql - name: enable mariadb ansible.builtin.command: cmd: systemctl start mariadb - name: install pip ansible.builtin.pacman: name: python-pip state: latest - name: install mysqlclient ansible.builtin.command: cmd: pip install mysqlclient - name: Create a new database mojabaza community.mysql.mysql_db: name: moodle state: present - name: Create user community.mysql.mysql_user: name: moodle password: 'vrloTajniPass' priv: 'moodle.*:SELECT,INSERT,UPDATE,DELETE,CREATE,CREATE TEMPORARY TABLES,DROP,INDEX,ALTER' state: present - name: Set MariaDB root password for the first time (root@localhost) mysql_user: login_user: 'root' login_host: 'localhost' login_password: '' name: root password: 'passwd' state: present - name: replace httpd conf ansible.builtin.copy: src: httpd.conf dest: /etc/httpd/conf/httpd.conf - name: replace php ini ansible.builtin.copy: src: php.ini dest: /etc/php7/php.ini - name: download moodle ansible.builtin.command: cmd: git clone git://git.moodle.org/moodle.git - name: move moodle to /var/www/html ansible.builtin.copy: src: /home/seminar/moodle dest: /var/www/html/moodle mode: '0755' owner: http remote_src: yes - name: create moodledata ansible.builtin.file: path: /var/www/moodledata state: directory mode: '777' - name: restart httpd ansible.builtin.command: cmd: systemctl restart httpd","title":"Installing moodle using Ansible"},{"location":"notes/moodle.html#automatization-of-computer-systems-management","text":"For my Undergraduate thesis at FIDIT Rijeka I want to explore the topic of computer systems management automatization using Ansible. All my thesis work will be placed here as I work. Projektni zadatak prikazuje korake koje je potrebno provesti u jednom virtualnom stroju kako bi se konfiguriralo poslu\u017eivanje moodle platforme, ali i isto rje\u0161eno automatizacijom putem sustava Ansible. Virtualni stroj pokre\u0107e Archlinux operacijski sustav, koristi zrcaljenje pogona (eng. \u201emirror\u201c) i automatsko sigurnosno kopiranje moodle direktorija, vatrozid koji blokira sav promet van vrata 80 (HTTP), 443 (SSL, HTTPS) i 22 (SSH), MariaDB sustav za upravljanje bazom podataka, Apache web poslu\u017eitelj i PHP7.4 parser.","title":"Automatization of Computer Systems Management"},{"location":"notes/moodle.html#virtualni-stroj","text":"Preuzeti sliku sustava archlinux za poslu\u017eivanje u oblaku. Napraviti mapu projekta, preuzetu sliku sustava prekopirati u mapu i preimenovati te stvoriti datoteke user-data i meta-data za sustav pokretanja virtualnih strojeva - cloud-init: [lljubojevic@Ljubojevic-PC ~]$ mkdir projekt-urs [lljubojevic@Ljubojevic-PC ~]$ cd projekt-urs/ [lljubojevic@Ljubojevic-PC projekt-urs]$ nano user-data [lljubojevic@Ljubojevic-PC projekt-urs]$ touch meta-data [lljubojevic@Ljubojevic-PC projekt-urs]$ ls meta-data user-data Datoteka user-data je sadr\u017eaja: #cloud-config users: - default system_info: default_user: name: seminar plain_text_passwd: '1234' gecos: arch Cloud User groups: [wheel, adm] sudo: [\"ALL=(ALL) NOPASSWD:ALL\"] shell: /bin/bash lock_passwd: False Generirati sliku, u formatu ISO, s konfiguracijskim datotekama za cloud-init: [lljubojevic@Ljubojevic-PC projekt-urs]$ xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data xorriso 1.5.4 : RockRidge filesystem manipulator, libburnia project. Drive current: -outdev 'stdio:cloud-init.iso' Media current: stdio file, overwriteable Media status : is blank Media summary: 0 sessions, 0 data blocks, 0 data, 272g free Added to ISO image: file '/user-data'='/home/lljubojevic/projekt-urs/user-data' xorriso : UPDATE : 1 files added in 1 seconds Added to ISO image: file '/meta-data'='/home/lljubojevic/projekt-urs/meta-data' xorriso : UPDATE : 2 files added in 1 seconds ISO image produced: 184 sectors Written to medium : 184 sectors at LBA 0 Writing to 'stdio:cloud-init.iso' completed successfully. Pove\u0107ati prostor za pohranu na preuzetoj slici sustava: [lljubojevic@Ljubojevic-PC projekt-urs]$ qemu-img resize myaarch.qcow2 20G Image resized. Stvoriti virtualni stroj u alatu virt-manager s koracima: Import existing image - Browse local - odabrati sliku sustava Operacijski sustav: archlinux Memorija: 2048 MB - Procesor: 2 jezgre Odabrati \"Customize before install\", zatim \"Add hardware\" - Storage - izabrati ISO sliku za cloud-init - tip: cdrom Odabrati ponovno \"Add hardware\" - Storage - kreirati dva nova virtualna diska veli\u010dine 20GB - tip: VirtIO Disk Begin Installation U su\u010delju za interakciju s virtualnim strojem QEMU/KVM izvr\u0161iti prijavu na sustav i saznati IP adresu virtualnog stroja: Spojiti se s glavnog ra\u010dunala naredbom ssh i a\u017eurirati sustav: [lljubojevic@Ljubojevic-PC ~]$ ssh seminar@192.168.122.64 [seminar@archlinux ~]$ sudo pacman -Syyu ```shell ip address -> 192.168.122.62 ssh seminar@192.168.122.62 sudo pacman -Syyu Inicijalizirati diskove i particije za ZFS zrcaljenje pogona: [seminar@archlinux ~]$ sudo fdisk /dev/vdb Welcome to fdisk (util-linux 2.38). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Device does not contain a recognized partition table. Created a new DOS disklabel with disk identifier 0x4f56e4a7. Command (m for help): g Created a new GPT disklabel (GUID: AB543153-05B1-0344-939E-0B2E121700D9). Command (m for help): n Partition number (1-128, default 1): 1 First sector (2048-41943006, default 2048): Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-41943006, default 41940991): Created a new partition 1 of type 'Linux filesystem' and of size 20 GiB. Command (m for help): t Selected partition 1 Partition type or alias (type L to list all): 157 Changed type of partition 'Linux filesystem' to 'Solaris /usr & Apple ZFS'. Command (m for help): w The partition table has been altered. Calling ioctl() to re-read partition table. Syncing disks. [seminar@archlinux ~]$ sudo fdisk /dev/vdc Welcome to fdisk (util-linux 2.38). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Device does not contain a recognized partition table. Created a new DOS disklabel with disk identifier 0x0dca6cdc. Command (m for help): g Created a new GPT disklabel (GUID: 40E56ED1-5399-F14F-945A-D6F9E5FAC901). Command (m for help): n Partition number (1-128, default 1): 1 First sector (2048-41943006, default 2048): Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-41943006, default 41940991): Created a new partition 1 of type 'Linux filesystem' and of size 20 GiB. Command (m for help): t Selected partition 1 Partition type or alias (type L to list all): 157 Changed type of partition 'Linux filesystem' to 'Solaris /usr & Apple ZFS'. Command (m for help): w The partition table has been altered. Calling ioctl() to re-read partition table. Syncing disks. Instalirati sav potreban softver: [seminar@archlinux ~]$ sudo pacman -S make fakeroot patch autoconf linux-headers git automake dkms nano rsync nftables apache mariadb php7 php7-apache graphviz aspell ghostscript clamav php7-pspell php7-gd php7-intl git Dohvatiti ZFS i ZFS-utils izvorni kod iz Arclinux korisni\u010dkog repozitorija, ovjeriti klju\u010deve paketa [seminar@archlinux zfs]$ curl -o 0001-only-build-the-module-in-dkms.conf.patch \"https://aur.archlinux.org/cgit/aur.git/plain/0001-only-build-the-module-in-dkms.conf.patch?h=zfs-dkms\" [seminar@archlinux zfs]$ curl -o PKGBUILD \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-dkms\" [seminar@archlinux zfs]$ curl -o zfs.initcpio.hook \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.hook?h=zfs-utils\" % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 3620 100 3620 0 0 18612 0 --:--:-- --:--:-- --:--:-- 18564 [seminar@archlinux zfs]$ curl -o zfs.initcpio.install \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.install?h=zfs-utils\" % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2301 100 2301 0 0 10843 0 --:--:-- --:--:-- --:--:-- 10853 [seminar@archlinux zfs]$ curl -o PKGBUILD-utils \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-utils\" % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2779 100 2779 0 0 12819 0 --:--:-- --:--:-- --:--:-- 12865 [seminar@archlinux zfs]$ sudo gpg --receive-keys 6AD860EED4598027 gpg: keybox '/root/.gnupg/pubring.kbx' created gpg: /root/.gnupg/trustdb.gpg: trustdb created gpg: key 6AD860EED4598027: public key \"Tony Hutter (GPG key for signing ZFS releases) <hutter2@llnl.gov>\" imported gpg: Total number processed: 1 gpg: imported: 1 Generirati, iz izvornog koda, instalacijske pakete za ZFS i ZFS-utils i instalirati ih pomo\u0107u upravitelja paketa: [seminar@archlinux zfs]$ makepkg -p PKGBUILD-utils ==> Making package: zfs-utils 2.1.4+65.r05147319b0-1 (Thu 26 May 2022 08:52:27 AM UTC) ==> Checking runtime dependencies... ==> Checking buildtime dependencies... ==> Retrieving sources... -> Updating zfs git repo... Fetching origin -> Found zfs.initcpio.install -> Found zfs.initcpio.hook ... ==> Creating package \"zfs-utils\"... -> Generating .PKGINFO file... -> Generating .BUILDINFO file... -> Generating .MTREE file... -> Compressing package... ==> Leaving fakeroot environment. ==> Finished making: zfs-utils 2.1.4+65.r05147319b0-1 (Thu 26 May 2022 09:02:19 AM UTC) [seminar@archlinux zfs]$ makepkg -p PKGBUILD ==> Making package: zfs-dkms 2.1.4+65.r05147319b0-2 (Thu 26 May 2022 09:03:27 AM UTC) ==> Checking runtime dependencies... ==> Checking buildtime dependencies... ==> Retrieving sources... -> Updating zfs git repo... Fetching origin -> Found zfs.initcpio.install -> Found zfs.initcpio.hook ... ==> Creating package \"zfs-dkms\"... -> Generating .PKGINFO file... -> Generating .BUILDINFO file... -> Generating .MTREE file... -> Compressing package... ==> Leaving fakeroot environment. ==> Finished making: zfs-dkms 2.1.4+65.r05147319b0-2 (Thu 26 May 2022 09:10:19 AM UTC) [seminar@archlinux zfs]$ sudo pacman -U zfs-dkms-2.1.4+65.r05147319b0-2-any.pkg.tar.zst zfs-utils-2.1.4+65.r05147319b0-1-x86_64.pkg.tar.zst Ponovno pokrenuti sustav U\u010ditati zfs modul jezgre: [seminar@archlinux ~]$ sudo modprobe zfs Kreirati zrcaljenje pogona pomo\u0107u upravitelja zpool: [seminar@archlinux ~]$ sudo zpool create -m /mymirror mymirror mirror /dev/vdb1 /dev/vdc1 [seminar@archlinux ~]$ zpool status pool: mymirror state: ONLINE config: NAME STATE READ WRITE CKSUM mymirror ONLINE 0 0 0 mirror-0 ONLINE 0 0 0 vdb1 ONLINE 0 0 0 vdc1 ONLINE 0 0 0 errors: No known data errors Kreirati systemd jedinicu, Bash skriptu (koja pokre\u0107e sigurnosnu kopiju) i broja\u010d vremena za automatsko sigurnosno kopiranje: [seminar@archlinux ~]$ cd /etc/systemd/system/ [seminar@archlinux system]$ sudo nano backup.timer [seminar@archlinux system]$ sudo nano backup.service Datoteka backup.timer je sadr\u017eaja: [Unit] Description=test [Timer] OnCalendar=daily Persistent=true [Install] WantedBy=timers.target Datoteka backup.service je sadr\u017eaja: [Unit] Description=backup [Service] Type=oneshot ExecStart=/bin/bash /home/seminar/backup.sh Datoteka backup.sh je sadr\u017eaja: #!/bin/sh sudo rsync -a --delete --quiet /var/www/html /mymirror Omogu\u0107iti izvr\u0161avanje skripte, broja\u010da i jedinice: [seminar@archlinux ~]$ sudo systemctl daemon-reload [seminar@archlinux ~]$ sudo systemctl unmask backup.timer [seminar@archlinux ~]$ sudo systemctl unmask backup.service [seminar@archlinux ~]$ sudo systemctl enable backup.timer [seminar@archlinux ~]$ sudo systemctl enable backup.service [seminar@archlinux ~]$ sudo systemctl start backup.timer [seminar@archlinux ~]$ sudo chmod u+x backup.sh Podesiti vatrozid s tablicom \"moja_pravila\" i lancem \"moj_lanac\" dodati pravilo da se sav promet prema poslu\u017eitelju, osim na vratima 80 (HTTP), 22 (SSH) i 443 (HTTPS/SSL), blokira: [seminar@archlinux ~]$ sudo nft add table inet my_rules [seminar@archlinux ~]$ sudo nft add chain inet my_rules my_chain '{type filter hook input priority 0; policy drop;}' [seminar@archlinux ~]$ sudo nft add rule inet my_rules my_chain tcp dport {22, 80, 443} accept Inicijalizirati MariaDB SUBP, Konfigurirati bazu podataka i korisnika \u201emoodle\u201c, korisniku omogu\u0107iti prava pristupa bazi podataka moodle, kreirati lozinku korijenskog korisnika [seminar@archlinux ~]$ sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql [seminar@archlinux ~]$ sudo systemctl start mariadb [seminar@archlinux ~]$ mysql -u root -p MariaDB [(none)]> CREATE USER 'moodle'@'localhost' IDENTIFIED BY 'vrloTajniPass'; Query OK, 0 rows affected (0.012 sec) MariaDB [(none)]> CREATE DATABASE moodle DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; Query OK, 1 row affected (0.001 sec) MariaDB [(none)]> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,CREATE TEMPORARY TABLES,DROP,INDEX,ALTER ON moodle.* TO 'moodle'@'localhost'; Query OK, 0 rows affected (0.009 sec) MariaDB [(none)]> ALTER USER 'root'@'localhost' IDENTIFIED BY 'mypass'; Query OK, 0 rows affected (0.009 sec) MariaDB [(none)]> FLUSH PRIVILEGES; Query OK, 0 rows affected (0.001 sec) Promijeniti konfiguracijsku datoteku Apache poslu\u017eitelja tako da se uklju\u010de PHP moduli i postavi se direktorij poslu\u017eivanja /var/www/html: [seminar@archlinux conf]$ sudo nano httpd.conf DocumentRoot \"/var/www/html\" SetHandler application/x-httpd-php LoadModule php7_module modules/libphp7.so AddHandler php-script .php Include conf/extra/php7_module.conf #LoadModule mpm_event_module modules/mod_mpm_event.so Preuzeti moodle s Git repozitorija, premjestiti ga u /var/www/html [seminar@archlinux ~]$ mkdir moodle [seminar@archlinux ~]$ cd moodle [seminar@archlinux moodle]$ sudo git clone git://git.moodle.org/moodle.git [seminar@archlinux moodle]$ sudo cp -R moodle /var/www/html/moodle [seminar@archlinux moodle]$ sudo mkdir /var/moodledata [seminar@archlinux moodle]$ sudo chmod -R 777 /var/www/moodledata [seminar@archlinux moodle]$ sudo chmod -R 0755 /var/www/html/moodle [seminar@archlinux html]$ sudo chown -R http /var/moodledata Promijeniti php konfiguracijsku datoteku na na\u010din da se uklju\u010de ekstenzije potrebne za moodle, uklju\u010diti ke\u0161iranje: [seminar@archlinux php]$ sudo nano /etc/php7/php.ini #LoadModule mpm_event_module modules/mod_mpm_event.so ... zend_extension=opcache extension=curl extension=gd extension=sodium extension=exif extension=iconv extension=intl extension=ldap extension=mysqli extension=pspell extension=soap extension=xmlrpc extension=zip ... max_input_vars = 6000 .. opcache.enable=1 Pokrenuti Apache poslu\u017eitelj [seminar@archlinux conf]$ sudo systemctl start httpd Instalirati moodle putem web su\u010delja: Spremiti moodle konfiguraciju u /var/www/html/config.php","title":"Virtualni stroj:"},{"location":"notes/moodle.html#ansible","text":"","title":"Ansible"},{"location":"notes/moodle.html#koraci","text":"Preuzeti sliku sustava archlinux za poslu\u017eivanje u oblaku. Napraviti mapu projekta, preuzetu sliku sustava prekopirati u mapu i preimenovati te stvoriti datoteke user-data i meta-data za sustav pokretanja virtualnih strojeva - cloud-init: [lljubojevic@Ljubojevic-PC ~]$ mkdir projekt-urs [lljubojevic@Ljubojevic-PC ~]$ cd projekt-urs/ [lljubojevic@Ljubojevic-PC projekt-urs]$ nano user-data [lljubojevic@Ljubojevic-PC projekt-urs]$ touch meta-data [lljubojevic@Ljubojevic-PC projekt-urs]$ ls meta-data user-data Datoteka user-data je sadr\u017eaja: #cloud-config users: - default system_info: default_user: name: seminar plain_text_passwd: '1234' gecos: arch Cloud User groups: [wheel, adm] sudo: [\"ALL=(ALL) NOPASSWD:ALL\"] shell: /bin/bash lock_passwd: False Generirati sliku, u formatu ISO, s konfiguracijskim datotekama za cloud-init: [lljubojevic@Ljubojevic-PC projekt-urs]$ xorriso -as genisoimage -output cloud-init.iso -volid CIDATA -joliet -rock user-data meta-data xorriso 1.5.4 : RockRidge filesystem manipulator, libburnia project. Drive current: -outdev 'stdio:cloud-init.iso' Media current: stdio file, overwriteable Media status : is blank Media summary: 0 sessions, 0 data blocks, 0 data, 272g free Added to ISO image: file '/user-data'='/home/lljubojevic/projekt-urs/user-data' xorriso : UPDATE : 1 files added in 1 seconds Added to ISO image: file '/meta-data'='/home/lljubojevic/projekt-urs/meta-data' xorriso : UPDATE : 2 files added in 1 seconds ISO image produced: 184 sectors Written to medium : 184 sectors at LBA 0 Writing to 'stdio:cloud-init.iso' completed successfully. Pove\u0107ati prostor za pohranu na preuzetoj slici sustava: [lljubojevic@Ljubojevic-PC projekt-urs]$ qemu-img resize myaarch.qcow2 20G Image resized. Stvoriti virtualni stroj u alatu virt-manager s koracima: Import existing image - Browse local - odabrati sliku sustava Operacijski sustav: archlinux Memorija: 2048 MB - Procesor: 2 jezgre Odabrati \"Customize before install\", zatim \"Add hardware\" - Storage - izabrati ISO sliku za cloud-init - tip: cdrom Odabrati ponovno \"Add hardware\" - Storage - kreirati dva nova virtualna diska veli\u010dine 20GB - tip: VirtIO Disk Begin Installation U su\u010delju za interakciju s virtualnim strojem QEMU/KVM izvr\u0161iti prijavu na sustav i saznati IP adresu virtualnog stroja: Proslijediti na virtualni stroj skripte diskB i diskC, http i php konfiguraciju: [lljubojevic@Ljubojevic-PC Desktop]$ scp diskB.sh diskC.sh httpd.conf php.ini seminar@192.168.122.102:/home/seminar Konfiguracije su zadane od softvera uz izmjene kao u sekciji iznad. Instalirati na doma\u0107inu Ansible, instalirati sshpass i zapisati IP adresu od virtualnog stroja u /etc/ansible/known-hosts [lljubojevic@Ljubojevic-PC Desktop]$ sudo pacman -S ansible sshpass [lljubojevic@Ljubojevic-PC Desktop]$ sudo nano /etc/ansible/hosts [me] 192.168.0.17 [virtualka] 192.168.122.102 ansible_user=seminar [seminar@archlinux ~]$ sudo -k ansible-playbook moodle.yml SSH password: PLAY [Instalacija svih potrebnih requirementa] ********************************************************************************************************************************************************************************************* TASK [Gathering Facts] ********************************************************************************************************************************************************************************************************************* [WARNING]: Platform linux on host 192.168.122.102 is using the discovered Python interpreter at /usr/bin/python3.10, but future installation of another Python interpreter could change the meaning of that path. See https://docs.ansible.com/ansible-core/2.13/reference_appendices/interpreter_discovery.html for more information. ok: [192.168.122.102] TASK [update packages] ********************************************************************************************************************************************************************************************************************* ok: [192.168.122.102] TASK [Download all packages] *************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [prepare zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [install zfs-utils] ******************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [install zfs] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [Reboot] ****************************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [cekanje na reboot] ******************************************************************************************************************************************************************************************************************* ok: [192.168.122.102] TASK [initialize zfs] ********************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdb] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdc] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdb] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [partition disk vdc] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [create a mirror] ********************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [make service and timer files] ******************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [make service and timer files] ******************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [make backup script] ****************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [reload systemd daemon] *************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [unmask unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [unmask unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [enable unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [enable unit] ************************************************************************************************************************************************************************************************************************* changed: [192.168.122.102] TASK [start unit] ************************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [mkdir /var/www/html] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [start unit] ************************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [initialize firewall] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [initialize firewall] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [initialize firewall] ***************************************************************************************************************************************************************************************************************** changed: [192.168.122.102] TASK [enable mariadb] ************************************************************************************************************************************** changed: [192.168.122.102] TASK [configure mariadb] *********************************************************************************************************************************** changed: [192.168.122.102] TASK [enable mariadb] ************************************************************************************************************************************** changed: [192.168.122.102] TASK [install pip] ***************************************************************************************************************************************** changed: [192.168.122.102] TASK [install mysqlclient] ********************************************************************************************************************************* changed: [192.168.122.102] TASK [Create a new database mojabaza] ********************************************************************************************************************** changed: [192.168.122.102] TASK [Create user] ***************************************************************************************************************************************** changed: [192.168.122.102] TASK [Set MariaDB root password for the first time (root@localhost)] *************************************************************************************** changed: [192.168.122.102] TASK [replace httpd conf] ********************************************************************************************************************************** changed: [192.168.122.102] TASK [replace php ini] ************************************************************************************************************************************* changed: [192.168.122.102] TASK [download moodle] ************************************************************************************************************************************* changed: [192.168.122.102] TASK [move moodle to /var/www/html] ************************************************************************************************************************ changed: [192.168.122.102] TASK [create moodledata] *********************************************************************************************************************************** changed: [192.168.122.102] TASK [restart httpd] *************************************************************************************************************************************** changed: [192.168.122.102] Konfigurirati moodle putem web su\u010delja: Spremiti ispisanu moodle konfiguraciju u /var/www/html/moodle/config.php Skripta DiskB je sadr\u017eaja: #!bin/sh echo \"g n p 1 t 157 w\" | fdisk /dev/vdb Skripta DiskC je sadr\u017eaja: #!bin/sh echo \"g n p 1 t 157 w\" | fdisk /dev/vdc Playbook moodle.yml je sadr\u017eaja: --- - name: Instalacija svih potrebnih requirementa hosts: virtualka become: yes tasks: - name: update packages ansible.builtin.pacman: update_cache: yes upgrade: yes - name: Download all packages ansible.builtin.pacman: name: - make - fakeroot - patch - autoconf - linux-headers - git - automake - dkms - nano - rsync - nftables - apache - mariadb - php7 - php7-apache - graphviz - aspell - ghostscript - clamav - php7-pspell - php7-gd - php7-intl - git state: latest - name: prepare zfs ansible.builtin.command: cmd: curl -o 0001-only-build-the-module-in-dkms.conf.patch \"https://aur.archlinux.org/cgit/aur.git/plain/0001-only-build-the-module-in-dkms.conf.patch?h=zfs-dkms\" - name: prepare zfs ansible.builtin.command: cmd: curl -o PKGBUILD \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-dkms\" - name: prepare zfs ansible.builtin.command: cmd: curl -o PKGBUILD \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-dkms\" - name: prepare zfs ansible.builtin.command: cmd: curl -o zfs.initcpio.install \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.install?h=zfs-utils\" - name: prepare zfs ansible.builtin.command: cmd: curl -o zfs.initcpio.hook \"https://aur.archlinux.org/cgit/aur.git/plain/zfs.initcpio.hook?h=zfs-utils\" - name: prepare zfs ansible.builtin.command: cmd: curl -o PKGBUILD-utils \"https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=zfs-utils\" - name: prepare zfs ansible.builtin.command: cmd: gpg --receive-keys 6AD860EED4598027 - name: prepare zfs ansible.builtin.command: cmd: makepkg -p PKGBUILD-utils become_user: seminar - name: prepare zfs ansible.builtin.command: cmd: makepkg become_user: seminar - name: install zfs-utils ansible.builtin.pacman: name: - zfs-utils-2.1.4+65.r05147319b0-1-x86_64.pkg.tar.zst state: present - name: install zfs ansible.builtin.pacman: name: - zfs-dkms-2.1.4+65.r05147319b0-2-any.pkg.tar.zst state: present - name: Reboot shell: \"sleep 5 && reboot\" async: 1 poll: 0 - name: cekanje na reboot wait_for_connection: connect_timeout: 60 sleep: 5 delay: 5 timeout: 300 - name: initialize zfs ansible.builtin.command: cmd: modprobe zfs - name: partition disk vdb ansible.builtin.command: cmd: chmod u+x diskB.sh - name: partition disk vdc ansible.builtin.command: cmd: chmod u+x diskC.sh - name: partition disk vdb ansible.builtin.command: cmd: bash diskB.sh - name: partition disk vdc ansible.builtin.command: cmd: bash diskC.sh - name: create a mirror ansible.builtin.command: cmd: zpool create -m /mymirror mymirror mirror /dev/vdb1 /dev/vdc1 - name: make service and timer files ansible.builtin.copy: dest: /etc/systemd/system/backup.timer content: | [Unit] Description=test [Timer] OnCalendar=daily Persistent=true [Install] WantedBy=timers.target - name: make service and timer files ansible.builtin.copy: dest: /etc/systemd/system/backup.service content: | [Unit] Description=backup [Service] Type=oneshot ExecStart=/bin/bash /home/seminar/backup.sh - name: make backup script ansible.builtin.copy: dest: /home/seminar/backup.sh content: | #!/bin/sh sudo rsync -a --delete --quiet /var/www/html /mymirror - name: reload systemd daemon ansible.builtin.command: cmd: systemctl daemon-reload - name: unmask unit ansible.builtin.command: cmd: systemctl unmask backup.timer - name: unmask unit ansible.builtin.command: cmd: systemctl unmask backup.service - name: enable unit ansible.builtin.command: cmd: systemctl enable backup.timer - name: enable unit ansible.builtin.command: cmd: systemctl enable backup.service - name: start unit ansible.builtin.command: cmd: systemctl start backup.timer - name: mkdir /var/www/html ansible.builtin.file: path: /var/www/html state: directory mode: '0755' - name: start unit ansible.builtin.command: cmd: systemctl start backup.service - name: initialize firewall ansible.builtin.command: cmd: nft add table inet my_rules - name: initialize firewall ansible.builtin.command: cmd: nft add chain inet my_rules my_chain '{type filter hook input priority 0;}' - name: initialize firewall ansible.builtin.command: cmd: nft add rule inet my_rules my_chain tcp dport {22, 80, 443} accept - name: enable mariadb ansible.builtin.command: cmd: systemctl enable mariadb - name: configure mariadb ansible.builtin.command: cmd: mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql - name: enable mariadb ansible.builtin.command: cmd: systemctl start mariadb - name: install pip ansible.builtin.pacman: name: python-pip state: latest - name: install mysqlclient ansible.builtin.command: cmd: pip install mysqlclient - name: Create a new database mojabaza community.mysql.mysql_db: name: moodle state: present - name: Create user community.mysql.mysql_user: name: moodle password: 'vrloTajniPass' priv: 'moodle.*:SELECT,INSERT,UPDATE,DELETE,CREATE,CREATE TEMPORARY TABLES,DROP,INDEX,ALTER' state: present - name: Set MariaDB root password for the first time (root@localhost) mysql_user: login_user: 'root' login_host: 'localhost' login_password: '' name: root password: 'passwd' state: present - name: replace httpd conf ansible.builtin.copy: src: httpd.conf dest: /etc/httpd/conf/httpd.conf - name: replace php ini ansible.builtin.copy: src: php.ini dest: /etc/php7/php.ini - name: download moodle ansible.builtin.command: cmd: git clone git://git.moodle.org/moodle.git - name: move moodle to /var/www/html ansible.builtin.copy: src: /home/seminar/moodle dest: /var/www/html/moodle mode: '0755' owner: http remote_src: yes - name: create moodledata ansible.builtin.file: path: /var/www/moodledata state: directory mode: '777' - name: restart httpd ansible.builtin.command: cmd: systemctl restart httpd","title":"Koraci:"},{"location":"notes/systemd.html","text":"Systemd essentials Based on Scaleway systemd-essentials tutorial systemd systemd is a suite of tools that provides a fast and flexible init model for managing an entire machine from boot onwards. It provides a system and service manager which runs as PID 1 and controls the start of the rest of the system. In recent years the majority of Linux distributions have adopted systemd as their default init system. * source systemd is a suite of basic building blocks for a Linux system. It provides a system and service manager that runs as PID 1 and starts the rest of the system. systemd provides aggressive parallelization capabilities, uses socket and D-Bus activation for starting services, offers on-demand starting of daemons, keeps track of processes using Linux control groups, maintains mount and automount points, and implements an elaborate transactional dependency-based service control logic. systemd supports SysV and LSB init scripts and works as a replacement for sysvinit. Other parts include a logging daemon, utilities to control basic system configuration like the hostname, date, locale, maintain a list of logged-in users and running containers and virtual machines, system accounts, runtime directories and settings, and daemons to manage simple network configuration, network time synchronization, log forwarding, and name resolution. * source Systemd is a system and service manager for Linux, compatible with SysV and LSB inyscript. Systemd provides outstanding ability to parallelize, use socket, and D-Bus activation to run services, enable on-demand daemons, monitor processes using Linux control groups, support recording and system restores, maintain gathering places, and automated build and assembly service, maintains a system environment and automated assembly services and implements a dependency management system based on logical control of services. \u00bb Among the most important features we can highlight: Process parallelization (the ability to run 2 or more processes simultaneously) which translates into faster system startup. Optimize resource use with groups. Supports snapshots and system restore. Operate mounting points and bracket storage units. * source Useful link - CROATIAN: carnet Systemd is a set of daemons, libraries, and system tools designed to centrally manage and configure a Linux operating system. As you can see from the above, this is not just one daemon or service like init, but several, but the goal is the same - to load all the necessary components for OS operation and management. * source Learn systemd essentials Display the current status of the system: [root@scw-zavrsni-ispit ~]# systemctl status \u25cf scw-zavrsni-ispit State: running Jobs: 0 queued Failed: 0 units Since: Sat 2022-03-05 11:01:52 UTC; 7min ago CGroup: / \u251c\u2500init.scope \u2502 \u2514\u25001 /sbin/init \u251c\u2500system.slice \u2502 \u251c\u2500dbus.service \u2502 \u2502 \u2514\u2500257 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --sy> \u2502 \u251c\u2500sshd.service \u2502 \u2502 \u2514\u2500487 \"sshd: /usr/bin/sshd -D [listener] 0 of 10-100 startups\" \u2502 \u251c\u2500system-getty.slice \u2502 \u2502 \u2514\u2500getty@tty1.service \u2502 \u2502 \u2514\u2500440 /sbin/agetty -o \"-p -- \\\\u\" --noclear - linux \u2502 \u251c\u2500system-serial\\x2dgetty.slice \u2502 \u2502 \u2514\u2500serial-getty@ttyS0.service \u2502 \u2502 \u2514\u2500441 /sbin/agetty -o \"-p -- \\\\u\" --keep-baud 115200,57600,38400,9600 - vt220 \u2502 \u251c\u2500systemd-homed.service \u2502 \u2502 \u2514\u2500260 /usr/lib/systemd/systemd-homed \u2502 \u251c\u2500systemd-journald.service \u2502 \u2502 \u2514\u2500214 /usr/lib/systemd/systemd-journald \u2502 \u251c\u2500systemd-logind.service \u2502 \u2502 \u2514\u2500261 /usr/lib/systemd/systemd-logind \u2502 \u251c\u2500systemd-networkd.service \u2502 \u2502 \u2514\u2500394 /usr/lib/systemd/systemd-networkd \u2502 \u251c\u2500systemd-resolved.service \u2502 \u2502 \u2514\u2500337 /usr/lib/systemd/systemd-resolved \u2502 \u251c\u2500systemd-timesyncd.service \u2502 \u2502 \u2514\u2500252 /usr/lib/systemd/systemd-timesyncd \u2502 \u251c\u2500systemd-udevd.service \u2502 \u2502 \u2514\u2500232 /usr/lib/systemd/systemd-udevd \u2502 \u2514\u2500systemd-userdbd.service \u2502 \u251c\u2500227 /usr/lib/systemd/systemd-userdbd \u2502 \u251c\u2500506 systemd-userwork \u2502 \u251c\u2500507 systemd-userwork \u2502 \u2514\u2500508 systemd-userwork \u2514\u2500user.slice \u2514\u2500user-0.slice \u251c\u2500session-1.scope \u2502 \u251c\u2500492 \"sshd: root@pts/0\" \u2502 \u251c\u2500502 -bash \u2502 \u251c\u2500509 systemctl status \u2502 \u2514\u2500510 less \u2514\u2500user@0.service \u2514\u2500init.scope \u251c\u2500495 /usr/lib/systemd/systemd --user \u2514\u2500496 \"(sd-pam)\" Displays all currently running services and their status. Some of the systemd services: * systemd-homed.service * systemd-homed(8) is a systemd service providing portable human-user accounts that are not dependent on current system configuration. * used to enable home directory portability for a user and automatic home directory encryption when logging in * homectl - homectl is the main utility you will use for homed. With it, you can create, update, and inspect users; their home directories; and their ~/.identity files controlled by the systemd-homed service. * Adding and deleting a users: [root@scw-zavrsni-ispit ~]# homectl create user \ud83d\udd10 Please enter new password for user user: \ud83d\udd10 Please enter new password for user user (repeat): [root@scw-zavrsni-ispit ~]# homectl remove user Script that automatically creates users: [root@scw-zavrsni-ispit ~]# nano /tmp/userlist user1 user2 user3 [root@scw-zavrsni-ispit ~]# nano /usr/sbin/createuser.sh #!/bin/bash userfile=/tmp/userlist username=$(cat /tmp/userlist | tr 'A-Z' 'a-z') password=$username for user in $username do useradd $user echo $password | passwd $user done echo \"$(wc -l /tmp/userlist) created user\" tail -n$(wc -l /tmp userlist) /etc/passwd [root@scw-zavrsni-ispit ~]# /usr/sbin/createuser.sh New password: Retype new password: Password change has been aborted. passwd: Authentication token manipulation error passwd: password unchanged New password: Retype new password: Password change has been aborted. passwd: Authentication token manipulation error passwd: password unchanged New password: Retype new password: Password change has been aborted. passwd: Authentication token manipulation error passwd: password unchanged 3 /tmp/userlist stvorio korisnike wc: /tmp: Is a directory wc: userlist: No such file or directory View users: [root@scw-zavrsni-ispit ~]# less /etc/passwd user1:x:1001:1001::/home/user1:/bin/bash user2:x:1002:1002::/home/user2:/bin/bash user3:x:1003:1003::/home/user3:/bin/bash Delete: [root@scw-zavrsni-ispit ~]# userdel user1 [root@scw-zavrsni-ispit ~]# userdel user2 [root@scw-zavrsni-ispit ~]# userdel user3 source source systemd-networkd.service systemd-networkd is a system daemon that manages network configurations. It detects and configures network devices as they appear; it can also create virtual network devices. This service can be especially useful to set up complex network configurations for a container managed by systemd-nspawn or for virtual machines. It also works fine on simple connections. [root@scw-zavrsni-ispit ~]# systemctl status systemd-networkd \u25cf systemd-networkd.service - Network Configuration Loaded: loaded (/usr/lib/systemd/system/systemd-networkd.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2022-03-05 11:02:03 UTC; 43min ago TriggeredBy: \u25cf systemd-networkd.socket Docs: man:systemd-networkd.service(8) Main PID: 394 (systemd-network) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 1.4M CPU: 52ms CGroup: /system.slice/systemd-networkd.service \u2514\u2500394 /usr/lib/systemd/systemd-networkd Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: Link UP Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: Gained carrier Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: lo: Link UP Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: lo: Gained carrier Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: Gained IPv6LL Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: Enumeration completed Mar 05 11:02:03 scw-zavrsni-ispit systemd[1]: Started Network Configuration. Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: DHCPv4 address 10.18.0.195/31, gateway 10.18.0.194 ac> Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: Could not set hostname: Access denied Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: Could not set hostname: Access denied source * systemd-journald.service * systemd-journald is a system service that collects and stores logging data. It creates and maintains structured, indexed journals based on logging information that is received from a variety of sources: * Kernel log messages, via kmsg * Simple system log messages, via the libc syslog(3) call * Structured system log messages via the native Journal API, see sd_journal_print(3) and Native Journal Protocol * Standard output and standard error of service units. For further details see below. * Audit records, originating from the kernel audit subsystem root@scw-zavrsni-ispit network]# systemctl status systemd-journald \u25cf systemd-journald.service - Journal Service Loaded: loaded (/usr/lib/systemd/system/systemd-journald.service; static) Active: active (running) since Sat 2022-03-05 11:01:53 UTC; 47min ago TriggeredBy: \u25cf systemd-journald-audit.socket \u25cf systemd-journald-dev-log.socket \u25cf systemd-journald.socket Docs: man:systemd-journald.service(8) man:journald.conf(5) Main PID: 214 (systemd-journal) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 5.9M CPU: 300ms CGroup: /system.slice/systemd-journald.service \u2514\u2500214 /usr/lib/systemd/systemd-journald Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Journal started Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Runtime Journal (/run/log/journal/6ae3079320e2465abecf21a39> Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Time spent on flushing to /var/log/journal/6ae3079320e2465a> Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: System Journal (/var/log/journal/6ae3079320e2465abecf21a397> Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Received client request to flush runtime journal. Notice: journal has been rotated since unit was started, output may be incomplete. Config file is located in: /etc/systemd/journald.conf source * systemd-logind.service * systemd-logind is a system service that manages user logins. It is responsible for: * Keeping track of users and sessions, their processes and their idle state. * Generating and managing session IDs. * Providing polkit-based access for users for operations such as system shutdown or sleep * Implementing a shutdown/sleep inhibition logic for applications * Handling of power/sleep hardware keys * Multi-seat management * Session switch management * Device access management for users * Automatic spawning of text logins (gettys) on virtual console activation and user runtime directory management [root@scw-zavrsni-ispit network]# systemctl status systemd-logind \u25cf systemd-logind.service - User Login Management Loaded: loaded (/usr/lib/systemd/system/systemd-logind.service; static) Active: active (running) since Sat 2022-03-05 11:01:54 UTC; 50min ago Docs: man:sd-login(3) man:systemd-logind.service(8) man:logind.conf(5) man:org.freedesktop.login1(5) Main PID: 261 (systemd-logind) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 1.5M CPU: 80ms CGroup: /system.slice/systemd-logind.service \u2514\u2500261 /usr/lib/systemd/systemd-logind Mar 05 11:01:54 scw-zavrsni-ispit systemd[1]: Starting User Login Management... Mar 05 11:01:54 scw-zavrsni-ispit systemd-logind[261]: Watching system buttons on /dev/input/event0 (Power Button) Mar 05 11:01:54 scw-zavrsni-ispit systemd-logind[261]: Watching system buttons on /dev/input/event1 (AT Translated S> Mar 05 11:01:54 scw-zavrsni-ispit systemd-logind[261]: New seat seat0. Mar 05 11:01:54 scw-zavrsni-ispit systemd[1]: Started User Login Management. Mar 05 11:02:07 scw-zavrsni-ispit systemd-logind[261]: New session 1 of user root. source * systemd-resolved.service * systemd-resolved is a system service that provides network name resolution to local applications [root@scw-zavrsni-ispit network]# systemctl status systemd-resolved \u25cf systemd-resolved.service - Network Name Resolution Loaded: loaded (/usr/lib/systemd/system/systemd-resolved.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2022-03-05 11:01:59 UTC; 52min ago Docs: man:systemd-resolved.service(8) man:org.freedesktop.resolve1(5) https://www.freedesktop.org/wiki/Software/systemd/writing-network-configuration-managers https://www.freedesktop.org/wiki/Software/systemd/writing-resolver-clients Main PID: 337 (systemd-resolve) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 4.8M CPU: 91ms CGroup: /system.slice/systemd-resolved.service \u2514\u2500337 /usr/lib/systemd/systemd-resolved Mar 05 11:01:59 scw-zavrsni-ispit systemd[1]: Starting Network Name Resolution... Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: Positive Trust Anchors: Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: . IN DS 20326 8 2 e06d44b80b8f1d39a95c0b0d7c65d08458e880409> Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: Negative trust anchors: home.arpa 10.in-addr.arpa 16.172.in> Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: Using system hostname 'scw-zavrsni-ispit'. Mar 05 11:01:59 scw-zavrsni-ispit systemd[1]: Started Network Name Resolution. Mar 05 11:02:34 scw-zavrsni-ispit systemd-resolved[337]: Clock change detected. Flushing caches. Displays and saves the hostname for applications running on a computer or localhost ... an example of this is a Oracle DB TNSListener when Oracle connects via the localhost hostname. source * systemd-timesyncd.service * Synchronizes time with a network time server - Synchronizing clock RTC with flags * systemd-timesyncd is a system service that may be used to synchronize the local system clock with a remote Network Time Protocol (NTP) server. It also saves the local time to disk every time the clock has been synchronized and uses this to possibly advance the system realtime clock on subsequent reboots to ensure it (roughly) monotonically advances even if the system lacks a battery-buffered RTC chip. root@scw-zavrsni-ispit network]# systemctl status systemd-timesyncd \u25cf systemd-timesyncd.service - Network Time Synchronization Loaded: loaded (/usr/lib/systemd/system/systemd-timesyncd.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2022-03-05 11:01:54 UTC; 56min ago Docs: man:systemd-timesyncd.service(8) Main PID: 252 (systemd-timesyn) Status: \"Initial synchronization to time server 10.196.2.3:123 (10.196.2.3).\" Tasks: 2 (limit: 1141) Memory: 2.1M CPU: 88ms CGroup: /system.slice/systemd-timesyncd.service \u2514\u2500252 /usr/lib/systemd/systemd-timesyncd Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:34 scw-zavrsni-ispit systemd-timesyncd[252]: Initial synchronization to time server 10.196.2.3:123 (10.> source * systemd-userdbd.service * systemd-userdbd is a system service that multiplexes user/group lookups to all local services that provide JSON user/group record definitions to the system. In addition it synthesizes JSON user/group records from classic UNIX/glibc NSS user/group records in order to provide full backwards compatibility. * The userdbctl command is used to list all users from the user database [root@scw-zavrsni-ispit ~]# userdbctl NAME DISPOSITION UID GID REALNAME HOME SHELL root intrinsic 0 0 - /root /bin/bash nobody intrinsic 65534 65534 Nobody / /usr/bin/nologin bin system 1 1 - / /usr/bin/nologin daemon system 2 2 - / /usr/bin/nologin mail system 8 12 - /var/spool/mail /usr/bin/nologin ftp system 14 11 - /srv/ftp /usr/bin/nologin http system 33 33 - /srv/http /usr/bin/nologin uuidd system 68 68 - / /usr/bin/nologin dbus system 81 81 System Message Bus / /usr/bin/nologin systemd-timesync system 976 976 systemd Time Synchronization / /usr/bin/nologin systemd-resolve system 977 977 systemd Resolver / /usr/bin/nologin systemd-journal-remote system 978 978 systemd Journal Remote / /usr/bin/nologin systemd-oom system 979 979 systemd Userspace OOM Killer / /usr/bin/nologin systemd-network system 980 980 systemd Network Management / /usr/bin/nologin systemd-coredump system 981 981 systemd Core Dumper / /usr/bin/nologin arch regular 1000 1000 arch Cloud User /home/arch /bin/bash 16 users listed. source * systemd-udevd.service * systemd-udevd listens to kernel uevents. For every event, systemd-udevd executes matching instructions specified in udev rules * udevadm trigger - Request device events from the kernel. Usually used to replay events at system coldplug time. --verbose Print the list of devices which will be triggered. [root@scw-zavrsni-ispit ~]# udevadm trigger --verbose /sys/devices/LNXSYSTM:00 /sys/devices/LNXSYSTM:00/LNXPWRBN:00 /sys/devices/LNXSYSTM:00/LNXPWRBN:00/input/input0 /sys/devices/LNXSYSTM:00/LNXPWRBN:00/input/input0/event0 /sys/devices/LNXSYSTM:00/LNXPWRBN:00/wakeup/wakeup7 /sys/devices/LNXSYSTM:00/LNXSYBUS:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/ACPI0010:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/ACPI0010:00/LNXCPU:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0103:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A03:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A03:00/PNP0A06:00 .. /sys/devices/LNXSYSTM:00/LNXSYBUS:01 /sys/devices/breakpoint /sys/devices/cpu /sys/devices/kprobe /sys/devices/msr /sys/devices/pci0000:00/0000:00:00.0 /sys/devices/pci0000:00/0000:00:01.0 /sys/devices/pci0000:00/0000:00:01.1 /sys/devices/pci0000:00/0000:00:01.1/ata1/ata_port/ata1 /sys/devices/pci0000:00/0000:00:01.1/ata1/host0 /sys/devices/pci0000:00/0000:00:01.1/ata1/host0/scsi_host/host0 /sys/devices/pci0000:00/0000:00:01.1/ata1/link1/ata_link/link1 /sys/devices/pci0000:00/0000:00:01.1/ata1/link1/dev1.0/ata_device/dev1.0 /sys/devices/pci0000:00/0000:00:01.1/ata1/link1/dev1.1/ata_device/dev1.1 /sys/devices/pci0000:00/0000:00:01.1/ata2/ata_port/ata2 /sys/devices/pci0000:00/0000:00:01.1/ata2/host1 /sys/devices/pci0000:00/0000:00:01.1/ata2/host1/scsi_host/host1 /sys/devices/pci0000:00/0000:00:01.1/ata2/link2/ata_link/link2 /sys/devices/pci0000:00/0000:00:01.1/ata2/link2/dev2.0/ata_device/dev2.0 /sys/devices/pci0000:00/0000:00:01.1/ata2/link2/dev2.1/ata_device/dev2.1 /sys/devices/pci0000:00/0000:00:01.3 /sys/devices/pci0000:00/0000:00:01.3/i2c-0 /sys/devices/pci0000:00/0000:00:02.0 ... /sys/devices/pci0000:00/QEMU0002:00 /sys/devices/pci0000:00/pci_bus/0000:00 /sys/devices/platform/PNP0103:00 /sys/devices/platform/efivars.0 /sys/devices/platform/i8042 /sys/devices/platform/i8042/serio0 /sys/devices/platform/i8042/serio0/input/input1 /sys/devices/platform/i8042/serio0/input/input1/event1 /sys/devices/platform/i8042/serio0/input/input1/input1::capslock /sys/devices/platform/i8042/serio0/input/input1/input1::numlock /sys/devices/platform/i8042/serio0/input/input1/input1::scrolllock /sys/devices/platform/i8042/serio1 /sys/devices/platform/i8042/serio1/input/input4 /sys/devices/platform/i8042/serio1/input/input4/event4 /sys/devices/platform/i8042/serio1/input/input4/mouse1 /sys/devices/platform/i8042/serio1/input/input5 /sys/devices/platform/i8042/serio1/input/input5/event3 /sys/devices/platform/i8042/serio1/input/input5/mouse0 /sys/devices/platform/intel_rapl_msr.0 /sys/devices/platform/pcspkr /sys/devices/platform/pcspkr/input/input3 /sys/devices/platform/pcspkr/input/input3/event2 /sys/devices/platform/platform-framebuffer.0 /sys/devices/platform/reg-dummy /sys/devices/platform/reg-dummy/regulator/regulator.0 /sys/devices/platform/regulatory.0 /sys/devices/platform/rtc-efi.0 /sys/devices/platform/serial8250 /sys/devices/platform/serial8250/tty/ttyS1 ... /sys/devices/pnp0/00:00 /sys/devices/pnp0/00:00/cmos_nvram0 /sys/devices/pnp0/00:00/rtc/rtc0 /sys/devices/pnp0/00:00/rtc/rtc0/alarmtimer.0.auto /sys/devices/pnp0/00:00/rtc/rtc0/alarmtimer.0.auto/wakeup/wakeup9 /sys/devices/pnp0/00:00/wakeup/wakeup8 /sys/devices/pnp0/00:01 /sys/devices/pnp0/00:02 /sys/devices/pnp0/00:03 /sys/devices/pnp0/00:04 /sys/devices/pnp0/00:04/tty/ttyS0 /sys/devices/software /sys/devices/system/clockevents/broadcast /sys/devices/system/clockevents/clockevent0 /sys/devices/system/clocksource/clocksource0 /sys/devices/system/container/PNP0A06:00 /sys/devices/system/container/PNP0A06:01 /sys/devices/system/container/PNP0A06:02 /sys/devices/system/cpu/cpu0 /sys/devices/system/edac/mc /sys/devices/system/machinecheck/machinecheck0 /sys/devices/system/memory/memory0 /sys/devices/system/memory/memory1 /sys/devices/system/memory/memory2 /sys/devices/system/memory/memory3 /sys/devices/system/memory/memory4 /sys/devices/system/memory/memory5 /sys/devices/system/memory/memory6 /sys/devices/system/memory/memory7 /sys/devices/system/node/node0 /sys/devices/tracepoint /sys/devices/uprobe /sys/devices/virtual/bdi/254:0 /sys/devices/virtual/bdi/btrfs-1 /sys/devices/virtual/cpuid/cpu0 ... /sys/devices/virtual/misc/btrfs-control /sys/devices/virtual/misc/cpu_dma_latency /sys/devices/virtual/misc/device-mapper /sys/devices/virtual/misc/fuse /sys/devices/virtual/misc/hpet /sys/devices/virtual/misc/hw_random /sys/devices/virtual/misc/kvm /sys/devices/virtual/misc/loop-control /sys/devices/virtual/misc/nvram /sys/devices/virtual/misc/psaux /sys/devices/virtual/misc/rfkill /sys/devices/virtual/misc/snapshot /sys/devices/virtual/misc/udmabuf /sys/devices/virtual/misc/vga_arbiter /sys/devices/virtual/msr/msr0 /sys/devices/virtual/net/lo /sys/devices/virtual/powercap/dtpm /sys/devices/virtual/thermal/cooling_device0 /sys/devices/virtual/tty/console /sys/devices/virtual/tty/ptmx /sys/devices/virtual/tty/tty /sys/devices/virtual/tty/tty0 /sys/devices/virtual/tty/tty1 ... source source Using units * The most common object that systemd manages and acts upon is a \u201dunit\u201d. Units can be, for example, services (.service), devices (.device), mount points (.mount), or sockets (.socket). * Unit - part of a computer system: * services, devices, mounting points or sockets * Unit files are stored in the /usr/lib/systemd directory and its subdirectories [root@scw-zavrsni-ispit ~]# ls -la /usr/lib/systemd total 10080 drwxr-xr-x 1 root root 2672 Jan 24 15:48 . drwxr-xr-x 1 root root 18492 Mar 5 11:19 .. drwxr-xr-x 1 root root 6 Jan 23 19:46 boot drwxr-xr-x 1 root root 456 Jan 24 15:48 catalog -rw-r--r-- 1 root root 9551 Jan 18 12:27 import-pubring.gpg -rwxr-xr-x 1 root root 3360192 Jan 18 12:27 libsystemd-shared-250.so drwxr-xr-x 1 root root 404 Jan 24 15:48 network drwxr-xr-x 1 root root 48 Jan 24 15:48 ntp-units.d drwxr-xr-x 1 root root 14 Jan 23 19:46 portable -rw-r--r-- 1 root root 710 Jan 18 12:27 resolv.conf drwxr-xr-x 1 root root 28 Jan 23 19:46 scripts drwxr-xr-x 1 root root 11360 Mar 5 11:19 system -rwxr-xr-x 1 root root 1882368 Jan 18 12:27 systemd -rwxr-xr-x 1 root root 14240 Jan 18 12:27 systemd-ac-power -rwxr-xr-x 1 root root 30632 Jan 18 12:27 systemd-backlight -rwxr-xr-x 1 root root 18424 Jan 18 12:27 systemd-binfmt -rwxr-xr-x 1 root root 30816 Jan 18 12:27 systemd-bless-boot -rwxr-xr-x 1 root root 14328 Jan 18 12:27 systemd-boot-check-no-failures -rwxr-xr-x 1 root root 14248 Jan 18 12:27 systemd-cgroups-agent -rwxr-xr-x 1 root root 55344 Jan 18 12:27 systemd-coredump -rwxr-xr-x 1 root root 75960 Jan 18 12:27 systemd-cryptsetup -rwxr-xr-x 1 root root 38904 Jan 18 12:27 systemd-export -rwxr-xr-x 1 root root 22448 Jan 18 12:27 systemd-fsck -rwxr-xr-x 1 root root 22520 Jan 18 12:27 systemd-growfs -rwxr-xr-x 1 root root 14248 Jan 18 12:27 systemd-hibernate-resume -rwxr-xr-x 1 root root 223256 Jan 18 12:27 systemd-homed -rwxr-xr-x 1 root root 223144 Jan 18 12:27 systemd-homework -rwxr-xr-x 1 root root 43024 Jan 18 12:27 systemd-hostnamed -rwxr-xr-x 1 root root 51224 Jan 18 12:27 systemd-import -rwxr-xr-x 1 root root 43040 Jan 18 12:27 systemd-importd -rwxr-xr-x 1 root root 30728 Jan 18 12:27 systemd-import-fs ... [root@scw-zavrsni-ispit ~]# systemctl list-units UNIT LOAD ACTIVE SUB DESCRIPTION sys-subsystem-net-devices-eth0.device loaded active plugged Virtio network de> -.mount loaded active mounted Root Mount boot-efi.mount loaded active mounted /boot/efi dev-hugepages.mount loaded active mounted Huge Pages File S> dev-mqueue.mount loaded active mounted POSIX Message Que> run-user-0.mount loaded active mounted /run/user/0 sys-fs-fuse-connections.mount loaded active mounted FUSE Control File> sys-kernel-config.mount loaded active mounted Kernel Configurat> sys-kernel-debug.mount loaded active mounted Kernel Debug File> sys-kernel-tracing.mount loaded active mounted Kernel Trace File> tmp.mount loaded active mounted Temporary Directo> systemd-ask-password-console.path loaded active waiting Dispatch Password> systemd-ask-password-wall.path loaded active waiting Forward Password > init.scope loaded active running System and Servic> session-3.scope loaded active running Session 3 of User> cloud-config.service loaded active exited Apply the setting> cloud-final.service loaded active exited Execute cloud use> cloud-init-local.service loaded active exited Initial cloud-ini> cloud-init.service loaded active exited Initial cloud-ini> dbus.service loaded active running D-Bus System Mess> getty@tty1.service loaded active running Getty on tty1 kmod-static-nodes.service loaded active exited Create List of St> serial-getty@ttyS0.service loaded active running Serial Getty on t> sshd.service loaded active running OpenSSH Daemon systemd-boot-update.service loaded active exited Automatic Boot Lo> systemd-homed-activate.service loaded active exited Home Area Activat> ... Working with units: [root@scw-zavrsni-ispit ~]# systemctl stop systemd-journald.service Warning: Stopping systemd-journald.service, but it can still be activated by: systemd-journald-audit.socket systemd-journald-dev-log.socket systemd-journald.socket [root@scw-zavrsni-ispit ~]# systemctl start systemd-journald.service [root@scw-zavrsni-ispit ~]# systemctl restart systemd-journald.service [root@scw-zavrsni-ispit ~]# systemctl reload systemd-journald.service Failed to reload systemd-journald.service: Job type reload is not applicable for unit systemd-journald.service. [root@scw-zavrsni-ispit ~]# systemctl status systemd-journald.service \u25cf systemd-journald.service - Journal Service Loaded: loaded (/usr/lib/systemd/system/systemd-journald.service; static) Active: active (running) since Wed 2022-03-09 12:13:59 UTC; 15s ago TriggeredBy: \u25cf systemd-journald-audit.socket \u25cf systemd-journald-dev-log.socket \u25cf systemd-journald.socket Docs: man:systemd-journald.service(8) man:journald.conf(5) Main PID: 18826 (systemd-journal) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 1.1M CPU: 37ms CGroup: /system.slice/systemd-journald.service \u2514\u250018826 /usr/lib/systemd/systemd-journald Mar 09 12:13:59 scw-zavrsni-ispit systemd-journald[18826]: Journal started Mar 09 12:13:59 scw-zavrsni-ispit systemd-journald[18826]: System Journal (/var/log/journal/6ae3079320e2465ab> lines 1-18/18 (END) Every service unit that is known to systemd can be started manually \u2013 even if it is disabled. To explicitly avoid that a service runs, use the mask command Shutdown and reboot sudo systemctl reboot now sudo systemctl suspend now sudo systemctl shutdown now sudo systemctl poweroff now now applies command instantly, default waits a minute. TODO: System logs and Unit states Viewing and editing Units System logs Targets","title":"Systemd tutorial"},{"location":"notes/systemd.html#systemd-essentials","text":"Based on Scaleway systemd-essentials tutorial","title":"Systemd essentials"},{"location":"notes/systemd.html#systemd","text":"systemd is a suite of tools that provides a fast and flexible init model for managing an entire machine from boot onwards. It provides a system and service manager which runs as PID 1 and controls the start of the rest of the system. In recent years the majority of Linux distributions have adopted systemd as their default init system. * source systemd is a suite of basic building blocks for a Linux system. It provides a system and service manager that runs as PID 1 and starts the rest of the system. systemd provides aggressive parallelization capabilities, uses socket and D-Bus activation for starting services, offers on-demand starting of daemons, keeps track of processes using Linux control groups, maintains mount and automount points, and implements an elaborate transactional dependency-based service control logic. systemd supports SysV and LSB init scripts and works as a replacement for sysvinit. Other parts include a logging daemon, utilities to control basic system configuration like the hostname, date, locale, maintain a list of logged-in users and running containers and virtual machines, system accounts, runtime directories and settings, and daemons to manage simple network configuration, network time synchronization, log forwarding, and name resolution. * source Systemd is a system and service manager for Linux, compatible with SysV and LSB inyscript. Systemd provides outstanding ability to parallelize, use socket, and D-Bus activation to run services, enable on-demand daemons, monitor processes using Linux control groups, support recording and system restores, maintain gathering places, and automated build and assembly service, maintains a system environment and automated assembly services and implements a dependency management system based on logical control of services. \u00bb Among the most important features we can highlight: Process parallelization (the ability to run 2 or more processes simultaneously) which translates into faster system startup. Optimize resource use with groups. Supports snapshots and system restore. Operate mounting points and bracket storage units. * source Useful link - CROATIAN: carnet Systemd is a set of daemons, libraries, and system tools designed to centrally manage and configure a Linux operating system. As you can see from the above, this is not just one daemon or service like init, but several, but the goal is the same - to load all the necessary components for OS operation and management. * source","title":"systemd"},{"location":"notes/systemd.html#learn-systemd-essentials","text":"Display the current status of the system: [root@scw-zavrsni-ispit ~]# systemctl status \u25cf scw-zavrsni-ispit State: running Jobs: 0 queued Failed: 0 units Since: Sat 2022-03-05 11:01:52 UTC; 7min ago CGroup: / \u251c\u2500init.scope \u2502 \u2514\u25001 /sbin/init \u251c\u2500system.slice \u2502 \u251c\u2500dbus.service \u2502 \u2502 \u2514\u2500257 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --sy> \u2502 \u251c\u2500sshd.service \u2502 \u2502 \u2514\u2500487 \"sshd: /usr/bin/sshd -D [listener] 0 of 10-100 startups\" \u2502 \u251c\u2500system-getty.slice \u2502 \u2502 \u2514\u2500getty@tty1.service \u2502 \u2502 \u2514\u2500440 /sbin/agetty -o \"-p -- \\\\u\" --noclear - linux \u2502 \u251c\u2500system-serial\\x2dgetty.slice \u2502 \u2502 \u2514\u2500serial-getty@ttyS0.service \u2502 \u2502 \u2514\u2500441 /sbin/agetty -o \"-p -- \\\\u\" --keep-baud 115200,57600,38400,9600 - vt220 \u2502 \u251c\u2500systemd-homed.service \u2502 \u2502 \u2514\u2500260 /usr/lib/systemd/systemd-homed \u2502 \u251c\u2500systemd-journald.service \u2502 \u2502 \u2514\u2500214 /usr/lib/systemd/systemd-journald \u2502 \u251c\u2500systemd-logind.service \u2502 \u2502 \u2514\u2500261 /usr/lib/systemd/systemd-logind \u2502 \u251c\u2500systemd-networkd.service \u2502 \u2502 \u2514\u2500394 /usr/lib/systemd/systemd-networkd \u2502 \u251c\u2500systemd-resolved.service \u2502 \u2502 \u2514\u2500337 /usr/lib/systemd/systemd-resolved \u2502 \u251c\u2500systemd-timesyncd.service \u2502 \u2502 \u2514\u2500252 /usr/lib/systemd/systemd-timesyncd \u2502 \u251c\u2500systemd-udevd.service \u2502 \u2502 \u2514\u2500232 /usr/lib/systemd/systemd-udevd \u2502 \u2514\u2500systemd-userdbd.service \u2502 \u251c\u2500227 /usr/lib/systemd/systemd-userdbd \u2502 \u251c\u2500506 systemd-userwork \u2502 \u251c\u2500507 systemd-userwork \u2502 \u2514\u2500508 systemd-userwork \u2514\u2500user.slice \u2514\u2500user-0.slice \u251c\u2500session-1.scope \u2502 \u251c\u2500492 \"sshd: root@pts/0\" \u2502 \u251c\u2500502 -bash \u2502 \u251c\u2500509 systemctl status \u2502 \u2514\u2500510 less \u2514\u2500user@0.service \u2514\u2500init.scope \u251c\u2500495 /usr/lib/systemd/systemd --user \u2514\u2500496 \"(sd-pam)\" Displays all currently running services and their status. Some of the systemd services: * systemd-homed.service * systemd-homed(8) is a systemd service providing portable human-user accounts that are not dependent on current system configuration. * used to enable home directory portability for a user and automatic home directory encryption when logging in * homectl - homectl is the main utility you will use for homed. With it, you can create, update, and inspect users; their home directories; and their ~/.identity files controlled by the systemd-homed service. * Adding and deleting a users: [root@scw-zavrsni-ispit ~]# homectl create user \ud83d\udd10 Please enter new password for user user: \ud83d\udd10 Please enter new password for user user (repeat): [root@scw-zavrsni-ispit ~]# homectl remove user Script that automatically creates users: [root@scw-zavrsni-ispit ~]# nano /tmp/userlist user1 user2 user3 [root@scw-zavrsni-ispit ~]# nano /usr/sbin/createuser.sh #!/bin/bash userfile=/tmp/userlist username=$(cat /tmp/userlist | tr 'A-Z' 'a-z') password=$username for user in $username do useradd $user echo $password | passwd $user done echo \"$(wc -l /tmp/userlist) created user\" tail -n$(wc -l /tmp userlist) /etc/passwd [root@scw-zavrsni-ispit ~]# /usr/sbin/createuser.sh New password: Retype new password: Password change has been aborted. passwd: Authentication token manipulation error passwd: password unchanged New password: Retype new password: Password change has been aborted. passwd: Authentication token manipulation error passwd: password unchanged New password: Retype new password: Password change has been aborted. passwd: Authentication token manipulation error passwd: password unchanged 3 /tmp/userlist stvorio korisnike wc: /tmp: Is a directory wc: userlist: No such file or directory View users: [root@scw-zavrsni-ispit ~]# less /etc/passwd user1:x:1001:1001::/home/user1:/bin/bash user2:x:1002:1002::/home/user2:/bin/bash user3:x:1003:1003::/home/user3:/bin/bash Delete: [root@scw-zavrsni-ispit ~]# userdel user1 [root@scw-zavrsni-ispit ~]# userdel user2 [root@scw-zavrsni-ispit ~]# userdel user3 source source systemd-networkd.service systemd-networkd is a system daemon that manages network configurations. It detects and configures network devices as they appear; it can also create virtual network devices. This service can be especially useful to set up complex network configurations for a container managed by systemd-nspawn or for virtual machines. It also works fine on simple connections. [root@scw-zavrsni-ispit ~]# systemctl status systemd-networkd \u25cf systemd-networkd.service - Network Configuration Loaded: loaded (/usr/lib/systemd/system/systemd-networkd.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2022-03-05 11:02:03 UTC; 43min ago TriggeredBy: \u25cf systemd-networkd.socket Docs: man:systemd-networkd.service(8) Main PID: 394 (systemd-network) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 1.4M CPU: 52ms CGroup: /system.slice/systemd-networkd.service \u2514\u2500394 /usr/lib/systemd/systemd-networkd Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: Link UP Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: Gained carrier Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: lo: Link UP Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: lo: Gained carrier Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: Gained IPv6LL Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: Enumeration completed Mar 05 11:02:03 scw-zavrsni-ispit systemd[1]: Started Network Configuration. Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: eth0: DHCPv4 address 10.18.0.195/31, gateway 10.18.0.194 ac> Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: Could not set hostname: Access denied Mar 05 11:02:03 scw-zavrsni-ispit systemd-networkd[394]: Could not set hostname: Access denied source * systemd-journald.service * systemd-journald is a system service that collects and stores logging data. It creates and maintains structured, indexed journals based on logging information that is received from a variety of sources: * Kernel log messages, via kmsg * Simple system log messages, via the libc syslog(3) call * Structured system log messages via the native Journal API, see sd_journal_print(3) and Native Journal Protocol * Standard output and standard error of service units. For further details see below. * Audit records, originating from the kernel audit subsystem root@scw-zavrsni-ispit network]# systemctl status systemd-journald \u25cf systemd-journald.service - Journal Service Loaded: loaded (/usr/lib/systemd/system/systemd-journald.service; static) Active: active (running) since Sat 2022-03-05 11:01:53 UTC; 47min ago TriggeredBy: \u25cf systemd-journald-audit.socket \u25cf systemd-journald-dev-log.socket \u25cf systemd-journald.socket Docs: man:systemd-journald.service(8) man:journald.conf(5) Main PID: 214 (systemd-journal) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 5.9M CPU: 300ms CGroup: /system.slice/systemd-journald.service \u2514\u2500214 /usr/lib/systemd/systemd-journald Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Journal started Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Runtime Journal (/run/log/journal/6ae3079320e2465abecf21a39> Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Time spent on flushing to /var/log/journal/6ae3079320e2465a> Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: System Journal (/var/log/journal/6ae3079320e2465abecf21a397> Mar 05 11:01:53 scw-zavrsni-ispit systemd-journald[214]: Received client request to flush runtime journal. Notice: journal has been rotated since unit was started, output may be incomplete. Config file is located in: /etc/systemd/journald.conf source * systemd-logind.service * systemd-logind is a system service that manages user logins. It is responsible for: * Keeping track of users and sessions, their processes and their idle state. * Generating and managing session IDs. * Providing polkit-based access for users for operations such as system shutdown or sleep * Implementing a shutdown/sleep inhibition logic for applications * Handling of power/sleep hardware keys * Multi-seat management * Session switch management * Device access management for users * Automatic spawning of text logins (gettys) on virtual console activation and user runtime directory management [root@scw-zavrsni-ispit network]# systemctl status systemd-logind \u25cf systemd-logind.service - User Login Management Loaded: loaded (/usr/lib/systemd/system/systemd-logind.service; static) Active: active (running) since Sat 2022-03-05 11:01:54 UTC; 50min ago Docs: man:sd-login(3) man:systemd-logind.service(8) man:logind.conf(5) man:org.freedesktop.login1(5) Main PID: 261 (systemd-logind) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 1.5M CPU: 80ms CGroup: /system.slice/systemd-logind.service \u2514\u2500261 /usr/lib/systemd/systemd-logind Mar 05 11:01:54 scw-zavrsni-ispit systemd[1]: Starting User Login Management... Mar 05 11:01:54 scw-zavrsni-ispit systemd-logind[261]: Watching system buttons on /dev/input/event0 (Power Button) Mar 05 11:01:54 scw-zavrsni-ispit systemd-logind[261]: Watching system buttons on /dev/input/event1 (AT Translated S> Mar 05 11:01:54 scw-zavrsni-ispit systemd-logind[261]: New seat seat0. Mar 05 11:01:54 scw-zavrsni-ispit systemd[1]: Started User Login Management. Mar 05 11:02:07 scw-zavrsni-ispit systemd-logind[261]: New session 1 of user root. source * systemd-resolved.service * systemd-resolved is a system service that provides network name resolution to local applications [root@scw-zavrsni-ispit network]# systemctl status systemd-resolved \u25cf systemd-resolved.service - Network Name Resolution Loaded: loaded (/usr/lib/systemd/system/systemd-resolved.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2022-03-05 11:01:59 UTC; 52min ago Docs: man:systemd-resolved.service(8) man:org.freedesktop.resolve1(5) https://www.freedesktop.org/wiki/Software/systemd/writing-network-configuration-managers https://www.freedesktop.org/wiki/Software/systemd/writing-resolver-clients Main PID: 337 (systemd-resolve) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 4.8M CPU: 91ms CGroup: /system.slice/systemd-resolved.service \u2514\u2500337 /usr/lib/systemd/systemd-resolved Mar 05 11:01:59 scw-zavrsni-ispit systemd[1]: Starting Network Name Resolution... Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: Positive Trust Anchors: Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: . IN DS 20326 8 2 e06d44b80b8f1d39a95c0b0d7c65d08458e880409> Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: Negative trust anchors: home.arpa 10.in-addr.arpa 16.172.in> Mar 05 11:01:59 scw-zavrsni-ispit systemd-resolved[337]: Using system hostname 'scw-zavrsni-ispit'. Mar 05 11:01:59 scw-zavrsni-ispit systemd[1]: Started Network Name Resolution. Mar 05 11:02:34 scw-zavrsni-ispit systemd-resolved[337]: Clock change detected. Flushing caches. Displays and saves the hostname for applications running on a computer or localhost ... an example of this is a Oracle DB TNSListener when Oracle connects via the localhost hostname. source * systemd-timesyncd.service * Synchronizes time with a network time server - Synchronizing clock RTC with flags * systemd-timesyncd is a system service that may be used to synchronize the local system clock with a remote Network Time Protocol (NTP) server. It also saves the local time to disk every time the clock has been synchronized and uses this to possibly advance the system realtime clock on subsequent reboots to ensure it (roughly) monotonically advances even if the system lacks a battery-buffered RTC chip. root@scw-zavrsni-ispit network]# systemctl status systemd-timesyncd \u25cf systemd-timesyncd.service - Network Time Synchronization Loaded: loaded (/usr/lib/systemd/system/systemd-timesyncd.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2022-03-05 11:01:54 UTC; 56min ago Docs: man:systemd-timesyncd.service(8) Main PID: 252 (systemd-timesyn) Status: \"Initial synchronization to time server 10.196.2.3:123 (10.196.2.3).\" Tasks: 2 (limit: 1141) Memory: 2.1M CPU: 88ms CGroup: /system.slice/systemd-timesyncd.service \u2514\u2500252 /usr/lib/systemd/systemd-timesyncd Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:03 scw-zavrsni-ispit systemd-timesyncd[252]: Network configuration changed, trying to establish connect> Mar 05 11:02:34 scw-zavrsni-ispit systemd-timesyncd[252]: Initial synchronization to time server 10.196.2.3:123 (10.> source * systemd-userdbd.service * systemd-userdbd is a system service that multiplexes user/group lookups to all local services that provide JSON user/group record definitions to the system. In addition it synthesizes JSON user/group records from classic UNIX/glibc NSS user/group records in order to provide full backwards compatibility. * The userdbctl command is used to list all users from the user database [root@scw-zavrsni-ispit ~]# userdbctl NAME DISPOSITION UID GID REALNAME HOME SHELL root intrinsic 0 0 - /root /bin/bash nobody intrinsic 65534 65534 Nobody / /usr/bin/nologin bin system 1 1 - / /usr/bin/nologin daemon system 2 2 - / /usr/bin/nologin mail system 8 12 - /var/spool/mail /usr/bin/nologin ftp system 14 11 - /srv/ftp /usr/bin/nologin http system 33 33 - /srv/http /usr/bin/nologin uuidd system 68 68 - / /usr/bin/nologin dbus system 81 81 System Message Bus / /usr/bin/nologin systemd-timesync system 976 976 systemd Time Synchronization / /usr/bin/nologin systemd-resolve system 977 977 systemd Resolver / /usr/bin/nologin systemd-journal-remote system 978 978 systemd Journal Remote / /usr/bin/nologin systemd-oom system 979 979 systemd Userspace OOM Killer / /usr/bin/nologin systemd-network system 980 980 systemd Network Management / /usr/bin/nologin systemd-coredump system 981 981 systemd Core Dumper / /usr/bin/nologin arch regular 1000 1000 arch Cloud User /home/arch /bin/bash 16 users listed. source * systemd-udevd.service * systemd-udevd listens to kernel uevents. For every event, systemd-udevd executes matching instructions specified in udev rules * udevadm trigger - Request device events from the kernel. Usually used to replay events at system coldplug time. --verbose Print the list of devices which will be triggered. [root@scw-zavrsni-ispit ~]# udevadm trigger --verbose /sys/devices/LNXSYSTM:00 /sys/devices/LNXSYSTM:00/LNXPWRBN:00 /sys/devices/LNXSYSTM:00/LNXPWRBN:00/input/input0 /sys/devices/LNXSYSTM:00/LNXPWRBN:00/input/input0/event0 /sys/devices/LNXSYSTM:00/LNXPWRBN:00/wakeup/wakeup7 /sys/devices/LNXSYSTM:00/LNXSYBUS:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/ACPI0010:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/ACPI0010:00/LNXCPU:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0103:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A03:00 /sys/devices/LNXSYSTM:00/LNXSYBUS:00/PNP0A03:00/PNP0A06:00 .. /sys/devices/LNXSYSTM:00/LNXSYBUS:01 /sys/devices/breakpoint /sys/devices/cpu /sys/devices/kprobe /sys/devices/msr /sys/devices/pci0000:00/0000:00:00.0 /sys/devices/pci0000:00/0000:00:01.0 /sys/devices/pci0000:00/0000:00:01.1 /sys/devices/pci0000:00/0000:00:01.1/ata1/ata_port/ata1 /sys/devices/pci0000:00/0000:00:01.1/ata1/host0 /sys/devices/pci0000:00/0000:00:01.1/ata1/host0/scsi_host/host0 /sys/devices/pci0000:00/0000:00:01.1/ata1/link1/ata_link/link1 /sys/devices/pci0000:00/0000:00:01.1/ata1/link1/dev1.0/ata_device/dev1.0 /sys/devices/pci0000:00/0000:00:01.1/ata1/link1/dev1.1/ata_device/dev1.1 /sys/devices/pci0000:00/0000:00:01.1/ata2/ata_port/ata2 /sys/devices/pci0000:00/0000:00:01.1/ata2/host1 /sys/devices/pci0000:00/0000:00:01.1/ata2/host1/scsi_host/host1 /sys/devices/pci0000:00/0000:00:01.1/ata2/link2/ata_link/link2 /sys/devices/pci0000:00/0000:00:01.1/ata2/link2/dev2.0/ata_device/dev2.0 /sys/devices/pci0000:00/0000:00:01.1/ata2/link2/dev2.1/ata_device/dev2.1 /sys/devices/pci0000:00/0000:00:01.3 /sys/devices/pci0000:00/0000:00:01.3/i2c-0 /sys/devices/pci0000:00/0000:00:02.0 ... /sys/devices/pci0000:00/QEMU0002:00 /sys/devices/pci0000:00/pci_bus/0000:00 /sys/devices/platform/PNP0103:00 /sys/devices/platform/efivars.0 /sys/devices/platform/i8042 /sys/devices/platform/i8042/serio0 /sys/devices/platform/i8042/serio0/input/input1 /sys/devices/platform/i8042/serio0/input/input1/event1 /sys/devices/platform/i8042/serio0/input/input1/input1::capslock /sys/devices/platform/i8042/serio0/input/input1/input1::numlock /sys/devices/platform/i8042/serio0/input/input1/input1::scrolllock /sys/devices/platform/i8042/serio1 /sys/devices/platform/i8042/serio1/input/input4 /sys/devices/platform/i8042/serio1/input/input4/event4 /sys/devices/platform/i8042/serio1/input/input4/mouse1 /sys/devices/platform/i8042/serio1/input/input5 /sys/devices/platform/i8042/serio1/input/input5/event3 /sys/devices/platform/i8042/serio1/input/input5/mouse0 /sys/devices/platform/intel_rapl_msr.0 /sys/devices/platform/pcspkr /sys/devices/platform/pcspkr/input/input3 /sys/devices/platform/pcspkr/input/input3/event2 /sys/devices/platform/platform-framebuffer.0 /sys/devices/platform/reg-dummy /sys/devices/platform/reg-dummy/regulator/regulator.0 /sys/devices/platform/regulatory.0 /sys/devices/platform/rtc-efi.0 /sys/devices/platform/serial8250 /sys/devices/platform/serial8250/tty/ttyS1 ... /sys/devices/pnp0/00:00 /sys/devices/pnp0/00:00/cmos_nvram0 /sys/devices/pnp0/00:00/rtc/rtc0 /sys/devices/pnp0/00:00/rtc/rtc0/alarmtimer.0.auto /sys/devices/pnp0/00:00/rtc/rtc0/alarmtimer.0.auto/wakeup/wakeup9 /sys/devices/pnp0/00:00/wakeup/wakeup8 /sys/devices/pnp0/00:01 /sys/devices/pnp0/00:02 /sys/devices/pnp0/00:03 /sys/devices/pnp0/00:04 /sys/devices/pnp0/00:04/tty/ttyS0 /sys/devices/software /sys/devices/system/clockevents/broadcast /sys/devices/system/clockevents/clockevent0 /sys/devices/system/clocksource/clocksource0 /sys/devices/system/container/PNP0A06:00 /sys/devices/system/container/PNP0A06:01 /sys/devices/system/container/PNP0A06:02 /sys/devices/system/cpu/cpu0 /sys/devices/system/edac/mc /sys/devices/system/machinecheck/machinecheck0 /sys/devices/system/memory/memory0 /sys/devices/system/memory/memory1 /sys/devices/system/memory/memory2 /sys/devices/system/memory/memory3 /sys/devices/system/memory/memory4 /sys/devices/system/memory/memory5 /sys/devices/system/memory/memory6 /sys/devices/system/memory/memory7 /sys/devices/system/node/node0 /sys/devices/tracepoint /sys/devices/uprobe /sys/devices/virtual/bdi/254:0 /sys/devices/virtual/bdi/btrfs-1 /sys/devices/virtual/cpuid/cpu0 ... /sys/devices/virtual/misc/btrfs-control /sys/devices/virtual/misc/cpu_dma_latency /sys/devices/virtual/misc/device-mapper /sys/devices/virtual/misc/fuse /sys/devices/virtual/misc/hpet /sys/devices/virtual/misc/hw_random /sys/devices/virtual/misc/kvm /sys/devices/virtual/misc/loop-control /sys/devices/virtual/misc/nvram /sys/devices/virtual/misc/psaux /sys/devices/virtual/misc/rfkill /sys/devices/virtual/misc/snapshot /sys/devices/virtual/misc/udmabuf /sys/devices/virtual/misc/vga_arbiter /sys/devices/virtual/msr/msr0 /sys/devices/virtual/net/lo /sys/devices/virtual/powercap/dtpm /sys/devices/virtual/thermal/cooling_device0 /sys/devices/virtual/tty/console /sys/devices/virtual/tty/ptmx /sys/devices/virtual/tty/tty /sys/devices/virtual/tty/tty0 /sys/devices/virtual/tty/tty1 ... source source Using units * The most common object that systemd manages and acts upon is a \u201dunit\u201d. Units can be, for example, services (.service), devices (.device), mount points (.mount), or sockets (.socket). * Unit - part of a computer system: * services, devices, mounting points or sockets * Unit files are stored in the /usr/lib/systemd directory and its subdirectories [root@scw-zavrsni-ispit ~]# ls -la /usr/lib/systemd total 10080 drwxr-xr-x 1 root root 2672 Jan 24 15:48 . drwxr-xr-x 1 root root 18492 Mar 5 11:19 .. drwxr-xr-x 1 root root 6 Jan 23 19:46 boot drwxr-xr-x 1 root root 456 Jan 24 15:48 catalog -rw-r--r-- 1 root root 9551 Jan 18 12:27 import-pubring.gpg -rwxr-xr-x 1 root root 3360192 Jan 18 12:27 libsystemd-shared-250.so drwxr-xr-x 1 root root 404 Jan 24 15:48 network drwxr-xr-x 1 root root 48 Jan 24 15:48 ntp-units.d drwxr-xr-x 1 root root 14 Jan 23 19:46 portable -rw-r--r-- 1 root root 710 Jan 18 12:27 resolv.conf drwxr-xr-x 1 root root 28 Jan 23 19:46 scripts drwxr-xr-x 1 root root 11360 Mar 5 11:19 system -rwxr-xr-x 1 root root 1882368 Jan 18 12:27 systemd -rwxr-xr-x 1 root root 14240 Jan 18 12:27 systemd-ac-power -rwxr-xr-x 1 root root 30632 Jan 18 12:27 systemd-backlight -rwxr-xr-x 1 root root 18424 Jan 18 12:27 systemd-binfmt -rwxr-xr-x 1 root root 30816 Jan 18 12:27 systemd-bless-boot -rwxr-xr-x 1 root root 14328 Jan 18 12:27 systemd-boot-check-no-failures -rwxr-xr-x 1 root root 14248 Jan 18 12:27 systemd-cgroups-agent -rwxr-xr-x 1 root root 55344 Jan 18 12:27 systemd-coredump -rwxr-xr-x 1 root root 75960 Jan 18 12:27 systemd-cryptsetup -rwxr-xr-x 1 root root 38904 Jan 18 12:27 systemd-export -rwxr-xr-x 1 root root 22448 Jan 18 12:27 systemd-fsck -rwxr-xr-x 1 root root 22520 Jan 18 12:27 systemd-growfs -rwxr-xr-x 1 root root 14248 Jan 18 12:27 systemd-hibernate-resume -rwxr-xr-x 1 root root 223256 Jan 18 12:27 systemd-homed -rwxr-xr-x 1 root root 223144 Jan 18 12:27 systemd-homework -rwxr-xr-x 1 root root 43024 Jan 18 12:27 systemd-hostnamed -rwxr-xr-x 1 root root 51224 Jan 18 12:27 systemd-import -rwxr-xr-x 1 root root 43040 Jan 18 12:27 systemd-importd -rwxr-xr-x 1 root root 30728 Jan 18 12:27 systemd-import-fs ... [root@scw-zavrsni-ispit ~]# systemctl list-units UNIT LOAD ACTIVE SUB DESCRIPTION sys-subsystem-net-devices-eth0.device loaded active plugged Virtio network de> -.mount loaded active mounted Root Mount boot-efi.mount loaded active mounted /boot/efi dev-hugepages.mount loaded active mounted Huge Pages File S> dev-mqueue.mount loaded active mounted POSIX Message Que> run-user-0.mount loaded active mounted /run/user/0 sys-fs-fuse-connections.mount loaded active mounted FUSE Control File> sys-kernel-config.mount loaded active mounted Kernel Configurat> sys-kernel-debug.mount loaded active mounted Kernel Debug File> sys-kernel-tracing.mount loaded active mounted Kernel Trace File> tmp.mount loaded active mounted Temporary Directo> systemd-ask-password-console.path loaded active waiting Dispatch Password> systemd-ask-password-wall.path loaded active waiting Forward Password > init.scope loaded active running System and Servic> session-3.scope loaded active running Session 3 of User> cloud-config.service loaded active exited Apply the setting> cloud-final.service loaded active exited Execute cloud use> cloud-init-local.service loaded active exited Initial cloud-ini> cloud-init.service loaded active exited Initial cloud-ini> dbus.service loaded active running D-Bus System Mess> getty@tty1.service loaded active running Getty on tty1 kmod-static-nodes.service loaded active exited Create List of St> serial-getty@ttyS0.service loaded active running Serial Getty on t> sshd.service loaded active running OpenSSH Daemon systemd-boot-update.service loaded active exited Automatic Boot Lo> systemd-homed-activate.service loaded active exited Home Area Activat> ... Working with units: [root@scw-zavrsni-ispit ~]# systemctl stop systemd-journald.service Warning: Stopping systemd-journald.service, but it can still be activated by: systemd-journald-audit.socket systemd-journald-dev-log.socket systemd-journald.socket [root@scw-zavrsni-ispit ~]# systemctl start systemd-journald.service [root@scw-zavrsni-ispit ~]# systemctl restart systemd-journald.service [root@scw-zavrsni-ispit ~]# systemctl reload systemd-journald.service Failed to reload systemd-journald.service: Job type reload is not applicable for unit systemd-journald.service. [root@scw-zavrsni-ispit ~]# systemctl status systemd-journald.service \u25cf systemd-journald.service - Journal Service Loaded: loaded (/usr/lib/systemd/system/systemd-journald.service; static) Active: active (running) since Wed 2022-03-09 12:13:59 UTC; 15s ago TriggeredBy: \u25cf systemd-journald-audit.socket \u25cf systemd-journald-dev-log.socket \u25cf systemd-journald.socket Docs: man:systemd-journald.service(8) man:journald.conf(5) Main PID: 18826 (systemd-journal) Status: \"Processing requests...\" Tasks: 1 (limit: 1141) Memory: 1.1M CPU: 37ms CGroup: /system.slice/systemd-journald.service \u2514\u250018826 /usr/lib/systemd/systemd-journald Mar 09 12:13:59 scw-zavrsni-ispit systemd-journald[18826]: Journal started Mar 09 12:13:59 scw-zavrsni-ispit systemd-journald[18826]: System Journal (/var/log/journal/6ae3079320e2465ab> lines 1-18/18 (END) Every service unit that is known to systemd can be started manually \u2013 even if it is disabled. To explicitly avoid that a service runs, use the mask command Shutdown and reboot sudo systemctl reboot now sudo systemctl suspend now sudo systemctl shutdown now sudo systemctl poweroff now now applies command instantly, default waits a minute.","title":"Learn systemd essentials"},{"location":"notes/systemd.html#todo","text":"System logs and Unit states Viewing and editing Units System logs Targets","title":"TODO:"},{"location":"notes/vm.html","text":"Virtual Machines Luka Ljubojevi\u0107 Introduction For the topic of the 1st seminar paper from the course Network and Mobile Operating Systems, I created a web server configuration for managing the status and location of items in the warehouse. Shema consists of: Two web servers, MariaDB database, Load balancer, Three clients(Android, Windows, GNU Linux - Ubuntu), Visually: Schema elements are configured as virtual machines within the \"Virtual Machine Manager\" tool. The seminar paper was developed in GNU Linux - Mint, with packages (on a server computer - running virtual machines): virt-manager, cloud-localds, qemu, mariadb-client-core-10.3, python3 pip, mysqlclient Downloading ubuntu-server system image For the purposes of the seminar paper, we download the \"Ubuntu Server 20.04 LTS (Focal Fossa) daily builds\" system image, * Available at: https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img We copy the system image four times and rename it according to the name of the virtual machines and arrange them in folders according to the following hierarchy: * PZ MMOS * LB * MySQL * WS1 * WS2 Then we create a user-data file using the cloud-init service that contains: * Password * Attributes that the password does not expire and can be used for ssh authentication User-data: #cloud-config password: lozinka1 chpasswd: {expire: False} ssh_pwauth: True Using the user-data file, we are creating another disk for the virtual machine that will enable login to the system (user-data.img) ... Commands used: lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/MySQL\" lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/LB\" lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/WS1\" lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/WS2\" After sorting the images into folders, we increase the capacity (storage space) on each image with the following commands: lljubojevic@Omen17:~$ cd PZ\\ MMOS/ lljubojevic@Omen17:~/PZ MMOS$ ls LB MySQL WS1 WS2 lljubojevic@Omen17:~/PZ MMOS$ cd LB lljubojevic@Omen17:~/PZ MMOS/LB$ qemu-img resize lb.img 30G Image resized. lljubojevic@Omen17:~/PZ MMOS/LB$ cd .. lljubojevic@Omen17:~/PZ MMOS$ cd MySQL/ lljubojevic@Omen17:~/PZ MMOS/MySQL$ qemu-img resize mysql.img 30G Image resized. lljubojevic@Omen17:~/PZ MMOS/MySQL$ cd .. lljubojevic@Omen17:~/PZ MMOS$ cd WS1 lljubojevic@Omen17:~/PZ MMOS/WS1$ qemu-img resize ws1.img 30G Image resized. lljubojevic@Omen17:~/PZ MMOS/WS1$ cd .. lljubojevic@Omen17:~/PZ MMOS$ cd WS2 lljubojevic@Omen17:~/PZ MMOS/WS2$ qemu-img resize ws2.img 30G Image resized. Configuring virtual machines MySQL VM The virtual machine is configured as follows: * Import existing image -> Browse Local -> mysql.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name MySQL * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img Load balancer VM The virtual machine is configured as follows: * Import existing image -> Browse Local -> lb.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name LB * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img Web Server 1 VM The virtual machine is configured as follows: * Import existing image -> Browse Local -> ws1.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name WS1 * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img Web Server 2 VM The virtual machine is configured as follows: * Import existing image -> Browse Local -> ws2.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name WS2 * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img Windows client VM The virtual machine is configured as follows: * Local install media -> Browse Local -> Windows 7 Install DVD.iso * Operating system: Windows Server 2016 * Memory: 4096, CPUS: 2 * Enable storage, disk image: 40GiB * Name WinCl Ubuntu client VM The virtual machine is configured as follows: * Local install media -> Browse Local -> Ubuntu 20.04 Install DVD.iso * Operating system: Ubuntu 20.04 * Memory: 2048, CPUS: 2 * Enable storage, disk image: 20GiB * Name UbuntuCl Andrx86 client VM The virtual machine is configured as follows: * Local install media -> Browse Local -> Android x86 Install DVD * Operating system: Android-x86 9.0 * Memory: 2048, CPUS: 2 * Enable storage, disk image: 10GiB * Name Andrx86Cl Virtualn machine MySQL (database) After a successfull log in from the virt-manager tool, the database server configuration begins. First we find the IP address of the VM: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:5a:31:f3 brd ff:ff:ff:ff:ff:ff inet 192.168.122.77/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 2003sec preferred_lft 2003sec inet6 fe80::5054:ff:fe5a:31f3/64 scope link valid_lft forever preferred_lft forever For simplicity, we connect to the virtual machine from the host using the ssh command: lljubojevic@Omen17:~$ ssh ubuntu@192.168.122.77 The authenticity of host '192.168.122.77 (192.168.122.77)' can't be established. ECDSA key fingerprint is SHA256:91CCjASJznu9k2edurBZjRXqU4CFqa9piL2tFY3VY7Q. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '192.168.122.77' (ECDSA) to the list of known hosts. ubuntu@192.168.122.77's password: Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Sun Jan 9 16:24:25 UTC 2022 System load: 0.21 Processes: 137 Usage of /: 6.0% of 28.90GB Users logged in: 1 Memory usage: 7% IPv4 address for enp1s0: 192.168.122.77 Swap usage: 0% 31 updates can be applied immediately. 14 of these updates are standard security updates. To see these additional updates run: apt list --upgradable Last login: Sun Jan 9 16:20:28 2022 After setting up the ssh connection, we update all repositories and install the MariaDB server: ubuntu@ubuntu:~$ sudo apt update ubuntu@ubuntu:~$ sudo apt install mariadb-server ubuntu@ubuntu:~$ sudo mariadb Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 50 Server version: 10.3.32-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. With command: ubuntu@ubuntu:~$ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf In the section [mysqld] we change the listener address to 0.0.0.0: bind-address = 0.0.0.0 Address 0.0.0.0 represents listening (binding) to each available network - that is, it accepts requests from all parts of the network. After changing the listening address, we restart the MariaDB service: ubuntu@ubuntu:~$ sudo systemctl restart mysql ubuntu@ubuntu:~$ sudo systemctl status mariadb.service \u25cf mariadb.service - MariaDB 10.3.32 database server Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2022-01-09 16:57:15 UTC; 18s ago ... Main PID: 3143 (mysqld) Status: \"Taking your SQL requests now...\" Tasks: 31 (limit: 4682) Memory: 63.8M CGroup: /system.slice/mariadb.service \u2514\u25003143 /usr/sbin/mysqld After setting up the MariaDB service, we create a database for the needs of the web server (web application). In addition to the database, it is necessary to create a user who will have the right to access the database. MariaDB [(none)]> CREATE DATABASE Skladiste; Query OK, 1 row affected (0.001 sec) MariaDB [(none)]> USE Skladiste; Database changed MariaDB [Skladiste]> CREATE USER webserver IDENTIFIED BY 'lozinka1'; Query OK, 0 rows affected (0.002 sec) MariaDB [Skladiste]> GRANT ALL PRIVILEGES ON Skladiste TO webserver; Query OK, 0 rows affected (0.001 sec) The database is ready to be used. Let's see if we can connect to the database from another computer: lljubojevic@Omen17:~$ mysql -h 192.168.122.77 -u webserver -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 39 Server version: 10.3.32-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]> Creating a simple Django web app We will create a web application on the host computer in VS Code. Before creating a web app, you need to install packages to connect to the mysql database: lljubojevic@Omen17:~$ sudo apt install mariadb-client-core-10.3 lljubojevic@Omen17:~/PZ MMOS/Skladiste/skladiste$ pip install mysqlclient Then we create a folder which will contain the web app lljubojevic@Omen17:~/PZ MMOS$ mkdir Skladiste lljubojevic@Omen17:~/PZ MMOS$ cd Skladiste lljubojevic@Omen17:~/PZ MMOS/Skladiste$ django-admin startproject skladiste lljubojevic@Omen17:~/PZ MMOS/Skladiste$ ls skladiste Before you start creating a web application, you need to change the database from SQLite to MySQL. (By default in Django uses SQLite database). In the settings.py file, change DATABASES as follows: lljubojevic@Omen17:~/PZ MMOS/Skladiste$ cd skladiste/skladiste lljubojevic@Omen17:~/PZ MMOS/Skladiste/skladiste/skladiste$ nano settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'Skladiste', 'HOST': '192.168.122.77', 'PORT': '3306', 'USER': 'webserver', 'PASSWORD': 'lozinka1', } } Where: * 'NAME' is the name of the database on the MySQL VM, * 'HOST' IP address of VM MySQL, * 'PORT' default MySQL - Mariadb port, * 'USER' i 'PASSWORD' user that has rights to edit the database We start creating a web application by creating a main app: lljubojevic@Omen17:~/PZ MMOS/Skladiste/skladiste$ django-admin startapp main The application will display the status of the goods in the warehouse. Within the structure of the application we add the following code in the following files: main/urls.py: from django.urls import path from . import views app_name = 'main' urlpatterns = [ path('homepage', views.homepage, name='homepage'), ] main/views.py: from django.shortcuts import render from main.models import Artikl def homepage(request): artikls = Artikl.objects.all() context = {'artikls': artikls} return render(request, 'artikli.html', context=context) main/models.py: from django.db import models # Create your models here. class Artikl(models.Model): SifraArt=models.IntegerField(primary_key=True) NazivArt=models.CharField(max_length=350) KolNaStanju=models.IntegerField() Lokacija=models.CharField(max_length=400) Dostupan=models.BooleanField(default=True) class Meta: db_table = 'Skladiste' main/admin.py: from django.contrib import admin from django.db import models from main.models import Artikl # Register your models here. admin.site.register(Artikl) main/templates/artikli.html: <ul> {% for a in artikls %} <li> Sifra Artikla: {{ a.SifraArt }}<br> Naziv Artikla: {{ a.NazivArt }}<br> Kolicina na stanju:{{ a.KolNaStanju }}<br> Lokacija:{{ a.Lokacija }} <br> Dostupan:{{ a.Dostupan }} </li><br> {% endfor %} </ul> skladiste/urls.py: from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('main/', include('main.urls')), ] skladiste/settings.py: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'main.apps.MainConfig' ] We get a web app that looks something like this: Virtual machines WS1 and WS2 (web servers 1 and 2) After a successfull log in into the systems from the virt-manager tool, the configuration of both servers serving the same web application begins. We first check the IP addresses of the virtual machines: WS1: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:d7:39:a7 brd ff:ff:ff:ff:ff:ff inet 192.168.122.133/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 3524sec preferred_lft 3524sec inet6 fe80::5054:ff:fed7:39a7/64 scope link valid_lft forever preferred_lft forever WS2: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:fe:8c:56 brd ff:ff:ff:ff:ff:ff inet 192.168.122.115/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 3494sec preferred_lft 3494sec inet6 fe80::5054:ff:fefe:8c56/64 scope link valid_lft forever preferred_lft forever Also, for simplicity, we will connect to virtual machines from the host via the ssh command. We install Python3 interpreter and Django framework on both web servers: ubuntu@ubuntu:~$ sudo apt update ubuntu@ubuntu:~$ sudo apt install python3 python3-pip python-is-python3 pylint ubuntu@ubuntu:~$ sudo pip3 install Django Collecting Django Downloading Django-4.0.1-py3-none-any.whl (8.0 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8.0 MB 2.8 MB/s Collecting backports.zoneinfo; python_version < \"3.9\" Downloading backports.zoneinfo-0.2.1-cp38-cp38-manylinux1_x86_64.whl (74 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 74 kB 176 kB/s Collecting sqlparse>=0.2.2 Downloading sqlparse-0.4.2-py3-none-any.whl (42 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 42 kB 747 kB/s Collecting asgiref<4,>=3.4.1 Downloading asgiref-3.4.1-py3-none-any.whl (25 kB) Installing collected packages: backports.zoneinfo, sqlparse, asgiref, Django Successfully installed Django-4.0.1 asgiref-3.4.1 backports.zoneinfo-0.2.1 sqlparse-0.4.2 We set up the root directory of the web application on BOTH web servers: We create a virtual CD image that contains all the files of our web app: lljubojevic@Omen17:~/PZ MMOS/Skladiste$ mkisofs -o webapp.iso ./skladiste I: -input-charset not specified, using utf-8 (detected in locale settings) Total translation table size: 0 Total rockridge attributes bytes: 0 Total directory bytes: 14528 Path table size(bytes): 118 Max brk space used 22000 208 extents written (0 MB) Within the virt-manager tool, we add the CD-ROM image to virtual machines: We mount the CD-ROM to the system with commands: ubuntu@ubuntu:/dev$ cd /media ubuntu@ubuntu:/media$ sudo mkdir cd ubuntu@ubuntu:/media$ sudo mount /dev/sr0 /media/cd mount: /media/cd: WARNING: device write-protected, mounted read-only. All items from the CD-ROM image we copy to te home directory of the server: ubuntu@ubuntu:~$ cd /media/cd ubuntu@ubuntu:/media/cd$ cp -r . /home/ubuntu/webapp ubuntu@ubuntu:/media/cd$ cd /home/ubuntu/webapp ubuntu@ubuntu:~/webapp$ ls main manage.py skladiste Yes, I now know that you can use sftp .. and that it is much easier. :/ On the servers we install MySQL clients (for fetching data): ubuntu@ubuntu:~/webapp$ sudo apt install mariadb-client-core-10.3 ubuntu@ubuntu:~/webapp$ sudo apt-get install python3-dev default-libmysqlclient-dev build-essential ubuntu@ubuntu:~/webapp$ sudo pip3 install mysqlclient Collecting mysqlclient Using cached mysqlclient-2.1.0.tar.gz (87 kB) Building wheels for collected packages: mysqlclient Building wheel for mysqlclient (setup.py) ... done Created wheel for mysqlclient: filename=mysqlclient-2.1.0-cp38-cp38-linux_x86_64.whl size=109128 sha256=7d74ec4c97da034715dcdb88d94a14c6d3ec0fbbc505e94c3ace8d659a388b4a Stored in directory: /root/.cache/pip/wheels/61/e7/42/9d56347e42d7ce19397c0ca050c6bef56640e18be7021ac189 Successfully built mysqlclient Installing collected packages: mysqlclient Successfully installed mysqlclient-2.1.0 We add our servers and the load balancer to allowed hosts in the settings.py file: #WS1 ubuntu@ubuntu:~/webapp/skladiste$ sudo nano settings.py ALLOWED_HOSTS = ['192.168.122.133', '192.168.122.132'] #WS2 ubuntu@ubuntu:~/webapp/skladiste$ sudo nano settings.py ALLOWED_HOSTS = ['192.168.122.115','192.168.122.132'] We start to host the web app on both servers: #WS1: ubuntu@ubuntu:~/webapp$ ./manage.py runserver 192.168.122.133:8000 #WS2: ubuntu@ubuntu:~/webapp$ ./manage.py runserver 192.168.122.115:8000 We remove the CD image from both servers in the virt-manager tool and test the servers. WS1: WS2: Virtual machine LB (Load balancer) After a successfull log in into the system from the virt-manager tool, the load balancer configuration begins. First, We check the IP address of the virtual machine: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:fd:36:0d brd ff:ff:ff:ff:ff:ff inet 192.168.122.132/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 3503sec preferred_lft 3503sec inet6 fe80::5054:ff:fefd:360d/64 scope link valid_lft forever preferred_lft forever We will establish a ssh connection with the VM: ubuntu@ubuntu:~$ sudo apt update. ubuntu@ubuntu:~$ sudo apt install haproxy In the file /etc/haproxy/haproxy.cfg we add the servers configuration: frontend skladiste bind :8000 default_backend sklserveri backend sklserveri server ws1 192.168.122.133:8000 server ws2 192.168.122.115:8000 And restart the HAProxy service: ubuntu@ubuntu:~$ sudo service haproxy restart We can now access web servers via the load balancer: Virtualn Machine Windows client As an example of a architecture database - servers - load balancer - clients, we will use multiple clients on different operating systems. We installed on one virtual machine Windows 7 OS, install options are all defaults. Web application from a client running the Windows 7 operating system: Virtual Machine GNU Linux - Ubutnu client As an example of a architecture database - servers - load balancer - clients, we will use multiple clients on different operating systems. We installed on one virtual machine Ubuntu 20.04 OS, install options are all defaults. Web application from a client running the Ubuntu operating system: Virtual Machine Androidx86 Client As an example of a architecture database - servers - load balancer - clients, we will use multiple clients on different operating systems. We installed on one client Android x86 (Android for x86 processors - processors in typical computers). Installation options are trivial, all defaults. Web application from a client running the Android operating system:","title":"Virtual machines using cloud-init"},{"location":"notes/vm.html#virtual-machines","text":"Luka Ljubojevi\u0107","title":"Virtual Machines"},{"location":"notes/vm.html#introduction","text":"For the topic of the 1st seminar paper from the course Network and Mobile Operating Systems, I created a web server configuration for managing the status and location of items in the warehouse. Shema consists of: Two web servers, MariaDB database, Load balancer, Three clients(Android, Windows, GNU Linux - Ubuntu), Visually: Schema elements are configured as virtual machines within the \"Virtual Machine Manager\" tool. The seminar paper was developed in GNU Linux - Mint, with packages (on a server computer - running virtual machines): virt-manager, cloud-localds, qemu, mariadb-client-core-10.3, python3 pip, mysqlclient","title":"Introduction"},{"location":"notes/vm.html#downloading-ubuntu-server-system-image","text":"For the purposes of the seminar paper, we download the \"Ubuntu Server 20.04 LTS (Focal Fossa) daily builds\" system image, * Available at: https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img We copy the system image four times and rename it according to the name of the virtual machines and arrange them in folders according to the following hierarchy: * PZ MMOS * LB * MySQL * WS1 * WS2 Then we create a user-data file using the cloud-init service that contains: * Password * Attributes that the password does not expire and can be used for ssh authentication User-data: #cloud-config password: lozinka1 chpasswd: {expire: False} ssh_pwauth: True Using the user-data file, we are creating another disk for the virtual machine that will enable login to the system (user-data.img) ... Commands used: lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/MySQL\" lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/LB\" lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/WS1\" lljubojevic@Omen17:~$ cloud-localds user-data.img user-data lljubojevic@Omen17:~$ mv user-data.img \"/home/lljubojevic/PZ MMOS/WS2\" After sorting the images into folders, we increase the capacity (storage space) on each image with the following commands: lljubojevic@Omen17:~$ cd PZ\\ MMOS/ lljubojevic@Omen17:~/PZ MMOS$ ls LB MySQL WS1 WS2 lljubojevic@Omen17:~/PZ MMOS$ cd LB lljubojevic@Omen17:~/PZ MMOS/LB$ qemu-img resize lb.img 30G Image resized. lljubojevic@Omen17:~/PZ MMOS/LB$ cd .. lljubojevic@Omen17:~/PZ MMOS$ cd MySQL/ lljubojevic@Omen17:~/PZ MMOS/MySQL$ qemu-img resize mysql.img 30G Image resized. lljubojevic@Omen17:~/PZ MMOS/MySQL$ cd .. lljubojevic@Omen17:~/PZ MMOS$ cd WS1 lljubojevic@Omen17:~/PZ MMOS/WS1$ qemu-img resize ws1.img 30G Image resized. lljubojevic@Omen17:~/PZ MMOS/WS1$ cd .. lljubojevic@Omen17:~/PZ MMOS$ cd WS2 lljubojevic@Omen17:~/PZ MMOS/WS2$ qemu-img resize ws2.img 30G Image resized.","title":"Downloading ubuntu-server system image"},{"location":"notes/vm.html#configuring-virtual-machines","text":"","title":"Configuring virtual machines"},{"location":"notes/vm.html#mysql-vm","text":"The virtual machine is configured as follows: * Import existing image -> Browse Local -> mysql.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name MySQL * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img","title":"MySQL VM"},{"location":"notes/vm.html#load-balancer-vm","text":"The virtual machine is configured as follows: * Import existing image -> Browse Local -> lb.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name LB * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img","title":"Load balancer VM"},{"location":"notes/vm.html#web-server-1-vm","text":"The virtual machine is configured as follows: * Import existing image -> Browse Local -> ws1.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name WS1 * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img","title":"Web Server 1 VM"},{"location":"notes/vm.html#web-server-2-vm","text":"The virtual machine is configured as follows: * Import existing image -> Browse Local -> ws2.img * Operating system: Ubuntu 20.04 * Memory: 4096, CPUS: 2 * Name WS2 * Customize configuration before install -> Add Hardware -> Storage -> Select storage -> Local -> user-data.img","title":"Web Server 2 VM"},{"location":"notes/vm.html#windows-client-vm","text":"The virtual machine is configured as follows: * Local install media -> Browse Local -> Windows 7 Install DVD.iso * Operating system: Windows Server 2016 * Memory: 4096, CPUS: 2 * Enable storage, disk image: 40GiB * Name WinCl","title":"Windows client VM"},{"location":"notes/vm.html#ubuntu-client-vm","text":"The virtual machine is configured as follows: * Local install media -> Browse Local -> Ubuntu 20.04 Install DVD.iso * Operating system: Ubuntu 20.04 * Memory: 2048, CPUS: 2 * Enable storage, disk image: 20GiB * Name UbuntuCl","title":"Ubuntu client VM"},{"location":"notes/vm.html#andrx86-client-vm","text":"The virtual machine is configured as follows: * Local install media -> Browse Local -> Android x86 Install DVD * Operating system: Android-x86 9.0 * Memory: 2048, CPUS: 2 * Enable storage, disk image: 10GiB * Name Andrx86Cl","title":"Andrx86 client VM"},{"location":"notes/vm.html#virtualn-machine-mysql-database","text":"After a successfull log in from the virt-manager tool, the database server configuration begins. First we find the IP address of the VM: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:5a:31:f3 brd ff:ff:ff:ff:ff:ff inet 192.168.122.77/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 2003sec preferred_lft 2003sec inet6 fe80::5054:ff:fe5a:31f3/64 scope link valid_lft forever preferred_lft forever For simplicity, we connect to the virtual machine from the host using the ssh command: lljubojevic@Omen17:~$ ssh ubuntu@192.168.122.77 The authenticity of host '192.168.122.77 (192.168.122.77)' can't be established. ECDSA key fingerprint is SHA256:91CCjASJznu9k2edurBZjRXqU4CFqa9piL2tFY3VY7Q. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '192.168.122.77' (ECDSA) to the list of known hosts. ubuntu@192.168.122.77's password: Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Sun Jan 9 16:24:25 UTC 2022 System load: 0.21 Processes: 137 Usage of /: 6.0% of 28.90GB Users logged in: 1 Memory usage: 7% IPv4 address for enp1s0: 192.168.122.77 Swap usage: 0% 31 updates can be applied immediately. 14 of these updates are standard security updates. To see these additional updates run: apt list --upgradable Last login: Sun Jan 9 16:20:28 2022 After setting up the ssh connection, we update all repositories and install the MariaDB server: ubuntu@ubuntu:~$ sudo apt update ubuntu@ubuntu:~$ sudo apt install mariadb-server ubuntu@ubuntu:~$ sudo mariadb Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 50 Server version: 10.3.32-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. With command: ubuntu@ubuntu:~$ sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf In the section [mysqld] we change the listener address to 0.0.0.0: bind-address = 0.0.0.0 Address 0.0.0.0 represents listening (binding) to each available network - that is, it accepts requests from all parts of the network. After changing the listening address, we restart the MariaDB service: ubuntu@ubuntu:~$ sudo systemctl restart mysql ubuntu@ubuntu:~$ sudo systemctl status mariadb.service \u25cf mariadb.service - MariaDB 10.3.32 database server Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2022-01-09 16:57:15 UTC; 18s ago ... Main PID: 3143 (mysqld) Status: \"Taking your SQL requests now...\" Tasks: 31 (limit: 4682) Memory: 63.8M CGroup: /system.slice/mariadb.service \u2514\u25003143 /usr/sbin/mysqld After setting up the MariaDB service, we create a database for the needs of the web server (web application). In addition to the database, it is necessary to create a user who will have the right to access the database. MariaDB [(none)]> CREATE DATABASE Skladiste; Query OK, 1 row affected (0.001 sec) MariaDB [(none)]> USE Skladiste; Database changed MariaDB [Skladiste]> CREATE USER webserver IDENTIFIED BY 'lozinka1'; Query OK, 0 rows affected (0.002 sec) MariaDB [Skladiste]> GRANT ALL PRIVILEGES ON Skladiste TO webserver; Query OK, 0 rows affected (0.001 sec) The database is ready to be used. Let's see if we can connect to the database from another computer: lljubojevic@Omen17:~$ mysql -h 192.168.122.77 -u webserver -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 39 Server version: 10.3.32-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. MariaDB [(none)]>","title":"Virtualn machine MySQL (database)"},{"location":"notes/vm.html#creating-a-simple-django-web-app","text":"We will create a web application on the host computer in VS Code. Before creating a web app, you need to install packages to connect to the mysql database: lljubojevic@Omen17:~$ sudo apt install mariadb-client-core-10.3 lljubojevic@Omen17:~/PZ MMOS/Skladiste/skladiste$ pip install mysqlclient Then we create a folder which will contain the web app lljubojevic@Omen17:~/PZ MMOS$ mkdir Skladiste lljubojevic@Omen17:~/PZ MMOS$ cd Skladiste lljubojevic@Omen17:~/PZ MMOS/Skladiste$ django-admin startproject skladiste lljubojevic@Omen17:~/PZ MMOS/Skladiste$ ls skladiste Before you start creating a web application, you need to change the database from SQLite to MySQL. (By default in Django uses SQLite database). In the settings.py file, change DATABASES as follows: lljubojevic@Omen17:~/PZ MMOS/Skladiste$ cd skladiste/skladiste lljubojevic@Omen17:~/PZ MMOS/Skladiste/skladiste/skladiste$ nano settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'Skladiste', 'HOST': '192.168.122.77', 'PORT': '3306', 'USER': 'webserver', 'PASSWORD': 'lozinka1', } } Where: * 'NAME' is the name of the database on the MySQL VM, * 'HOST' IP address of VM MySQL, * 'PORT' default MySQL - Mariadb port, * 'USER' i 'PASSWORD' user that has rights to edit the database We start creating a web application by creating a main app: lljubojevic@Omen17:~/PZ MMOS/Skladiste/skladiste$ django-admin startapp main The application will display the status of the goods in the warehouse. Within the structure of the application we add the following code in the following files: main/urls.py: from django.urls import path from . import views app_name = 'main' urlpatterns = [ path('homepage', views.homepage, name='homepage'), ] main/views.py: from django.shortcuts import render from main.models import Artikl def homepage(request): artikls = Artikl.objects.all() context = {'artikls': artikls} return render(request, 'artikli.html', context=context) main/models.py: from django.db import models # Create your models here. class Artikl(models.Model): SifraArt=models.IntegerField(primary_key=True) NazivArt=models.CharField(max_length=350) KolNaStanju=models.IntegerField() Lokacija=models.CharField(max_length=400) Dostupan=models.BooleanField(default=True) class Meta: db_table = 'Skladiste' main/admin.py: from django.contrib import admin from django.db import models from main.models import Artikl # Register your models here. admin.site.register(Artikl) main/templates/artikli.html: <ul> {% for a in artikls %} <li> Sifra Artikla: {{ a.SifraArt }}<br> Naziv Artikla: {{ a.NazivArt }}<br> Kolicina na stanju:{{ a.KolNaStanju }}<br> Lokacija:{{ a.Lokacija }} <br> Dostupan:{{ a.Dostupan }} </li><br> {% endfor %} </ul> skladiste/urls.py: from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('main/', include('main.urls')), ] skladiste/settings.py: INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'main.apps.MainConfig' ] We get a web app that looks something like this:","title":"Creating a simple Django web app"},{"location":"notes/vm.html#virtual-machines-ws1-and-ws2-web-servers-1-and-2","text":"After a successfull log in into the systems from the virt-manager tool, the configuration of both servers serving the same web application begins. We first check the IP addresses of the virtual machines: WS1: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:d7:39:a7 brd ff:ff:ff:ff:ff:ff inet 192.168.122.133/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 3524sec preferred_lft 3524sec inet6 fe80::5054:ff:fed7:39a7/64 scope link valid_lft forever preferred_lft forever WS2: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:fe:8c:56 brd ff:ff:ff:ff:ff:ff inet 192.168.122.115/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 3494sec preferred_lft 3494sec inet6 fe80::5054:ff:fefe:8c56/64 scope link valid_lft forever preferred_lft forever Also, for simplicity, we will connect to virtual machines from the host via the ssh command. We install Python3 interpreter and Django framework on both web servers: ubuntu@ubuntu:~$ sudo apt update ubuntu@ubuntu:~$ sudo apt install python3 python3-pip python-is-python3 pylint ubuntu@ubuntu:~$ sudo pip3 install Django Collecting Django Downloading Django-4.0.1-py3-none-any.whl (8.0 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8.0 MB 2.8 MB/s Collecting backports.zoneinfo; python_version < \"3.9\" Downloading backports.zoneinfo-0.2.1-cp38-cp38-manylinux1_x86_64.whl (74 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 74 kB 176 kB/s Collecting sqlparse>=0.2.2 Downloading sqlparse-0.4.2-py3-none-any.whl (42 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 42 kB 747 kB/s Collecting asgiref<4,>=3.4.1 Downloading asgiref-3.4.1-py3-none-any.whl (25 kB) Installing collected packages: backports.zoneinfo, sqlparse, asgiref, Django Successfully installed Django-4.0.1 asgiref-3.4.1 backports.zoneinfo-0.2.1 sqlparse-0.4.2 We set up the root directory of the web application on BOTH web servers: We create a virtual CD image that contains all the files of our web app: lljubojevic@Omen17:~/PZ MMOS/Skladiste$ mkisofs -o webapp.iso ./skladiste I: -input-charset not specified, using utf-8 (detected in locale settings) Total translation table size: 0 Total rockridge attributes bytes: 0 Total directory bytes: 14528 Path table size(bytes): 118 Max brk space used 22000 208 extents written (0 MB) Within the virt-manager tool, we add the CD-ROM image to virtual machines: We mount the CD-ROM to the system with commands: ubuntu@ubuntu:/dev$ cd /media ubuntu@ubuntu:/media$ sudo mkdir cd ubuntu@ubuntu:/media$ sudo mount /dev/sr0 /media/cd mount: /media/cd: WARNING: device write-protected, mounted read-only. All items from the CD-ROM image we copy to te home directory of the server: ubuntu@ubuntu:~$ cd /media/cd ubuntu@ubuntu:/media/cd$ cp -r . /home/ubuntu/webapp ubuntu@ubuntu:/media/cd$ cd /home/ubuntu/webapp ubuntu@ubuntu:~/webapp$ ls main manage.py skladiste Yes, I now know that you can use sftp .. and that it is much easier. :/ On the servers we install MySQL clients (for fetching data): ubuntu@ubuntu:~/webapp$ sudo apt install mariadb-client-core-10.3 ubuntu@ubuntu:~/webapp$ sudo apt-get install python3-dev default-libmysqlclient-dev build-essential ubuntu@ubuntu:~/webapp$ sudo pip3 install mysqlclient Collecting mysqlclient Using cached mysqlclient-2.1.0.tar.gz (87 kB) Building wheels for collected packages: mysqlclient Building wheel for mysqlclient (setup.py) ... done Created wheel for mysqlclient: filename=mysqlclient-2.1.0-cp38-cp38-linux_x86_64.whl size=109128 sha256=7d74ec4c97da034715dcdb88d94a14c6d3ec0fbbc505e94c3ace8d659a388b4a Stored in directory: /root/.cache/pip/wheels/61/e7/42/9d56347e42d7ce19397c0ca050c6bef56640e18be7021ac189 Successfully built mysqlclient Installing collected packages: mysqlclient Successfully installed mysqlclient-2.1.0 We add our servers and the load balancer to allowed hosts in the settings.py file: #WS1 ubuntu@ubuntu:~/webapp/skladiste$ sudo nano settings.py ALLOWED_HOSTS = ['192.168.122.133', '192.168.122.132'] #WS2 ubuntu@ubuntu:~/webapp/skladiste$ sudo nano settings.py ALLOWED_HOSTS = ['192.168.122.115','192.168.122.132'] We start to host the web app on both servers: #WS1: ubuntu@ubuntu:~/webapp$ ./manage.py runserver 192.168.122.133:8000 #WS2: ubuntu@ubuntu:~/webapp$ ./manage.py runserver 192.168.122.115:8000 We remove the CD image from both servers in the virt-manager tool and test the servers. WS1: WS2:","title":"Virtual machines WS1 and WS2 (web servers 1 and 2)"},{"location":"notes/vm.html#virtual-machine-lb-load-balancer","text":"After a successfull log in into the system from the virt-manager tool, the load balancer configuration begins. First, We check the IP address of the virtual machine: ubuntu@ubuntu:~$ ip address 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: enp1s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether 52:54:00:fd:36:0d brd ff:ff:ff:ff:ff:ff inet 192.168.122.132/24 brd 192.168.122.255 scope global dynamic enp1s0 valid_lft 3503sec preferred_lft 3503sec inet6 fe80::5054:ff:fefd:360d/64 scope link valid_lft forever preferred_lft forever We will establish a ssh connection with the VM: ubuntu@ubuntu:~$ sudo apt update. ubuntu@ubuntu:~$ sudo apt install haproxy In the file /etc/haproxy/haproxy.cfg we add the servers configuration: frontend skladiste bind :8000 default_backend sklserveri backend sklserveri server ws1 192.168.122.133:8000 server ws2 192.168.122.115:8000 And restart the HAProxy service: ubuntu@ubuntu:~$ sudo service haproxy restart We can now access web servers via the load balancer:","title":"Virtual machine LB (Load balancer)"},{"location":"notes/vm.html#virtualn-machine-windows-client","text":"As an example of a architecture database - servers - load balancer - clients, we will use multiple clients on different operating systems. We installed on one virtual machine Windows 7 OS, install options are all defaults. Web application from a client running the Windows 7 operating system:","title":"Virtualn Machine Windows client"},{"location":"notes/vm.html#virtual-machine-gnu-linux-ubutnu-client","text":"As an example of a architecture database - servers - load balancer - clients, we will use multiple clients on different operating systems. We installed on one virtual machine Ubuntu 20.04 OS, install options are all defaults. Web application from a client running the Ubuntu operating system:","title":"Virtual Machine GNU Linux - Ubutnu client"},{"location":"notes/vm.html#virtual-machine-androidx86-client","text":"As an example of a architecture database - servers - load balancer - clients, we will use multiple clients on different operating systems. We installed on one client Android x86 (Android for x86 processors - processors in typical computers). Installation options are trivial, all defaults. Web application from a client running the Android operating system:","title":"Virtual Machine Androidx86 Client"},{"location":"notes/wg.html","text":"Creating a Docker-based VPN using WireGuard Created for doc. dr. sc. Vedran Mileti\u0107 to create teaching materials for course Security of Information and Communication Systems A virtual private network (VPN) provides private network services using a public network such as the Internet. With a VPN, we can send and receive data over a public network while using a private LAN configuration. VPN uses various security mechanisms to ensure the confidentiality and authenticity of the data we send. A virtual private network can be created with a number of protocols, such as L2TP on the link layer (which implements xl2tpd ), IPsec on the network layer (which implements strongSwan ) and SSTP on the transport layer (which implements SoftEther VPN ). WireGuard is a very simple but modern VPN server and client that uses the latest cryptographic technologies. It aims to be faster, simpler, more reliable and more useful than IPsec. It is also a serious competition to OpenVPN. It was initially released for Linux kernel-based systems, but has now become a multi-platform solution for establishing a VPN network. The development of WireGuard is still ongoing, although it is already considered the safest and easiest to use VPN solution in the industry. WireGuard uses state-of-the-art cryptographic technologies such as: * Noise protocol framework , * Curve25519 , * ChaCha20 , * Poly1305 , * BLAKE2 , * SipHash24 , * HKDF With the release of the Linux kernel 5.6, the version of WireGuard for the Linux platform is moving to a stable production release and is being built into the Linux kernel itself. Because the Linux kernel, and its components, are open source (GNU General Public License (GPL) version 2), by merging WireGuard with the Linux kernel, the source code becomes available to the general public. After connecting the WireGuard client to the WireGuard server (described below), a tunnel is created through the Internet through which data is then sent. The data passing through the tunnel is encrypted so that third parties on the Internet cannot read it, and various types of compression can be used to make the data smaller. Setting up WireGuard VPN using Docker Installing Docker If you are not a sudo user: Ask your administrator to install Docker with the command: * Ubuntu-based distros: sudo apt-get install docker docker-compose Arch-based distros: sudo pacman -S docker docker-compose Then install all Docker dependencies: * Ubuntu-based distros: sudo apt-get install -y dbus-user-session sudo apt-get install -y uidmap Arch-based distros: sudo pacman -S shadow sudo pacman -S fuse-overlayfs Zatim ugasite Docker servis naredbom: sudo systemctl disable --now docker.service docker.socket Before installing Docker alata Docker you must generate subuid and subgid. Subuid authorizes the user ID to map the range of user IDs from its namespace to child namespaces. Subgid authorizes the user group ID to map the range of group IDs from its namespaces to child namespaces. To generate subuids and subgids, you need to write a Python script with the following code: f = open(\"/etc/subuid\", \"w\") for uid in range(1000, 65536): f.write(\"%d:%d:65536\\n\" %(uid,uid*65536)) f.close() f = open(\"/etc/subgid\", \"w\") for uid in range(1000, 65536): f.write(\"%d:%d:65536\\n\" %(uid,uid*65536)) f.close() Then we execute the Python script and install Docker from the repository \" rootless \": sudo python3 uid.py curl -fsSL https://get.docker.com/rootless | sh After installation, if you use systems based on Ubuntu distribution, mark variables and functions that are passed to subordinate processes (\"export\"): export PATH=/home/lljubojevic/bin:$PATH export DOCKER_HOST=unix:///run/user/1000/docker.sock Set the appropriate access permissions for your Docker user with the command: sudo chmod 666 /var/run/docker.sock Finally, to configure the WireGuard client server, execute port traffic acceptance commands that the WireGuard server will use: sudo ufw allow 51820 sudo iptables -I INPUT -p tcp -m tcp --dport 51820 -j ACCEPT Then, start Docker as a rootless user: systemctl --user enable docker systemctl --user start docker If you are a sudo user: Install Docker this way: * Ubuntu-based distros: sudo apt-get install docker docker-compose Arch-based distros: sudo pacman -S docker docker-compose Start Docker service using: sudo systemctl enable --now docker.service docker.socket Additionally, if you want to start Docker at startup, run the command: * Ubuntu-based distros: sudo loginctl enable-linger $(whoami) Arch-based distros: sudo loginctl enable-linger (whoami) WireGuard VPN Server Setup Assuming you have administrator privileges, to configure the WireGuard client server, execute port traffic acceptance commands that the WireGuard server will use: sudo ufw allow 51820 sudo iptables -I INPUT -p tcp -m tcp --dport 51820 -j ACCEPT Make a directory: mkdir wireguard-server In that directory create a \"docker-compose.yaml\" file: nano docker-compose.yaml docker-compose.yaml for server : version: \"2.1\" services: wireguard: image: linuxserver/wireguard container_name: wireguard-server cap_add: - NET_ADMIN - SYS_MODULE environment: - PUID=1000 - PGID=1000 - TZ=Europe/Zagreb - SERVERURL=10.13.13.1 - SERVERPORT=51820 - PEERS=1 - PEERDNS=auto volumes: - /home/lljubojevic/wireguard-server/config:/config - /home/lljubojevic/wireguard-server/modules:/lib/modules ports: - 51820:51820/udp sysctls: - net.ipv6.conf.all.disable_ipv6=0 restart: unless-stopped Then execute the creation of a Docker WireGuard VPN server container: docker-compose up -d Does it work?: If the command: docker logs wireguard-server shows output as: [s6-init] making user provided files available at /var/run/s6/etc...exited 0. [s6-init] ensuring user provided files have correct perms...exited 0. [fix-attrs.d] applying ownership & permissions fixes... [fix-attrs.d] done. [cont-init.d] executing container initialization scripts... [cont-init.d] 01-envfile: executing... [cont-init.d] 01-envfile: exited 0. [cont-init.d] 01-migrations: executing... [migrations] started [migrations] no migrations found [cont-init.d] 01-migrations: exited 0. [cont-init.d] 02-tamper-check: executing... [cont-init.d] 02-tamper-check: exited 0. [cont-init.d] 10-adduser: executing... ------------------------------------- _ () | | ___ _ __ | | / __| | | / \\ | | \\__ \\ | | | () | |_| |___/ |_| \\__/ Brought to you by linuxserver.io ------------------------------------- To support the app dev(s) visit: WireGuard: https://www.wireguard.com/donations/ To support LSIO projects visit: https://www.linuxserver.io/donate/ ------------------------------------- GID/UID ------------------------------------- User uid: 1000 User gid: 1000 ------------------------------------- [cont-init.d] 10-adduser: exited 0. [cont-init.d] 30-module: executing... Uname info: Linux 12320232623e 5.16.10-zen1-1-zen #1 ZEN SMP PREEMPT Wed, 16 Feb 2022 19:35:21 +0000 x86_64 x86_64 x86_64 GNU/Linux **** It seems the wireguard module is already active. Skipping kernel header install and module compilation. **** [cont-init.d] 30-module: exited 0. [cont-init.d] 40-confs: executing... **** Server mode is selected **** **** External server address is set to 10.13.13.1 **** **** External server port is set to 51820. Make sure that port is properly forwarded to port 51820 inside this container **** **** Internal subnet is set to 10.13.13.0 **** **** AllowedIPs for peers 0.0.0.0/0, ::/0 **** **** PEERDNS var is either not set or is set to \"auto\", setting peer DNS to 10.13.13.1 to use wireguard docker host's DNS. **** **** Server mode is selected **** **** Server related environment variables changed, regenerating 1 server and 1 peer/client confs **** PEER 1 QR code: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2584\u2584\u2584 \u2588\u2580\u2580\u2588\u2584\u2588 \u2584\u2584 \u2584\u2588\u2588 \u2584\u2580\u2580\u2584\u2584\u2584 \u2584\u2588 \u2584\u2584\u2584\u2584\u2584\u2580\u2584 \u2588\u2584 \u2584\u2588\u2584\u2580\u2584 \u2588\u2588 \u2584\u2584\u2584\u2584\u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2584\u2588 \u2580\u2580\u2584\u2588\u2588\u2588 \u2584 \u2588\u2584\u2584\u2588\u2584\u2580\u2584\u2588\u2584\u2580 \u2584\u2584\u2588 \u2588\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2584 \u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588 \u2588\u2584\u2580\u2584\u2584\u2588\u2588\u2588\u2588 \u2580\u2588\u2588\u2580\u2580\u2584 \u2584\u2584\u2584 \u2580 \u2584\u2588\u2588\u2584\u2580\u2584 \u2588 \u2580\u2580\u2584\u2580\u2584\u2588\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588 \u2580 \u2588 \u2588 \u2580 \u2580 \u2580 \u2580 \u2580\u2584\u2588 \u2588\u2584\u2588 \u2580\u2584\u2580\u2584\u2588\u2584\u2588 \u2580\u2584\u2588\u2584\u2580 \u2580 \u2580\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580\u2584\u2588\u2580\u2584 \u2580\u2584\u2588 \u2584\u2580\u2588\u2588\u2580\u2584\u2580\u2588 \u2584\u2584\u2580\u2584 \u2584\u2584\u2584\u2580\u2588\u2580\u2584\u2584 \u2580\u2588\u2580\u2588 \u2588\u2580\u2584\u2588\u2580\u2584\u2584\u2588\u2584 \u2580 \u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2580\u2584 \u2588 \u2584\u2588\u2580\u2588 \u2580\u2580\u2584\u2588\u2584 \u2580\u2580 \u2580\u2580\u2588\u2584\u2588 \u2588 \u2580\u2580\u2584\u2580\u2584\u2588 \u2580\u2584\u2584 \u2584 \u2580 \u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2584\u2580\u2580 \u2584\u2584\u2588\u2588\u2580\u2588\u2584\u2584\u2584 \u2580 \u2580\u2588 \u2580\u2588 \u2584 \u2580 \u2584\u2588\u2584 \u2584 \u2588\u2584\u2584\u2588\u2580\u2580\u2584 \u2584 \u2584\u2588\u2584\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584 \u2584 \u2588\u2584\u2580\u2580\u2588 \u2588\u2580\u2584\u2588\u2584\u2588\u2588\u2584 \u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2584\u2588 \u2580\u2584\u2580\u2580 \u2580\u2584 \u2588\u2588 \u2588 \u2588 \u2588 \u2580 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2580\u2580\u2584\u2580 \u2584 \u2580\u2584 \u2584\u2588\u2588\u2584\u2584\u2584\u2580\u2584\u2580 \u2588\u2588 \u2588 \u2580\u2584\u2584 \u2588\u2584\u2584\u2584\u2588 \u2580 \u2588 \u2584\u2584\u2588\u2588\u2584 \u2584\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2580\u2580\u2580\u2588\u2580\u2584 \u2584 \u2584\u2580\u2580\u2580\u2584\u2588 \u2580\u2584\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2584 \u2580\u2580\u2584 \u2584\u2580\u2580\u2584 \u2588\u2580\u2580 \u2584\u2580 \u2588\u2588\u2588\u2580\u2580\u2588\u2580\u2584\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2580\u2588 \u2584\u2588\u2588\u2580\u2588 \u2588\u2588\u2588\u2588 \u2580\u2584 \u2588\u2584\u2584\u2584 \u2584\u2584 \u2584 \u2580\u2584\u2588 \u2584 \u2588\u2584\u2584\u2588\u2588\u2584\u2588 \u2584 \u2588\u2588\u2584 \u2584\u2580\u2584\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580 \u2584 \u2580\u2580\u2584 \u2588\u2580 \u2584\u2584 \u2588 \u2584\u2580 \u2588\u2584\u2580\u2580\u2580 \u2580\u2584 \u2580\u2588 \u2584\u2588 \u2584\u2580\u2588 \u2580\u2580\u2584\u2580\u2584\u2588\u2584\u2584 \u2584\u2588 \u2584\u2580\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2584 \u2584\u2588\u2588\u2584 \u2588\u2588\u2588\u2580\u2580\u2584\u2588\u2588\u2580 \u2584\u2588\u2584 \u2588\u2584\u2580 \u2584 \u2588\u2580\u2580 \u2580\u2580\u2584\u2584 \u2580\u2584\u2580\u2588\u2580\u2584\u2580 \u2588\u2588\u2580\u2588\u2584 \u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2588 \u2584\u2584\u2584 \u2584\u2584 \u2580\u2584 \u2584\u2580\u2580\u2580 \u2588\u2588\u2584 \u2588 \u2584\u2584\u2584 \u2584\u2580 \u2588 \u2588\u2580 \u2580\u2588\u2584\u2580\u2580\u2584 \u2584\u2584\u2584 \u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584 \u2584\u2584 \u2588\u2584\u2588 \u2584 \u2580 \u2580\u2588\u2584\u2588\u2584\u2588\u2584\u2584\u2588\u2588\u2584\u2584 \u2588\u2584\u2588 \u2584 \u2588\u2584\u2584 \u2584\u2584\u2584\u2580\u2588\u2584\u2588\u2584\u2584\u2588\u2584 \u2588\u2584\u2588 \u2580\u2580\u2588\u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2580 \u2584\u2584\u2584\u2584\u2584 \u2584 \u2580\u2580\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2580\u2584\u2584\u2584 \u2584\u2584 \u2580\u2580\u2584 \u2588\u2588\u2588\u2588\u2580\u2580\u2584\u2588 \u2588\u2580 \u2584\u2584 \u2584\u2588\u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580\u2588\u2588\u2584 \u2584 \u2580\u2584\u2584\u2580\u2580\u2584 \u2584\u2588\u2580 \u2584\u2580 \u2588\u2584 \u2580\u2584\u2588 \u2584\u2580\u2588\u2580\u2584\u2580 \u2584\u2584\u2588\u2584\u2584\u2584 \u2580\u2580\u2588 \u2580\u2588\u2580\u2584\u2588\u2580\u2588\u2588\u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580\u2588\u2584 \u2588\u2584\u2584\u2584 \u2580\u2588\u2580\u2588\u2588\u2588\u2580\u2584\u2588\u2588\u2580\u2580\u2588\u2580\u2580\u2580 \u2584\u2588\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2580\u2588\u2580\u2584\u2584\u2584\u2584 \u2588 \u2584\u2588\u2584\u2580 \u2584\u2588\u2580\u2584\u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2588 \u2584\u2588 \u2584 \u2580\u2584\u2584 \u2580\u2584\u2580 \u2588\u2584 \u2584\u2584\u2580 \u2584\u2584 \u2584\u2584 \u2580\u2584\u2580\u2584\u2588\u2588\u2588\u2588\u2584 \u2588 \u2588 \u2580\u2584\u2588\u2580\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2580\u2584\u2580\u2584\u2584\u2584\u2584\u2580\u2584\u2588\u2580\u2580\u2588 \u2584\u2580\u2580\u2588 \u2584\u2580\u2584\u2580\u2584\u2584 \u2580\u2584\u2588\u2584 \u2580\u2588\u2584 \u2584\u2584 \u2588\u2588\u2580\u2588\u2580\u2588\u2588\u2580 \u2584\u2580\u2584\u2588\u2584\u2580\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2584\u2584\u2588 \u2588\u2584\u2588\u2588\u2584 \u2584 \u2584 \u2588\u2584\u2584 \u2588 \u2580 \u2584 \u2588\u2588\u2588 \u2580\u2588\u2588\u2584 \u2580 \u2584\u2580\u2584\u2584\u2580\u2584\u2588\u2580\u2584 \u2588\u2584\u2580 \u2584\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2580\u2588\u2588\u2588\u2584\u2580 \u2584\u2588\u2580 \u2588\u2580 \u2588\u2584\u2588 \u2588\u2580 \u2588\u2584\u2580\u2580\u2588 \u2580\u2588 \u2580 \u2580\u2584\u2584\u2580 \u2588\u2588 \u2588\u2588\u2584 \u2580\u2580\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2588\u2584\u2580\u2580\u2580\u2584\u2584 \u2584\u2580 \u2588 \u2584\u2584\u2584\u2584\u2588\u2584 \u2588 \u2588\u2580\u2588\u2580\u2584 \u2588 \u2588\u2588\u2584\u2580 \u2588\u2588\u2588 \u2580\u2584 \u2580\u2588\u2584 \u2588\u2580 \u2588\u2584\u2580\u2588\u2588\u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580 \u2580\u2580\u2584\u2584\u2580 \u2580\u2580\u2580\u2580\u2584\u2580 \u2584\u2584\u2584\u2584\u2588 \u2580\u2584\u2580\u2588\u2580 \u2588 \u2584\u2588\u2580\u2584\u2580\u2588\u2580\u2588\u2580 \u2584\u2580\u2584 \u2580 \u2584\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588 \u2580\u2584\u2588 \u2588 \u2584\u2584\u2580\u2588\u2584 \u2588\u2584\u2588 \u2584\u2584\u2584 \u2580\u2584\u2580 \u2584\u2584\u2580\u2584\u2588 \u2588\u2584\u2584 \u2584\u2580\u2588 \u2584\u2584\u2584 \u2584\u2588 \u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2584\u2584\u2584 \u2588\u2584 \u2584\u2588\u2580\u2584\u2584 \u2580\u2588\u2584\u2580\u2584 \u2580 \u2588\u2584\u2588 \u2588\u2580\u2584\u2580\u2584\u2588\u2588\u2580 \u2584\u2580\u2588\u2580\u2580 \u2588\u2584\u2588 \u2588\u2584 \u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2580\u2584\u2588\u2580 \u2580\u2584\u2588\u2580\u2588\u2584\u2580 \u2580 \u2584\u2584 \u2580\u2584\u2580\u2588\u2584\u2580\u2588 \u2580\u2588\u2580\u2588\u2580 \u2588\u2584\u2588 \u2584 \u2588\u2588 \u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588\u2580\u2588\u2580\u2584\u2580\u2584\u2588\u2588\u2588 \u2584\u2584\u2584\u2588 \u2588\u2580\u2584\u2580\u2584\u2584 \u2584\u2580\u2584\u2584\u2580\u2588\u2584 \u2580\u2588\u2584\u2580 \u2584\u2584 \u2580\u2584 \u2588 \u2584\u2584\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2584\u2588\u2584\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2584\u2588\u2584\u2584\u2584\u2588\u2584\u2584\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 [cont-init.d] 40-confs: exited 0. [cont-init.d] 90-custom-folders: executing... [cont-init.d] 90-custom-folders: exited 0. [cont-init.d] 99-custom-scripts: executing... [custom-init] no custom files found exiting... [cont-init.d] 99-custom-scripts: exited 0. [cont-init.d] done. [services.d] starting services [services.d] done. [#] ip link add wg0 type wireguard [#] wg setconf wg0 /dev/fd/63 [#] ip -4 address add 10.13.13.1 dev wg0 [#] ip link set mtu 1420 up dev wg0 [#] ip -4 route add 10.13.13.2/32 dev wg0 [#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE .:53 CoreDNS-1.9.0 linux/amd64, go1.17.6, ace3dcb It works! WireGuard VPN Client Setup Make a directory: mkdir wireguard-klijent In that directory create the \"docker-compose.yaml\" file: nano docker-compose.yaml docker-compose.yaml for client : version: '3.7' services: wireguard: image: linuxserver/wireguard container_name: wireguard-klijent restart: unless-stopped networks: - backbone volumes: - './wireguard:/config' - '/lib/modules:/lib/modules:ro' environment: - PUID=1000 - PGID=1000 cap_add: - NET_ADMIN - SYS_MODULE sysctls: - net.ipv6.conf.all.disable_ipv6=0 networks: backbone: driver: bridge It is necessary to generate a docker container for the client, which is not currently functional, in order for a creation of the configuration directory: docker-compose up -d Then, after launching the container, it is necessary to create a WireGuard network interface through which the client communicates with the server: docker exec -it wireguard-klijent ip link add dev wg0 type wireguard When the server is generated, a \"peer\" configuration file called \"peerX.conf\" will also be created. The contents of this file need to be overwritten in the wg0.conf file, which will be located in the wireguard-client directory. Let's do that: cp ./wireguard-server/config/peer/peer1.conf ./wireguard-klijent/wireguard/wg0.conf Change the wg0.conf file as following: [Interface] Address = 10.13.13.2 PrivateKey = 8NWt7q+Vg2f5IdULtIZQ06osuEfNZI4aOf3fjp0CTXY= ListenPort = 51820 DNS = 10.13.13.1 [Peer] PublicKey = nRWxNsBzC+bre4qzjLsWQp8Y9vo82JYF7N8XNLiTaxQ= Endpoint = 10.13.13.1:51820 AllowedIPs = 0.0.0.0/0, ::/0 Notes: * If you set a parameter from the server configuration to a number greater than one (PEERS = n) n directories for nodes and configurations for them will be created, the instructions assume that you have only one client node. * The wg0.conf file may vary. * Testing the Client-Server VPN architecture: docker exec -it wireguard-server curl -w \"\\n\" ifconfig.me 46.188.154.181 docker exec -it wireguard-klijent curl -w \"\\n\" ifconfig.me 46.188.154.181 If the IP addresses are the same, the configuration is valid. The IP address displayed is your current (or permanent) IP address by which you access the Internet. Explanation of configuration parameters in docker-compose.yaml file Server side must contain parameters: * version: \"2.1\" - the required version of the docker-compose tool * services: - services started by the container * wireguard: - service name * image: - the requested image that the Docker tool retrieves from its repository, and container_name: - arbitrary container name. * cap_add: - gives the container elevated permissions on the host computer and allows it to interact with the host's network interfaces. * environment: - environment settings inside the Docker container * PUID and PGID - variables that define the user and group * TZ = Europe / Zagreb - container time zone, needs to be defined * SERVERURL - server domain name (can be empty, defined by the public IP address of the server or set to automatic configuration) * SERVERPORT - the door on which the server opens * PEERS - number of nodes in the VPN network (can be number or type name: laptop, tablet, phone) * PEERDNS - when set to auto, the container adjusts the DNS settings itself * volumes: - directories on the host that the container may use * ports: - the door that the container may use * sysctls: - parameters that allow the container to communicate with networks externally * restart: - defines in which cases the container may be restarted. Sources Pedrolamas Markontech Spad.uk","title":"Wireguard in Docker"},{"location":"notes/wg.html#creating-a-docker-based-vpn-using-wireguard","text":"Created for doc. dr. sc. Vedran Mileti\u0107 to create teaching materials for course Security of Information and Communication Systems A virtual private network (VPN) provides private network services using a public network such as the Internet. With a VPN, we can send and receive data over a public network while using a private LAN configuration. VPN uses various security mechanisms to ensure the confidentiality and authenticity of the data we send. A virtual private network can be created with a number of protocols, such as L2TP on the link layer (which implements xl2tpd ), IPsec on the network layer (which implements strongSwan ) and SSTP on the transport layer (which implements SoftEther VPN ). WireGuard is a very simple but modern VPN server and client that uses the latest cryptographic technologies. It aims to be faster, simpler, more reliable and more useful than IPsec. It is also a serious competition to OpenVPN. It was initially released for Linux kernel-based systems, but has now become a multi-platform solution for establishing a VPN network. The development of WireGuard is still ongoing, although it is already considered the safest and easiest to use VPN solution in the industry. WireGuard uses state-of-the-art cryptographic technologies such as: * Noise protocol framework , * Curve25519 , * ChaCha20 , * Poly1305 , * BLAKE2 , * SipHash24 , * HKDF With the release of the Linux kernel 5.6, the version of WireGuard for the Linux platform is moving to a stable production release and is being built into the Linux kernel itself. Because the Linux kernel, and its components, are open source (GNU General Public License (GPL) version 2), by merging WireGuard with the Linux kernel, the source code becomes available to the general public. After connecting the WireGuard client to the WireGuard server (described below), a tunnel is created through the Internet through which data is then sent. The data passing through the tunnel is encrypted so that third parties on the Internet cannot read it, and various types of compression can be used to make the data smaller.","title":"Creating a Docker-based VPN using WireGuard"},{"location":"notes/wg.html#setting-up-wireguard-vpn-using-docker","text":"","title":"Setting up WireGuard VPN using Docker"},{"location":"notes/wg.html#installing-docker","text":"","title":"Installing Docker"},{"location":"notes/wg.html#if-you-are-not-a-sudo-user","text":"Ask your administrator to install Docker with the command: * Ubuntu-based distros: sudo apt-get install docker docker-compose Arch-based distros: sudo pacman -S docker docker-compose Then install all Docker dependencies: * Ubuntu-based distros: sudo apt-get install -y dbus-user-session sudo apt-get install -y uidmap Arch-based distros: sudo pacman -S shadow sudo pacman -S fuse-overlayfs Zatim ugasite Docker servis naredbom: sudo systemctl disable --now docker.service docker.socket Before installing Docker alata Docker you must generate subuid and subgid. Subuid authorizes the user ID to map the range of user IDs from its namespace to child namespaces. Subgid authorizes the user group ID to map the range of group IDs from its namespaces to child namespaces. To generate subuids and subgids, you need to write a Python script with the following code: f = open(\"/etc/subuid\", \"w\") for uid in range(1000, 65536): f.write(\"%d:%d:65536\\n\" %(uid,uid*65536)) f.close() f = open(\"/etc/subgid\", \"w\") for uid in range(1000, 65536): f.write(\"%d:%d:65536\\n\" %(uid,uid*65536)) f.close() Then we execute the Python script and install Docker from the repository \" rootless \": sudo python3 uid.py curl -fsSL https://get.docker.com/rootless | sh After installation, if you use systems based on Ubuntu distribution, mark variables and functions that are passed to subordinate processes (\"export\"): export PATH=/home/lljubojevic/bin:$PATH export DOCKER_HOST=unix:///run/user/1000/docker.sock Set the appropriate access permissions for your Docker user with the command: sudo chmod 666 /var/run/docker.sock Finally, to configure the WireGuard client server, execute port traffic acceptance commands that the WireGuard server will use: sudo ufw allow 51820 sudo iptables -I INPUT -p tcp -m tcp --dport 51820 -j ACCEPT Then, start Docker as a rootless user: systemctl --user enable docker systemctl --user start docker","title":"If you are not a sudo user:"},{"location":"notes/wg.html#if-you-are-a-sudo-user","text":"Install Docker this way: * Ubuntu-based distros: sudo apt-get install docker docker-compose Arch-based distros: sudo pacman -S docker docker-compose Start Docker service using: sudo systemctl enable --now docker.service docker.socket Additionally, if you want to start Docker at startup, run the command: * Ubuntu-based distros: sudo loginctl enable-linger $(whoami) Arch-based distros: sudo loginctl enable-linger (whoami)","title":"If you are a sudo user:"},{"location":"notes/wg.html#wireguard-vpn-server-setup","text":"Assuming you have administrator privileges, to configure the WireGuard client server, execute port traffic acceptance commands that the WireGuard server will use: sudo ufw allow 51820 sudo iptables -I INPUT -p tcp -m tcp --dport 51820 -j ACCEPT Make a directory: mkdir wireguard-server In that directory create a \"docker-compose.yaml\" file: nano docker-compose.yaml docker-compose.yaml for server : version: \"2.1\" services: wireguard: image: linuxserver/wireguard container_name: wireguard-server cap_add: - NET_ADMIN - SYS_MODULE environment: - PUID=1000 - PGID=1000 - TZ=Europe/Zagreb - SERVERURL=10.13.13.1 - SERVERPORT=51820 - PEERS=1 - PEERDNS=auto volumes: - /home/lljubojevic/wireguard-server/config:/config - /home/lljubojevic/wireguard-server/modules:/lib/modules ports: - 51820:51820/udp sysctls: - net.ipv6.conf.all.disable_ipv6=0 restart: unless-stopped Then execute the creation of a Docker WireGuard VPN server container: docker-compose up -d Does it work?: If the command: docker logs wireguard-server shows output as: [s6-init] making user provided files available at /var/run/s6/etc...exited 0. [s6-init] ensuring user provided files have correct perms...exited 0. [fix-attrs.d] applying ownership & permissions fixes... [fix-attrs.d] done. [cont-init.d] executing container initialization scripts... [cont-init.d] 01-envfile: executing... [cont-init.d] 01-envfile: exited 0. [cont-init.d] 01-migrations: executing... [migrations] started [migrations] no migrations found [cont-init.d] 01-migrations: exited 0. [cont-init.d] 02-tamper-check: executing... [cont-init.d] 02-tamper-check: exited 0. [cont-init.d] 10-adduser: executing... ------------------------------------- _ () | | ___ _ __ | | / __| | | / \\ | | \\__ \\ | | | () | |_| |___/ |_| \\__/ Brought to you by linuxserver.io ------------------------------------- To support the app dev(s) visit: WireGuard: https://www.wireguard.com/donations/ To support LSIO projects visit: https://www.linuxserver.io/donate/ ------------------------------------- GID/UID ------------------------------------- User uid: 1000 User gid: 1000 ------------------------------------- [cont-init.d] 10-adduser: exited 0. [cont-init.d] 30-module: executing... Uname info: Linux 12320232623e 5.16.10-zen1-1-zen #1 ZEN SMP PREEMPT Wed, 16 Feb 2022 19:35:21 +0000 x86_64 x86_64 x86_64 GNU/Linux **** It seems the wireguard module is already active. Skipping kernel header install and module compilation. **** [cont-init.d] 30-module: exited 0. [cont-init.d] 40-confs: executing... **** Server mode is selected **** **** External server address is set to 10.13.13.1 **** **** External server port is set to 51820. Make sure that port is properly forwarded to port 51820 inside this container **** **** Internal subnet is set to 10.13.13.0 **** **** AllowedIPs for peers 0.0.0.0/0, ::/0 **** **** PEERDNS var is either not set or is set to \"auto\", setting peer DNS to 10.13.13.1 to use wireguard docker host's DNS. **** **** Server mode is selected **** **** Server related environment variables changed, regenerating 1 server and 1 peer/client confs **** PEER 1 QR code: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2584\u2584\u2584 \u2588\u2580\u2580\u2588\u2584\u2588 \u2584\u2584 \u2584\u2588\u2588 \u2584\u2580\u2580\u2584\u2584\u2584 \u2584\u2588 \u2584\u2584\u2584\u2584\u2584\u2580\u2584 \u2588\u2584 \u2584\u2588\u2584\u2580\u2584 \u2588\u2588 \u2584\u2584\u2584\u2584\u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2584\u2588 \u2580\u2580\u2584\u2588\u2588\u2588 \u2584 \u2588\u2584\u2584\u2588\u2584\u2580\u2584\u2588\u2584\u2580 \u2584\u2584\u2588 \u2588\u2584\u2580\u2580\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2584 \u2588\u2588 \u2588 \u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588 \u2588\u2584\u2580\u2584\u2584\u2588\u2588\u2588\u2588 \u2580\u2588\u2588\u2580\u2580\u2584 \u2584\u2584\u2584 \u2580 \u2584\u2588\u2588\u2584\u2580\u2584 \u2588 \u2580\u2580\u2584\u2580\u2584\u2588\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588 \u2580 \u2588 \u2588 \u2580 \u2580 \u2580 \u2580 \u2580\u2584\u2588 \u2588\u2584\u2588 \u2580\u2584\u2580\u2584\u2588\u2584\u2588 \u2580\u2584\u2588\u2584\u2580 \u2580 \u2580\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580\u2584\u2588\u2580\u2584 \u2580\u2584\u2588 \u2584\u2580\u2588\u2588\u2580\u2584\u2580\u2588 \u2584\u2584\u2580\u2584 \u2584\u2584\u2584\u2580\u2588\u2580\u2584\u2584 \u2580\u2588\u2580\u2588 \u2588\u2580\u2584\u2588\u2580\u2584\u2584\u2588\u2584 \u2580 \u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2580\u2584 \u2588 \u2584\u2588\u2580\u2588 \u2580\u2580\u2584\u2588\u2584 \u2580\u2580 \u2580\u2580\u2588\u2584\u2588 \u2588 \u2580\u2580\u2584\u2580\u2584\u2588 \u2580\u2584\u2584 \u2584 \u2580 \u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2584\u2580\u2580 \u2584\u2584\u2588\u2588\u2580\u2588\u2584\u2584\u2584 \u2580 \u2580\u2588 \u2580\u2588 \u2584 \u2580 \u2584\u2588\u2584 \u2584 \u2588\u2584\u2584\u2588\u2580\u2580\u2584 \u2584 \u2584\u2588\u2584\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584 \u2584 \u2588\u2584\u2580\u2580\u2588 \u2588\u2580\u2584\u2588\u2584\u2588\u2588\u2584 \u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2584\u2588 \u2580\u2584\u2580\u2580 \u2580\u2584 \u2588\u2588 \u2588 \u2588 \u2588 \u2580 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2580\u2580\u2584\u2580 \u2584 \u2580\u2584 \u2584\u2588\u2588\u2584\u2584\u2584\u2580\u2584\u2580 \u2588\u2588 \u2588 \u2580\u2584\u2584 \u2588\u2584\u2584\u2584\u2588 \u2580 \u2588 \u2584\u2584\u2588\u2588\u2584 \u2584\u2588\u2580\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2580\u2580\u2580\u2588\u2580\u2584 \u2584 \u2584\u2580\u2580\u2580\u2584\u2588 \u2580\u2584\u2588\u2588\u2588 \u2584\u2588\u2588\u2588\u2584 \u2580\u2580\u2584 \u2584\u2580\u2580\u2584 \u2588\u2580\u2580 \u2584\u2580 \u2588\u2588\u2588\u2580\u2580\u2588\u2580\u2584\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2580\u2588 \u2584\u2588\u2588\u2580\u2588 \u2588\u2588\u2588\u2588 \u2580\u2584 \u2588\u2584\u2584\u2584 \u2584\u2584 \u2584 \u2580\u2584\u2588 \u2584 \u2588\u2584\u2584\u2588\u2588\u2584\u2588 \u2584 \u2588\u2588\u2584 \u2584\u2580\u2584\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580 \u2584 \u2580\u2580\u2584 \u2588\u2580 \u2584\u2584 \u2588 \u2584\u2580 \u2588\u2584\u2580\u2580\u2580 \u2580\u2584 \u2580\u2588 \u2584\u2588 \u2584\u2580\u2588 \u2580\u2580\u2584\u2580\u2584\u2588\u2584\u2584 \u2584\u2588 \u2584\u2580\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2584 \u2584\u2588\u2588\u2584 \u2588\u2588\u2588\u2580\u2580\u2584\u2588\u2588\u2580 \u2584\u2588\u2584 \u2588\u2584\u2580 \u2584 \u2588\u2580\u2580 \u2580\u2580\u2584\u2584 \u2580\u2584\u2580\u2588\u2580\u2584\u2580 \u2588\u2588\u2580\u2588\u2584 \u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2588 \u2584\u2584\u2584 \u2584\u2584 \u2580\u2584 \u2584\u2580\u2580\u2580 \u2588\u2588\u2584 \u2588 \u2584\u2584\u2584 \u2584\u2580 \u2588 \u2588\u2580 \u2580\u2588\u2584\u2580\u2580\u2584 \u2584\u2584\u2584 \u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584 \u2584\u2584 \u2588\u2584\u2588 \u2584 \u2580 \u2580\u2588\u2584\u2588\u2584\u2588\u2584\u2584\u2588\u2588\u2584\u2584 \u2588\u2584\u2588 \u2584 \u2588\u2584\u2584 \u2584\u2584\u2584\u2580\u2588\u2584\u2588\u2584\u2584\u2588\u2584 \u2588\u2584\u2588 \u2580\u2580\u2588\u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2580 \u2584\u2584\u2584\u2584\u2584 \u2584 \u2580\u2580\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2580\u2584\u2584\u2584 \u2584\u2584 \u2580\u2580\u2584 \u2588\u2588\u2588\u2588\u2580\u2580\u2584\u2588 \u2588\u2580 \u2584\u2584 \u2584\u2588\u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580\u2588\u2588\u2584 \u2584 \u2580\u2584\u2584\u2580\u2580\u2584 \u2584\u2588\u2580 \u2584\u2580 \u2588\u2584 \u2580\u2584\u2588 \u2584\u2580\u2588\u2580\u2584\u2580 \u2584\u2584\u2588\u2584\u2584\u2584 \u2580\u2580\u2588 \u2580\u2588\u2580\u2584\u2588\u2580\u2588\u2588\u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580\u2588\u2584 \u2588\u2584\u2584\u2584 \u2580\u2588\u2580\u2588\u2588\u2588\u2580\u2584\u2588\u2588\u2580\u2580\u2588\u2580\u2580\u2580 \u2584\u2588\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2580\u2588\u2580\u2584\u2584\u2584\u2584 \u2588 \u2584\u2588\u2584\u2580 \u2584\u2588\u2580\u2584\u2584 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580 \u2584\u2588\u2588 \u2584\u2588 \u2584 \u2580\u2584\u2584 \u2580\u2584\u2580 \u2588\u2584 \u2584\u2584\u2580 \u2584\u2584 \u2584\u2584 \u2580\u2584\u2580\u2584\u2588\u2588\u2588\u2588\u2584 \u2588 \u2588 \u2580\u2584\u2588\u2580\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2580\u2584\u2580\u2584\u2584\u2584\u2584\u2580\u2584\u2588\u2580\u2580\u2588 \u2584\u2580\u2580\u2588 \u2584\u2580\u2584\u2580\u2584\u2584 \u2580\u2584\u2588\u2584 \u2580\u2588\u2584 \u2584\u2584 \u2588\u2588\u2580\u2588\u2580\u2588\u2588\u2580 \u2584\u2580\u2584\u2588\u2584\u2580\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2584\u2584\u2588 \u2588\u2584\u2588\u2588\u2584 \u2584 \u2584 \u2588\u2584\u2584 \u2588 \u2580 \u2584 \u2588\u2588\u2588 \u2580\u2588\u2588\u2584 \u2580 \u2584\u2580\u2584\u2584\u2580\u2584\u2588\u2580\u2584 \u2588\u2584\u2580 \u2584\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2580\u2588\u2588\u2588\u2584\u2580 \u2584\u2588\u2580 \u2588\u2580 \u2588\u2584\u2588 \u2588\u2580 \u2588\u2584\u2580\u2580\u2588 \u2580\u2588 \u2580 \u2580\u2584\u2584\u2580 \u2588\u2588 \u2588\u2588\u2584 \u2580\u2580\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\u2588\u2584\u2580\u2580\u2580\u2584\u2584 \u2584\u2580 \u2588 \u2584\u2584\u2584\u2584\u2588\u2584 \u2588 \u2588\u2580\u2588\u2580\u2584 \u2588 \u2588\u2588\u2584\u2580 \u2588\u2588\u2588 \u2580\u2584 \u2580\u2588\u2584 \u2588\u2580 \u2588\u2584\u2580\u2588\u2588\u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2580 \u2580\u2580\u2584\u2584\u2580 \u2580\u2580\u2580\u2580\u2584\u2580 \u2584\u2584\u2584\u2584\u2588 \u2580\u2584\u2580\u2588\u2580 \u2588 \u2584\u2588\u2580\u2584\u2580\u2588\u2580\u2588\u2580 \u2584\u2580\u2584 \u2580 \u2584\u2588 \u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588 \u2580\u2584\u2588 \u2588 \u2584\u2584\u2580\u2588\u2584 \u2588\u2584\u2588 \u2584\u2584\u2584 \u2580\u2584\u2580 \u2584\u2584\u2580\u2584\u2588 \u2588\u2584\u2584 \u2584\u2580\u2588 \u2584\u2584\u2584 \u2584\u2588 \u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2584\u2584\u2584\u2584\u2584 \u2588\u2584 \u2584\u2588\u2580\u2584\u2584 \u2580\u2588\u2584\u2580\u2584 \u2580 \u2588\u2584\u2588 \u2588\u2580\u2584\u2580\u2584\u2588\u2588\u2580 \u2584\u2580\u2588\u2580\u2580 \u2588\u2584\u2588 \u2588\u2584 \u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588 \u2588 \u2588\u2580\u2584\u2588\u2580 \u2580\u2584\u2588\u2580\u2588\u2584\u2580 \u2580 \u2584\u2584 \u2580\u2584\u2580\u2588\u2584\u2580\u2588 \u2580\u2588\u2580\u2588\u2580 \u2588\u2584\u2588 \u2584 \u2588\u2588 \u2580\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2584\u2584\u2584\u2588 \u2588\u2580\u2588\u2580\u2584\u2580\u2584\u2588\u2588\u2588 \u2584\u2584\u2584\u2588 \u2588\u2580\u2584\u2580\u2584\u2584 \u2584\u2580\u2584\u2584\u2580\u2588\u2584 \u2580\u2588\u2584\u2580 \u2584\u2584 \u2580\u2584 \u2588 \u2584\u2584\u2588\u2584\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2584\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2584\u2588\u2584\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2584\u2588\u2584\u2584\u2584\u2588\u2584\u2584\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 [cont-init.d] 40-confs: exited 0. [cont-init.d] 90-custom-folders: executing... [cont-init.d] 90-custom-folders: exited 0. [cont-init.d] 99-custom-scripts: executing... [custom-init] no custom files found exiting... [cont-init.d] 99-custom-scripts: exited 0. [cont-init.d] done. [services.d] starting services [services.d] done. [#] ip link add wg0 type wireguard [#] wg setconf wg0 /dev/fd/63 [#] ip -4 address add 10.13.13.1 dev wg0 [#] ip link set mtu 1420 up dev wg0 [#] ip -4 route add 10.13.13.2/32 dev wg0 [#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE .:53 CoreDNS-1.9.0 linux/amd64, go1.17.6, ace3dcb It works!","title":"WireGuard VPN Server Setup"},{"location":"notes/wg.html#wireguard-vpn-client-setup","text":"Make a directory: mkdir wireguard-klijent In that directory create the \"docker-compose.yaml\" file: nano docker-compose.yaml docker-compose.yaml for client : version: '3.7' services: wireguard: image: linuxserver/wireguard container_name: wireguard-klijent restart: unless-stopped networks: - backbone volumes: - './wireguard:/config' - '/lib/modules:/lib/modules:ro' environment: - PUID=1000 - PGID=1000 cap_add: - NET_ADMIN - SYS_MODULE sysctls: - net.ipv6.conf.all.disable_ipv6=0 networks: backbone: driver: bridge It is necessary to generate a docker container for the client, which is not currently functional, in order for a creation of the configuration directory: docker-compose up -d Then, after launching the container, it is necessary to create a WireGuard network interface through which the client communicates with the server: docker exec -it wireguard-klijent ip link add dev wg0 type wireguard When the server is generated, a \"peer\" configuration file called \"peerX.conf\" will also be created. The contents of this file need to be overwritten in the wg0.conf file, which will be located in the wireguard-client directory. Let's do that: cp ./wireguard-server/config/peer/peer1.conf ./wireguard-klijent/wireguard/wg0.conf Change the wg0.conf file as following: [Interface] Address = 10.13.13.2 PrivateKey = 8NWt7q+Vg2f5IdULtIZQ06osuEfNZI4aOf3fjp0CTXY= ListenPort = 51820 DNS = 10.13.13.1 [Peer] PublicKey = nRWxNsBzC+bre4qzjLsWQp8Y9vo82JYF7N8XNLiTaxQ= Endpoint = 10.13.13.1:51820 AllowedIPs = 0.0.0.0/0, ::/0 Notes: * If you set a parameter from the server configuration to a number greater than one (PEERS = n) n directories for nodes and configurations for them will be created, the instructions assume that you have only one client node. * The wg0.conf file may vary. *","title":"WireGuard VPN Client Setup"},{"location":"notes/wg.html#testing-the-client-server-vpn-architecture","text":"docker exec -it wireguard-server curl -w \"\\n\" ifconfig.me 46.188.154.181 docker exec -it wireguard-klijent curl -w \"\\n\" ifconfig.me 46.188.154.181 If the IP addresses are the same, the configuration is valid. The IP address displayed is your current (or permanent) IP address by which you access the Internet.","title":"Testing the Client-Server VPN architecture:"},{"location":"notes/wg.html#explanation-of-configuration-parameters-in-docker-composeyaml-file","text":"Server side must contain parameters: * version: \"2.1\" - the required version of the docker-compose tool * services: - services started by the container * wireguard: - service name * image: - the requested image that the Docker tool retrieves from its repository, and container_name: - arbitrary container name. * cap_add: - gives the container elevated permissions on the host computer and allows it to interact with the host's network interfaces. * environment: - environment settings inside the Docker container * PUID and PGID - variables that define the user and group * TZ = Europe / Zagreb - container time zone, needs to be defined * SERVERURL - server domain name (can be empty, defined by the public IP address of the server or set to automatic configuration) * SERVERPORT - the door on which the server opens * PEERS - number of nodes in the VPN network (can be number or type name: laptop, tablet, phone) * PEERDNS - when set to auto, the container adjusts the DNS settings itself * volumes: - directories on the host that the container may use * ports: - the door that the container may use * sysctls: - parameters that allow the container to communicate with networks externally * restart: - defines in which cases the container may be restarted.","title":"Explanation of configuration parameters in docker-compose.yaml file"},{"location":"notes/wg.html#sources","text":"Pedrolamas Markontech Spad.uk","title":"Sources"}]}